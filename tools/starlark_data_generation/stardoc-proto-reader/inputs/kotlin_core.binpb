
Ò
kt_javac_optionsDDefine java compiler options for `kt_jvm_*` rules with java sources.*
nameA unique name for this target. .
warnControl warning behaviour.2"report"A
release)Compile for the specified Java SE release2	"default"P
x_ep_disable_all_checks,See javac -XepDisableAllChecks documentation2False/
x_lintSee javac -Xlint: documentation2[]F
xd_suppress_notes(See javac -XDsuppressNotes documentation2FalseN
x_explicit_api_mode.Enable explicit API mode for Kotlin libraries.2"off"-
add_exportsExport internal jdk apis2[]"P
kt_javac_options<@rules_kotlin//src/main/starlark/core/options:opts.javac.bzl*\
JavacOptionsL
JavacOptions<@rules_kotlin//src/main/starlark/core/options:opts.javac.bzl
æ
kt_kotlinc_optionsDefine kotlin compiler options.*
nameA unique name for this target. .
warnControl warning behaviour.2"report"~
include_stdlibsbDon't automatically include the Kotlin standard libraries into the classpath (stdlib and reflect).2"all"Z
x_skip_prerelease_check6Suppress errors thrown when using pre-release classes.2FalseF
x_context_receivers&Enable experimental context receivers.2FalseÅ
x_suppress_version_warningsYSuppress warnings about outdated, inconsistent, or experimental language or API versions.2False?
x_inline_classes"Enable experimental inline classes2False{
x_jvm_defaultaSpecifies that a JVM default method should be generated for non-abstract Kotlin interface member.2"off"c
x_no_call_assertionsBDon't generate not-null assertions for arguments of platform types2Falser
x_no_param_assertionsPDon't generate not-null assertions on parameters of methods accessible from Java2Falsey
x_no_receiver_assertionsTDon't generate not-null assertion for extension receiver arguments of platform types2FalseN
x_explicit_api_mode.Enable explicit API mode for Kotlin libraries.2"off"\
java_parameters@Generate metadata for Java 1.8+ reflection on method parameters.2False]
x_multi_platform@Enable experimental language support for multi-platform projects2FalseT
x_sam_conversions4Change codegen behavior of SAM/functional interfaces2"class":
	x_lambdas"Change codegen behavior of lambdas2"class"[
x_emit_jvm_type_annotations3Basic support for type annotations in JVM bytecode.2False*
x_optinDefine APIs to opt-in to.2[]
x_use_k2jCompile using experimental K2. K2 is a new compiler pipeline, no compatibility guarantees are yet provided2False/
x_no_optimizeDisable optimizations2Falseü
x_backend_threadsÑWhen using the IR backend, run lowerings by file in N parallel threads. 0 means use a thread per processor core. Default value is 1.21K
 x_enable_incremental_compilationEnable incremental compilation2False@
x_report_perf&Report detailed performance statistics2FalseÉ
x_use_fir_ltjCompile using LightTree parser with Front-end IR. Warning: this feature is far from being production-ready2Falseç
x_no_source_debug_extensioneDo not generate @kotlin.jvm.internal.SourceDebugExtension annotation on a class with the copy of SMAP2False°
+x_type_enhancement_improvements_strict_modeiEnables strict mode for type enhancement improvements, enforcing stricter type checking and enhancements.2FalseÖ
	x_jsr_305rSpecifies how to handle JSR-305 annotations in Kotlin code. Options are 'default', 'ignore', 'warn', and 'strict'.2""m
x_assertionsWConfigures how assertions are handled. The 'jvm' option enables assertions in JVM code.2""Ö
x_jspecify_annotationseControls how JSpecify annotations are treated. Options are 'default', 'ignore', 'warn', and 'strict'.2""Á
'x_consistent_data_class_copy_visibility≤The effect of this compiler flag is the same as applying @ConsistentCopyVisibility annotation to all data classes in the module. See https://youtrack.jetbrains.com/issue/KT-119142FalseD

jvm_target0The target version of the generated JVM bytecode2""¬
x_jdk_release™Compile against the specified JDK API version, similarly to javac's '-release'. This requires JDK 9 or newer.
The supported versions depend on the JDK used; for JDK 17+, the supported versions are 1.8 and 9√¢¬Ä¬ì21.
This also sets the value of '-jvm-target' to be equal to the selected JDK version.2"""T
kt_kotlinc_options>@rules_kotlin//src/main/starlark/core/options:opts.kotlinc.bzl*b
KotlincOptionsP
KotlincOptions>@rules_kotlin//src/main/starlark/core/options:opts.kotlinc.bzl
ˆ
kt_compiler_plugin®Define a plugin for the Kotlin compiler to run. The plugin can then be referenced in the `plugins` attribute
of the `kt_jvm_*` rules.

An example can be found under `//examples/plugin`:

```bzl
kt_compiler_plugin(
    name = "open_for_testing_plugin",
    id = "org.jetbrains.kotlin.allopen",
    options = {
        "annotation": "plugin.OpenForTesting",
    },
    deps = [
        "//kotlin/compiler:allopen-compiler-plugin",
    ],
)

kt_jvm_library(
    name = "open_for_testing",
    srcs = ["OpenForTesting.kt"],
)

kt_jvm_library(
    name = "user",
    srcs = ["User.kt"],
    plugins = [":open_for_testing_plugin"],
    deps = [
        ":open_for_testing",
    ],
)
```*
nameA unique name for this target. ì
depsDThe list of libraries to be added to the compiler's plugin classpath*?
JavaInfo3
JavaInfo'@@_builtins//:common/java/java_info.bzl2[]
idThe ID of the plugin â
options˜Dictionary of options to be passed to the plugin.
Supports the following template values:

- `{generatedClasses}`: directory for generated class output
- `{temp}`: temporary directory, discarded between invocations
- `{generatedSources}`:  directory for generated source output
- `{classpath}` : replaced with a list of jars separated by the filesystem appropriate separator.
2{}{
compile_phasebRuns the compiler plugin during kotlin compilation. Known examples: `allopen`, `sam_with_reciever`2TrueH
stubs_phase1Runs the compiler plugin in kapt stub generation.2True—
target_embedded_compiler´Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc
dependencies, and will fail when running against a non-embeddable compiler.2False"@
kt_compiler_plugin*@rules_kotlin//kotlin/internal/jvm:jvm.bzl*j
KtCompilerPluginInfoR
KtCompilerPluginInfo:@rules_kotlin//src/main/starlark/core/plugin:providers.bzl
ß
kt_ksp_pluginÖDefine a KSP plugin for the Kotlin compiler to run. The plugin can then be referenced in the `plugins` attribute
of the `kt_jvm_*` and `kt_android_*` rules.

An example can be found under `//examples/ksp`:

```bzl
kt_ksp_plugin(
    name = "moshi-kotlin-codegen",
    processor_class = "com.squareup.moshi.kotlin.codegen.ksp.JsonClassSymbolProcessorProvider",
    deps = [
        "@maven//:com_squareup_moshi_moshi",
        "@maven//:com_squareup_moshi_moshi_kotlin",
        "@maven//:com_squareup_moshi_moshi_kotlin_codegen",
    ],
)

kt_jvm_library(
    name = "lib",
    srcs = glob(["*.kt"]),
    plugins = ["//:moshi-kotlin-codegen"],
)*
nameA unique name for this target. ì
depsDThe list of libraries to be added to the compiler's plugin classpath*?
JavaInfo3
JavaInfo'@@_builtins//:common/java/java_info.bzl2[]Ä
processor_classiThe fully qualified class name that the Java compiler uses as an entry point to the annotation processor. —
target_embedded_compiler´Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc
dependencies, and will fail when running against a non-embeddable compiler.2FalseZ
generates_java?Runs Java compilation action for plugin generating Java output.2False";
kt_ksp_plugin*@rules_kotlin//kotlin/internal/jvm:jvm.bzl*\
KspPluginInfoK
KspPluginInfo:@rules_kotlin//src/main/starlark/core/plugin:providers.bzl
»
kt_plugin_cfg£Configurations for kt_compiler_plugin, ksp_plugin, and java_plugin.

This allows setting options and dependencies independently from the initial plugin definition.*
nameA unique name for this target. ©
plugin/The plugin to associate with this configuration *j
KtCompilerPluginInfoR
KtCompilerPluginInfo:@rules_kotlin//src/main/starlark/core/plugin:providers.bzl[
optionsJA dictionary of flag to values to be used as plugin configuration options.2{}û
deps$Dependencies for this configuration.*\
KspPluginInfoK
KspPluginInfo:@rules_kotlin//src/main/starlark/core/plugin:providers.bzl*?
JavaInfo3
JavaInfo'@@_builtins//:common/java/java_info.bzl*K
JavaPluginInfo9
JavaPluginInfo'@@_builtins//:common/java/java_info.bzl2[]";
kt_plugin_cfg*@rules_kotlin//kotlin/internal/jvm:jvm.bzl¬
define_kt_toolchain
name 
language_versionNone
api_versionNone

jvm_targetNone"
experimental_use_abi_jarsFalse;
2experimental_treat_internal_as_private_in_abi_jarsFalse8
/experimental_remove_private_classes_in_abi_jarsFalse'
experimental_strict_kotlin_depsNone'
experimental_report_unused_depsNone*
"experimental_reduce_classpath_modeNone&
experimental_multiplex_workersNoneN
javac_options=Label("@rules_kotlin//kotlin/internal:default_javac_options")R
kotlinc_options?Label("@rules_kotlin//kotlin/internal:default_kotlinc_options")
jvm_stdlibsNone
jvm_runtimeNone
jacocorunnerNone
exec_compatible_withNone
target_compatible_withNone
target_settingsNoneDefine the Kotlin toolchain.2D
define_kt_toolchain-@rules_kotlin//kotlin/internal:toolchains.bzlç
kt_register_toolchains*This macro registers the kotlin toolchain.2G
kt_register_toolchains-@rules_kotlin//kotlin/internal:toolchains.bzl2@rules_kotlin//kotlin:core.bzl