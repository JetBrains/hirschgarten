// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/build/v1/publish_build_event.proto

package com.google.devtools.build.v1;

public interface OrderedBuildEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.build.v1.OrderedBuildEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Which build event stream this event belongs to.
   * </pre>
   *
   * <code>.google.devtools.build.v1.StreamId stream_id = 1;</code>
   * @return Whether the streamId field is set.
   */
  boolean hasStreamId();
  /**
   * <pre>
   * Which build event stream this event belongs to.
   * </pre>
   *
   * <code>.google.devtools.build.v1.StreamId stream_id = 1;</code>
   * @return The streamId.
   */
  com.google.devtools.build.v1.StreamId getStreamId();
  /**
   * <pre>
   * Which build event stream this event belongs to.
   * </pre>
   *
   * <code>.google.devtools.build.v1.StreamId stream_id = 1;</code>
   */
  com.google.devtools.build.v1.StreamIdOrBuilder getStreamIdOrBuilder();

  /**
   * <pre>
   * The position of this event in the stream. The sequence numbers for a build
   * event stream should be a sequence of consecutive natural numbers starting
   * from one. (1, 2, 3, ...)
   * </pre>
   *
   * <code>int64 sequence_number = 2;</code>
   * @return The sequenceNumber.
   */
  long getSequenceNumber();

  /**
   * <pre>
   * The actual event.
   * </pre>
   *
   * <code>.google.devtools.build.v1.BuildEvent event = 3;</code>
   * @return Whether the event field is set.
   */
  boolean hasEvent();
  /**
   * <pre>
   * The actual event.
   * </pre>
   *
   * <code>.google.devtools.build.v1.BuildEvent event = 3;</code>
   * @return The event.
   */
  com.google.devtools.build.v1.BuildEvent getEvent();
  /**
   * <pre>
   * The actual event.
   * </pre>
   *
   * <code>.google.devtools.build.v1.BuildEvent event = 3;</code>
   */
  com.google.devtools.build.v1.BuildEventOrBuilder getEventOrBuilder();
}
