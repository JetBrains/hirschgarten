// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: third_party/bazel/src/main/protobuf/strategy_policy.proto
// Protobuf Java Version: 4.29.4

package com.google.devtools.build.lib.runtime.proto;

/**
 * <pre>
 * Provides control over what strategies (local, remote, etc) may be used.
 *
 * An empty policies (e.g. unset) implies no enforcement, anything is allowed.
 *
 * Policies are enforced against both user-provided values (flags) and
 * application-internal defaults. The latter is useful for guarding against
 * unexpectedly hard-coded defaults.
 *
 * Sample usage to allow everything to execute remotely, while only allowing
 * genrules to execute locally:
 *
 * strategy_policy {
 * mnemonic_policy {
 * default_allowlist: ["remote"]
 * strategy_allowlist: [
 * { mnemonic: "Genrule" strategy: ["local"] }
 * ]
 * }
 * }
 * </pre>
 *
 * Protobuf type {@code blaze.strategy_policy.StrategyPolicy}
 */
public final class StrategyPolicy extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:blaze.strategy_policy.StrategyPolicy)
    StrategyPolicyOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 4,
      /* suffix= */ "",
      StrategyPolicy.class.getName());
  }
  // Use StrategyPolicy.newBuilder() to construct.
  private StrategyPolicy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private StrategyPolicy() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.build.lib.runtime.proto.StrategyPolicyOuterClass.internal_static_blaze_strategy_policy_StrategyPolicy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.build.lib.runtime.proto.StrategyPolicyOuterClass.internal_static_blaze_strategy_policy_StrategyPolicy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.build.lib.runtime.proto.StrategyPolicy.class, com.google.devtools.build.lib.runtime.proto.StrategyPolicy.Builder.class);
  }

  private int bitField0_;
  public static final int MNEMONIC_POLICY_FIELD_NUMBER = 1;
  private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy mnemonicPolicy_;
  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   * @return Whether the mnemonicPolicy field is set.
   */
  @java.lang.Override
  public boolean hasMnemonicPolicy() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   * @return The mnemonicPolicy.
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getMnemonicPolicy() {
    return mnemonicPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : mnemonicPolicy_;
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getMnemonicPolicyOrBuilder() {
    return mnemonicPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : mnemonicPolicy_;
  }

  public static final int DYNAMIC_REMOTE_POLICY_FIELD_NUMBER = 2;
  private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy dynamicRemotePolicy_;
  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   * @return Whether the dynamicRemotePolicy field is set.
   */
  @java.lang.Override
  public boolean hasDynamicRemotePolicy() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   * @return The dynamicRemotePolicy.
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicRemotePolicy() {
    return dynamicRemotePolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicRemotePolicy_;
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicRemotePolicyOrBuilder() {
    return dynamicRemotePolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicRemotePolicy_;
  }

  public static final int DYNAMIC_LOCAL_POLICY_FIELD_NUMBER = 3;
  private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy dynamicLocalPolicy_;
  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   * @return Whether the dynamicLocalPolicy field is set.
   */
  @java.lang.Override
  public boolean hasDynamicLocalPolicy() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   * @return The dynamicLocalPolicy.
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicLocalPolicy() {
    return dynamicLocalPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicLocalPolicy_;
  }
  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicLocalPolicyOrBuilder() {
    return dynamicLocalPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicLocalPolicy_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getMnemonicPolicy());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getDynamicRemotePolicy());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getDynamicLocalPolicy());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getMnemonicPolicy());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDynamicRemotePolicy());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDynamicLocalPolicy());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.StrategyPolicy)) {
      return super.equals(obj);
    }
    com.google.devtools.build.lib.runtime.proto.StrategyPolicy other = (com.google.devtools.build.lib.runtime.proto.StrategyPolicy) obj;

    if (hasMnemonicPolicy() != other.hasMnemonicPolicy()) return false;
    if (hasMnemonicPolicy()) {
      if (!getMnemonicPolicy()
          .equals(other.getMnemonicPolicy())) return false;
    }
    if (hasDynamicRemotePolicy() != other.hasDynamicRemotePolicy()) return false;
    if (hasDynamicRemotePolicy()) {
      if (!getDynamicRemotePolicy()
          .equals(other.getDynamicRemotePolicy())) return false;
    }
    if (hasDynamicLocalPolicy() != other.hasDynamicLocalPolicy()) return false;
    if (hasDynamicLocalPolicy()) {
      if (!getDynamicLocalPolicy()
          .equals(other.getDynamicLocalPolicy())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMnemonicPolicy()) {
      hash = (37 * hash) + MNEMONIC_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getMnemonicPolicy().hashCode();
    }
    if (hasDynamicRemotePolicy()) {
      hash = (37 * hash) + DYNAMIC_REMOTE_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getDynamicRemotePolicy().hashCode();
    }
    if (hasDynamicLocalPolicy()) {
      hash = (37 * hash) + DYNAMIC_LOCAL_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getDynamicLocalPolicy().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.StrategyPolicy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Provides control over what strategies (local, remote, etc) may be used.
   *
   * An empty policies (e.g. unset) implies no enforcement, anything is allowed.
   *
   * Policies are enforced against both user-provided values (flags) and
   * application-internal defaults. The latter is useful for guarding against
   * unexpectedly hard-coded defaults.
   *
   * Sample usage to allow everything to execute remotely, while only allowing
   * genrules to execute locally:
   *
   * strategy_policy {
   * mnemonic_policy {
   * default_allowlist: ["remote"]
   * strategy_allowlist: [
   * { mnemonic: "Genrule" strategy: ["local"] }
   * ]
   * }
   * }
   * </pre>
   *
   * Protobuf type {@code blaze.strategy_policy.StrategyPolicy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:blaze.strategy_policy.StrategyPolicy)
      com.google.devtools.build.lib.runtime.proto.StrategyPolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.StrategyPolicyOuterClass.internal_static_blaze_strategy_policy_StrategyPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.StrategyPolicyOuterClass.internal_static_blaze_strategy_policy_StrategyPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.StrategyPolicy.class, com.google.devtools.build.lib.runtime.proto.StrategyPolicy.Builder.class);
    }

    // Construct using com.google.devtools.build.lib.runtime.proto.StrategyPolicy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getMnemonicPolicyFieldBuilder();
        getDynamicRemotePolicyFieldBuilder();
        getDynamicLocalPolicyFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      mnemonicPolicy_ = null;
      if (mnemonicPolicyBuilder_ != null) {
        mnemonicPolicyBuilder_.dispose();
        mnemonicPolicyBuilder_ = null;
      }
      dynamicRemotePolicy_ = null;
      if (dynamicRemotePolicyBuilder_ != null) {
        dynamicRemotePolicyBuilder_.dispose();
        dynamicRemotePolicyBuilder_ = null;
      }
      dynamicLocalPolicy_ = null;
      if (dynamicLocalPolicyBuilder_ != null) {
        dynamicLocalPolicyBuilder_.dispose();
        dynamicLocalPolicyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.build.lib.runtime.proto.StrategyPolicyOuterClass.internal_static_blaze_strategy_policy_StrategyPolicy_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.StrategyPolicy getDefaultInstanceForType() {
      return com.google.devtools.build.lib.runtime.proto.StrategyPolicy.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.StrategyPolicy build() {
      com.google.devtools.build.lib.runtime.proto.StrategyPolicy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.StrategyPolicy buildPartial() {
      com.google.devtools.build.lib.runtime.proto.StrategyPolicy result = new com.google.devtools.build.lib.runtime.proto.StrategyPolicy(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.devtools.build.lib.runtime.proto.StrategyPolicy result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.mnemonicPolicy_ = mnemonicPolicyBuilder_ == null
            ? mnemonicPolicy_
            : mnemonicPolicyBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.dynamicRemotePolicy_ = dynamicRemotePolicyBuilder_ == null
            ? dynamicRemotePolicy_
            : dynamicRemotePolicyBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.dynamicLocalPolicy_ = dynamicLocalPolicyBuilder_ == null
            ? dynamicLocalPolicy_
            : dynamicLocalPolicyBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.build.lib.runtime.proto.StrategyPolicy) {
        return mergeFrom((com.google.devtools.build.lib.runtime.proto.StrategyPolicy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.StrategyPolicy other) {
      if (other == com.google.devtools.build.lib.runtime.proto.StrategyPolicy.getDefaultInstance()) return this;
      if (other.hasMnemonicPolicy()) {
        mergeMnemonicPolicy(other.getMnemonicPolicy());
      }
      if (other.hasDynamicRemotePolicy()) {
        mergeDynamicRemotePolicy(other.getDynamicRemotePolicy());
      }
      if (other.hasDynamicLocalPolicy()) {
        mergeDynamicLocalPolicy(other.getDynamicLocalPolicy());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getMnemonicPolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDynamicRemotePolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getDynamicLocalPolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy mnemonicPolicy_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> mnemonicPolicyBuilder_;
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     * @return Whether the mnemonicPolicy field is set.
     */
    public boolean hasMnemonicPolicy() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     * @return The mnemonicPolicy.
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getMnemonicPolicy() {
      if (mnemonicPolicyBuilder_ == null) {
        return mnemonicPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : mnemonicPolicy_;
      } else {
        return mnemonicPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public Builder setMnemonicPolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (mnemonicPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mnemonicPolicy_ = value;
      } else {
        mnemonicPolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public Builder setMnemonicPolicy(
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder builderForValue) {
      if (mnemonicPolicyBuilder_ == null) {
        mnemonicPolicy_ = builderForValue.build();
      } else {
        mnemonicPolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public Builder mergeMnemonicPolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (mnemonicPolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          mnemonicPolicy_ != null &&
          mnemonicPolicy_ != com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance()) {
          getMnemonicPolicyBuilder().mergeFrom(value);
        } else {
          mnemonicPolicy_ = value;
        }
      } else {
        mnemonicPolicyBuilder_.mergeFrom(value);
      }
      if (mnemonicPolicy_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public Builder clearMnemonicPolicy() {
      bitField0_ = (bitField0_ & ~0x00000001);
      mnemonicPolicy_ = null;
      if (mnemonicPolicyBuilder_ != null) {
        mnemonicPolicyBuilder_.dispose();
        mnemonicPolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder getMnemonicPolicyBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getMnemonicPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getMnemonicPolicyOrBuilder() {
      if (mnemonicPolicyBuilder_ != null) {
        return mnemonicPolicyBuilder_.getMessageOrBuilder();
      } else {
        return mnemonicPolicy_ == null ?
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : mnemonicPolicy_;
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for regular spawn/action execution. Relevant
     * command-line flags this controls include --strategy and --genrule_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> 
        getMnemonicPolicyFieldBuilder() {
      if (mnemonicPolicyBuilder_ == null) {
        mnemonicPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder>(
                getMnemonicPolicy(),
                getParentForChildren(),
                isClean());
        mnemonicPolicy_ = null;
      }
      return mnemonicPolicyBuilder_;
    }

    private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy dynamicRemotePolicy_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> dynamicRemotePolicyBuilder_;
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     * @return Whether the dynamicRemotePolicy field is set.
     */
    public boolean hasDynamicRemotePolicy() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     * @return The dynamicRemotePolicy.
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicRemotePolicy() {
      if (dynamicRemotePolicyBuilder_ == null) {
        return dynamicRemotePolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicRemotePolicy_;
      } else {
        return dynamicRemotePolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public Builder setDynamicRemotePolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (dynamicRemotePolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dynamicRemotePolicy_ = value;
      } else {
        dynamicRemotePolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public Builder setDynamicRemotePolicy(
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder builderForValue) {
      if (dynamicRemotePolicyBuilder_ == null) {
        dynamicRemotePolicy_ = builderForValue.build();
      } else {
        dynamicRemotePolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public Builder mergeDynamicRemotePolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (dynamicRemotePolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          dynamicRemotePolicy_ != null &&
          dynamicRemotePolicy_ != com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance()) {
          getDynamicRemotePolicyBuilder().mergeFrom(value);
        } else {
          dynamicRemotePolicy_ = value;
        }
      } else {
        dynamicRemotePolicyBuilder_.mergeFrom(value);
      }
      if (dynamicRemotePolicy_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public Builder clearDynamicRemotePolicy() {
      bitField0_ = (bitField0_ & ~0x00000002);
      dynamicRemotePolicy_ = null;
      if (dynamicRemotePolicyBuilder_ != null) {
        dynamicRemotePolicyBuilder_.dispose();
        dynamicRemotePolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder getDynamicRemotePolicyBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getDynamicRemotePolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicRemotePolicyOrBuilder() {
      if (dynamicRemotePolicyBuilder_ != null) {
        return dynamicRemotePolicyBuilder_.getMessageOrBuilder();
      } else {
        return dynamicRemotePolicy_ == null ?
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicRemotePolicy_;
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the remote execution leg of dynamic
     * execution. Relevant flag is --dynamic_remote_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> 
        getDynamicRemotePolicyFieldBuilder() {
      if (dynamicRemotePolicyBuilder_ == null) {
        dynamicRemotePolicyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder>(
                getDynamicRemotePolicy(),
                getParentForChildren(),
                isClean());
        dynamicRemotePolicy_ = null;
      }
      return dynamicRemotePolicyBuilder_;
    }

    private com.google.devtools.build.lib.runtime.proto.MnemonicPolicy dynamicLocalPolicy_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> dynamicLocalPolicyBuilder_;
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     * @return Whether the dynamicLocalPolicy field is set.
     */
    public boolean hasDynamicLocalPolicy() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     * @return The dynamicLocalPolicy.
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicLocalPolicy() {
      if (dynamicLocalPolicyBuilder_ == null) {
        return dynamicLocalPolicy_ == null ? com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicLocalPolicy_;
      } else {
        return dynamicLocalPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public Builder setDynamicLocalPolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (dynamicLocalPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dynamicLocalPolicy_ = value;
      } else {
        dynamicLocalPolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public Builder setDynamicLocalPolicy(
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder builderForValue) {
      if (dynamicLocalPolicyBuilder_ == null) {
        dynamicLocalPolicy_ = builderForValue.build();
      } else {
        dynamicLocalPolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public Builder mergeDynamicLocalPolicy(com.google.devtools.build.lib.runtime.proto.MnemonicPolicy value) {
      if (dynamicLocalPolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          dynamicLocalPolicy_ != null &&
          dynamicLocalPolicy_ != com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance()) {
          getDynamicLocalPolicyBuilder().mergeFrom(value);
        } else {
          dynamicLocalPolicy_ = value;
        }
      } else {
        dynamicLocalPolicyBuilder_.mergeFrom(value);
      }
      if (dynamicLocalPolicy_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public Builder clearDynamicLocalPolicy() {
      bitField0_ = (bitField0_ & ~0x00000004);
      dynamicLocalPolicy_ = null;
      if (dynamicLocalPolicyBuilder_ != null) {
        dynamicLocalPolicyBuilder_.dispose();
        dynamicLocalPolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder getDynamicLocalPolicyBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getDynamicLocalPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicLocalPolicyOrBuilder() {
      if (dynamicLocalPolicyBuilder_ != null) {
        return dynamicLocalPolicyBuilder_.getMessageOrBuilder();
      } else {
        return dynamicLocalPolicy_ == null ?
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.getDefaultInstance() : dynamicLocalPolicy_;
      }
    }
    /**
     * <pre>
     * Controls per-mnemonic policies for the local execution leg of dynamic
     * execution. Relevant flag is --dynamic_local_strategy.
     * </pre>
     *
     * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder> 
        getDynamicLocalPolicyFieldBuilder() {
      if (dynamicLocalPolicyBuilder_ == null) {
        dynamicLocalPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.devtools.build.lib.runtime.proto.MnemonicPolicy, com.google.devtools.build.lib.runtime.proto.MnemonicPolicy.Builder, com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder>(
                getDynamicLocalPolicy(),
                getParentForChildren(),
                isClean());
        dynamicLocalPolicy_ = null;
      }
      return dynamicLocalPolicyBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:blaze.strategy_policy.StrategyPolicy)
  }

  // @@protoc_insertion_point(class_scope:blaze.strategy_policy.StrategyPolicy)
  private static final com.google.devtools.build.lib.runtime.proto.StrategyPolicy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.StrategyPolicy();
  }

  public static com.google.devtools.build.lib.runtime.proto.StrategyPolicy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StrategyPolicy>
      PARSER = new com.google.protobuf.AbstractParser<StrategyPolicy>() {
    @java.lang.Override
    public StrategyPolicy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StrategyPolicy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StrategyPolicy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.build.lib.runtime.proto.StrategyPolicy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

