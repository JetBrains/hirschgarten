// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: third_party/bazel/src/main/protobuf/strategy_policy.proto
// Protobuf Java Version: 4.29.4

package com.google.devtools.build.lib.runtime.proto;

public interface StrategyPolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:blaze.strategy_policy.StrategyPolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   * @return Whether the mnemonicPolicy field is set.
   */
  boolean hasMnemonicPolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   * @return The mnemonicPolicy.
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getMnemonicPolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for regular spawn/action execution. Relevant
   * command-line flags this controls include --strategy and --genrule_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy mnemonic_policy = 1;</code>
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getMnemonicPolicyOrBuilder();

  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   * @return Whether the dynamicRemotePolicy field is set.
   */
  boolean hasDynamicRemotePolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   * @return The dynamicRemotePolicy.
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicRemotePolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for the remote execution leg of dynamic
   * execution. Relevant flag is --dynamic_remote_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_remote_policy = 2;</code>
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicRemotePolicyOrBuilder();

  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   * @return Whether the dynamicLocalPolicy field is set.
   */
  boolean hasDynamicLocalPolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   * @return The dynamicLocalPolicy.
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicy getDynamicLocalPolicy();
  /**
   * <pre>
   * Controls per-mnemonic policies for the local execution leg of dynamic
   * execution. Relevant flag is --dynamic_local_strategy.
   * </pre>
   *
   * <code>optional .blaze.strategy_policy.MnemonicPolicy dynamic_local_policy = 3;</code>
   */
  com.google.devtools.build.lib.runtime.proto.MnemonicPolicyOrBuilder getDynamicLocalPolicyOrBuilder();
}
