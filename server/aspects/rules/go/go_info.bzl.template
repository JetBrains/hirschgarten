load("//aspects:utils/utils.bzl", "create_proto", "create_struct", "file_location")
load("@${ruleName}//go:def.bzl", "go_context", "GoArchive", "GoSource")

def extract_go_info(target, ctx, **kwargs):
#     if GoSource in target:
#         all_sources = [
#             file_location(t)
#             for t in target[GoSource].orig_srcs
#         ]
#         new_sources = dict(srcs = all_sources)
#     else:
#         new_sources = None

    if GoArchive not in target:
        return None, None
    go_archive = target[GoArchive]
    importpath = go_archive.data.importpath
    sdk_home_path = _extract_sdk(ctx)

    result = create_struct(
        importpath = importpath,
        sdk_home_path = sdk_home_path,
    )

    return dict(go_target_info = result), None

def _extract_sdk(ctx):
    go = go_context(ctx)
    if go == None:
        return None
    return file_location(go.sdk.go)
