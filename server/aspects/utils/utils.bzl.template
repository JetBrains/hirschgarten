# Copyright 2019-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

def abs(num):
    if num < 0:
        return -num
    else:
        return num

def map(f, xs):
    return [f(x) for x in xs]

def filter(f, xs):
    return [x for x in xs if f(x)]

def not_none(x):
    return x != None

def filter_not_none(xs):
    return filter(not_none, xs)

def flatten(xss):
    return [x for xs in xss for x in xs]

def flatmap(f, xs):
    return flatten(map(f, xs))

def file_location(file):
    if file == None:
        return None

    return to_file_location(
        file.path,
        file.root.path if not file.is_source else "",
        file.is_source,
        file.owner.workspace_root.startswith("..") or file.owner.workspace_root.startswith("external"),
    )

def _strip_root_exec_path_fragment(path, root_fragment):
    if root_fragment and path.startswith(root_fragment + "/"):
        return path[len(root_fragment + "/"):]
    return path

def _strip_external_workspace_prefix(path):
    if path.startswith("../") or path.startswith("external/"):
        without_prefix = path.split("/", 2)
        if len(without_prefix) > 2:
            return without_prefix[2]
        else:
            return ""
    return path

def to_file_location(exec_path, root_exec_path_fragment, is_source, is_external):
    # directory structure:
    # exec_path = (../repo_name)? + (root_fragment)? + relative_path
    relative_path = _strip_external_workspace_prefix(exec_path)
    relative_path = _strip_root_exec_path_fragment(relative_path, root_exec_path_fragment)

    root_exec_path_fragment = exec_path[:-(len("/" + relative_path))] if relative_path != "" else exec_path

    external_repo_name = None
    if root_exec_path_fragment.startswith("external/") or root_exec_path_fragment.startswith("../"):
        external_repo_name = root_exec_path_fragment.split("/")[1]

    for repo in REPO_MAPPING.keys():
        if external_repo_name == repo:
            is_external = False
            root_exec_path_fragment = None
            relative_path = REPO_MAPPING[external_repo_name] + "/" + relative_path
            break

    return create_file_location(relative_path, is_source, is_external, root_exec_path_fragment)

def create_file_location(relative_path, is_source, is_external, root_execution_path_fragment):
    return struct(
        relative_path = relative_path,
        is_source = is_source,
        is_external = is_external,
        root_execution_path_fragment = root_execution_path_fragment,
    )

def create_struct(**kwargs):
    d = {name: kwargs[name] for name in kwargs if kwargs[name] != None}
    return struct(**d)

def update_sync_output_groups(groups_dict, key, new_set):
    groups_dict[key] = depset(transitive = [groups_dict.get(key, depset()), new_set])

def get_aspect_ids(ctx, target):
    """Returns the all aspect ids, filtering out self."""
    aspect_ids = None
    if hasattr(ctx, "aspect_ids"):
        aspect_ids = ctx.aspect_ids
    elif hasattr(target, "aspect_ids"):
        aspect_ids = target.aspect_ids
    else:
        return None
    return [aspect_id for aspect_id in aspect_ids if "bsp_target_info_aspect" not in aspect_id]

REPO_MAPPING = ${repoMapping}

def is_external(target):
    for repo in REPO_MAPPING.keys():
        if target.label.repo_name == repo:
            return False
    return not str(target.label).startswith("@@//") and not str(target.label).startswith("@//") and not str(target.label).startswith("//")

def convert_struct_to_dict(s):
    attrs = dir(s)

    # two deprecated methods of struct
    if "to_json" in attrs:
        attrs.remove("to_json")
    if "to_proto" in attrs:
        attrs.remove("to_proto")

    return {key: getattr(s, key) for key in attrs}

def log(text, level):
    print("[" + level + "] " + str(text))

def log_warn(text):
    log(text, "WARN")

def is_valid_aspect_target(target):
    return hasattr(target, "bsp_info")

def _collect_target_from_attr(rule_attrs, attr_name, result):
    """Collects the targets from the given attr into the result."""
    if not hasattr(rule_attrs, attr_name):
        return
    attr_value = getattr(rule_attrs, attr_name)
    type_name = type(attr_value)
    if type_name == "Target":
        result.append(attr_value)
    elif type_name == "list":
        result.extend(attr_value)

def collect_targets_from_attrs(rule_attrs, attrs):
    result = []
    for attr_name in attrs:
        _collect_target_from_attr(rule_attrs, attr_name, result)
    return [target for target in result if is_valid_aspect_target(target)]



def do_starlark_string_expansion(ctx, name, strings, extra_targets = []):
    # first, expand all starlark predefined paths:
    #   location, locations, rootpath, rootpaths, execpath, execpaths
    strings = [ctx.expand_location(value, targets = extra_targets) for value in strings]

    # then expand any regular GNU make style variables
    strings = [expand_make_variables(name, value, ctx) for value in strings]
    return strings

def expand_make_variables(attr_name, expression, ctx, additional_subs = {}):
    """Substitutes make variables defined in $() syntax.

    Because ctx.expand_make_variables is deprecated, we need to be able to do the
    substitution without relying on it.
    Before the aspect is processed, the build system already detects most/all of
    the failure modes and the aspect does not get processed, but including them
    here helps with following the logic.

    Args:
      attr_name: The attribute name. Used for error reporting.
      expression: The expression to expand. It can contain references to "Make
        variables".
      ctx: The context containing default make variables to subtitute.
      additional_subs: Additional substitutions to make beyond the default make
        variables.

    Returns:
      Returns a string after expanding all references to "Make variables". The
      variables must have the following format: $(VAR_NAME). Also, $$VAR_NAME
      expands to $VAR_NAME.


    """
    if "$" not in expression:
        return expression

    current_offset = 0
    rv = ""
    substitutions = {}
    substitutions.update(ctx.var)

    # make variables from ctx.var can be overridden
    substitutions.update(additional_subs)

    # skylark does not support while. This is the maximum iteration count this
    # loop will need, but it will exit early if possible.
    for _n in range(0, len(expression)):
        if current_offset >= len(expression):
            break
        begin_dollars = expression.find("$", current_offset)
        if begin_dollars == -1:
            # append whatever is left in expression
            rv = rv + expression[current_offset:]
            current_offset = len(expression)
            continue
        if begin_dollars != current_offset:
            rv = rv + expression[current_offset:begin_dollars]

        # consume the entire run of $$$...
        end_dollars = begin_dollars + 1
        for _m in range(end_dollars, len(expression)):
            if expression[end_dollars] == "$":
                end_dollars = end_dollars + 1
            else:
                break
        if (end_dollars - begin_dollars) % 2 == 0:
            # even number of '$'
            rv = rv + "$" * ((end_dollars - begin_dollars) // 2)
            current_offset = end_dollars
            continue

        # odd number of '$'
        if end_dollars == len(expression) or expression[end_dollars] != "(":
            # odd number of '$' at the end of the string is invalid
            # odd number of '$' followed by non-( is invalid
            fail("expand_make_variables: unterminated $", attr_name)
        end_parens = expression.find(")", end_dollars)
        if end_parens == -1:
            # no end parens is invalid
            fail("expand_make_variables: unterminated variable reference", attr_name)

        # odd number of '$', but integer division will provide correct count
        rv = rv + "$" * ((end_dollars - begin_dollars) // 2)
        varname = expression[end_dollars + 1:end_parens]
        if not _is_valid_make_var(varname):
            # invalid make variable name
            fail("expand_make_variables: $(%s) invalid name" % varname, attr_name)
        if not varname in substitutions:
            # undefined make variable
            fail("expand_make_variables: $(%s) not defined" % varname, attr_name)
        rv = rv + substitutions[varname]
        current_offset = end_parens + 1
    return rv

def files_to_list(source):
    if not hasattr(source, "files"):
        return []
    return source.files.to_list()

def _is_valid_make_var(varname):
    """Check if the make variable name seems valid."""
    if len(varname) == 0:
        return False

    # According to gnu make, any chars not whitespace, ':', '#', '=' are valid.
    invalid_chars = ":#= \t\n\r"
    for n in range(0, len(invalid_chars)):
        if invalid_chars[n] in varname:
            return False
    return True



COMPILE_DEPS = [
    "deps",
    "jars",
    "exports",
    "associates",
    "proc_macro_deps",
    ${cppDeps}
]

PRIVATE_COMPILE_DEPS = [
    "_java_toolchain",
    "_jvm",
    "runtime_jdk",
]

RUNTIME_DEPS = [
    "runtime_deps",
]

ALL_DEPS = COMPILE_DEPS + PRIVATE_COMPILE_DEPS + RUNTIME_DEPS
