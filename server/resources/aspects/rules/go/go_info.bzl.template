load("@${rulesetName}//go:def.bzl", "go_context")
load("//aspects:utils/utils.bzl", "collect_targets_from_attrs", "create_struct", "file_location", "update_sync_output_groups")

def extract_go_info(target, ctx, output_groups, **kwargs):
    extracted_import_path = get_go_import_path(ctx)
    sdk_home_path = _extract_sdk(ctx)
    sources = []
    rule_kind = ctx.rule.kind
    if rule_kind in [
        "go_binary",
        "go_library",
        "go_test",
        "go_source",
        "go_appengine_binary",
        "go_appengine_library",
        "go_appengine_test",
    ]:
        sources = [f for src in getattr(ctx.rule.attr, "srcs", []) for f in src.files.to_list()]
    elif rule_kind == "go_wrap_cc":
        genfiles = target.files.to_list()
        go_genfiles = [f for f in genfiles if f.basename.endswith(".go")]
        if go_genfiles:
            sources = go_genfiles
    else:
        extracted_generated_sources = _extract_generated_go_sources(target, ctx)
        if extracted_generated_sources:
            sources = extracted_generated_sources

    library_labels = []
    if rule_kind in ("go_test", "go_library", "go_appengine_test"):
        if getattr(ctx.rule.attr, "library", None) != None:
            library_labels = [str(ctx.rule.attr.library.label)]
        elif getattr(ctx.rule.attr, "embed", None) != None:
            for library in ctx.rule.attr.embed:
                library_kind = library.bsp_info.kind
                if library_kind == "go_source" or library_kind == "go_proto_library":
                    sources += library.bsp_info.output_groups["bazel-sources-go-outputs"].to_list()
                else:
                    library_labels.append(str(library.label))

    result = create_struct(
        import_path = extracted_import_path,
        sdk_home_path = sdk_home_path,
        generated_sources = [file_location(f) for f in sources],
        generated_libraries = [],
        library_labels = library_labels,
    )

    update_sync_output_groups(output_groups, "bazel-sources-go", depset(sources))

    return dict(go_target_info = result), None

def _extract_sdk(ctx):
    go = go_context(ctx)
    if go == None:
        return None
    return file_location(go.sdk.go)

def _extract_generated_go_sources(target, ctx):
    """Returns a depset of go source files generated by this target."""
    if is_go_proto_library(target, ctx):
        return get_go_proto_library_generated_srcs(target)
    else:
        return None

def get_go_import_path(ctx):
    """Returns the import path for a go target."""
    import_path = getattr(ctx.rule.attr, "importpath", None)
    if import_path:
        return import_path
    prefix = None
    if hasattr(ctx.rule.attr, "_go_prefix"):
        prefix = ctx.rule.attr._go_prefix.go_prefix
    if not prefix:
        return None
    import_path = prefix
    if ctx.label.package:
        import_path += "/" + ctx.label.package
    if ctx.label.name != "go_default_library":
        import_path += "/" + ctx.label.name
    return import_path

def is_go_proto_library(target, _ctx):
    return hasattr(target[OutputGroupInfo], "go_generated_srcs")

def get_go_proto_library_generated_srcs(target):
    files = target[OutputGroupInfo].go_generated_srcs.to_list()
    return [f for f in files if f.basename.endswith(".go")]
