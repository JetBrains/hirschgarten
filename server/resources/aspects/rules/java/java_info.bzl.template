#if( $javaEnabled == "true" && $bazel8OrAbove == "true" && $rulesetName != "" )
load("@${rulesetName}//java/common:java_common.bzl", "java_common")
load("@${rulesetName}//java/common:java_info.bzl", "JavaInfo")
load("@${rulesetName}//java/common:java_plugin_info.bzl", "JavaPluginInfo")
load("@${rulesetName}//java:java_utils.bzl", java_utils = "utils")
#end

load("//aspects:utils/utils.bzl", "create_struct", "to_file_location", "BspAspectInfo")

def java_info_in_target(target):
    #if( $javaEnabled == "true" )
    return JavaInfo in target

    #else
    return False
    #end

def get_java_info(target):
    #if( $javaEnabled == "true" )
    if JavaInfo in target:
        return target[JavaInfo]
    else:
        return None

    #else
    return None
    #end

def _get_javacopts_from_context(ctx):
    javacopts = getattr(ctx.rule.attr, "javacopts", [])
    if javacopts == None: # "javacopts" might exist in ctx.rule.attr as None
        javacopts = []
    add_exports = ["--add-exports=" + export + "=ALL-UNNAMED" for export in getattr(ctx.rule.attr, "add_exports", [])]
    add_opens = ["--add-opens=" + open + "=ALL-UNNAMED" for open in getattr(ctx.rule.attr, "add_opens", [])]
    return javacopts + add_exports + add_opens

def get_javacopts(target, ctx):
    #if( $javaEnabled == "true" && $bazel8OrAbove == "true" && $rulesetName != "" )
    java_info = get_java_info(target)
    if java_info != None:
        compilation_info = getattr(java_info, "compilation_info", None)
        module_flags_info = getattr(java_info, "module_flags_info", None)
        if compilation_info != None and module_flags_info != None:
            javacopts = java_utils.tokenize_javacopts(ctx, compilation_info.javac_options)
            # javacopts here contain --add-export flags already (https://github.com/bazelbuild/rules_java/blob/faaab4062f81deefaeef76dd21b2a5212432f8e3/java/private/java_common_internal.bzl#L159)
            add_opens = ["--add-opens=" + open + "=ALL-UNNAMED" for open in module_flags_info.add_opens.to_list()]
            return javacopts + add_opens
    return _get_javacopts_from_context(ctx)

    #else
    return _get_javacopts_from_context(ctx)
    #end

def get_java_plugin_info(target):
    #if( $javaEnabled == "true" )
    if JavaPluginInfo in target:
        return target[JavaPluginInfo]
    else:
        return None

    #else
    return None
    #end

def java_info_reference():
    #if( $javaEnabled == "true" )
    return [JavaInfo]

    #else
    return []
    #end

def extract_java_toolchain(target, ctx, dep_targets, **kwargs):
    toolchain = None
    if java_common.JavaToolchainInfo != platform_common.ToolchainInfo and java_common.JavaToolchainInfo in target:
        toolchain = target[java_common.JavaToolchainInfo]

    toolchain_info = None
    if toolchain != None:
        java_home = to_file_location(toolchain.java_runtime.java_home, "", False, True) if hasattr(toolchain, "java_runtime") else None
        toolchain_info = create_struct(
            source_version = toolchain.source_version,
            target_version = toolchain.target_version,
            java_home = java_home,
        )
    else:
        for dep in dep_targets:
            if BspAspectInfo in dep and hasattr(dep[BspAspectInfo].bsp_info, "java_toolchain_info"):
                toolchain_info = dep[BspAspectInfo].bsp_info.java_toolchain_info
                break

    if toolchain_info != None:
        result = dict(java_toolchain_info = toolchain_info)
        return result, result
    else:
        return None, None

JAVA_RUNTIME_TOOLCHAIN_TYPE = "@bazel_tools//tools/jdk:runtime_toolchain_type"

def extract_java_runtime(target, ctx, dep_targets, **kwargs):
    runtime = None

    if JAVA_RUNTIME_TOOLCHAIN_TYPE in ctx.toolchains:
        toolchain = ctx.toolchains[JAVA_RUNTIME_TOOLCHAIN_TYPE]
        if toolchain:
            runtime = toolchain.java_runtime
    else:
        runtime_jdk = getattr(ctx.rule.attr, "runtime_jdk", None)
        if runtime_jdk and java_common.JavaRuntimeInfo in runtime_jdk:
            runtime = runtime_jdk[java_common.JavaRuntimeInfo]

    runtime_info = None
    if runtime != None:
        java_home = to_file_location(runtime.java_home, "", False, True) if hasattr(runtime, "java_home") else None
        runtime_info = create_struct(java_home = java_home)
    else:
        for dep in dep_targets:
            if BspAspectInfo in dep and hasattr(dep[BspAspectInfo].bsp_info, "java_runtime_info"):
                runtime_info = dep[BspAspectInfo].bsp_info.java_runtime_info
                break

    if runtime_info != None:
        result = dict(java_runtime_info = runtime_info)
        return result, result
    else:
        return None, None
