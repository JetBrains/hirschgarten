package org.jetbrains.bazel.testing

/**
 * Generates test location hints for use with gutter icons and "Go to test source" functionality.
 * The "location hint" term refers to an attribute name in `ServiceMessageBuilder`.
 *
 * The location hint format does not depend on the language or the test framework used
 * because we do not have access to such information while parsing test results.
 *
 * Avoid manual parsing of the location hints - use [parseLocationHint] to extract information instead.
 */
object BazelTestLocationHintProvider {
  /* Maintenance notes:
       When protocols and/or delimiters are changed,
         past test result history saved by IntelliJ will no longer be associated with the test it regards.
         However, there should be no other unwanted consequences.

       Location hints are used both for locating test in source files and for displaying test status gutter icons.
         For the gutter icons to work, the location hint must be possible to guess using only information from
         the file's PSI tree. For that reason, it is not allowed to introduce any additional information like test
         metadata into the location hints this class generates.
   */

  const val TEST_CASE_PROTOCOL = "bazel:test"
  const val TEST_SUITE_PROTOCOL = "bazel:suite"
  private const val PROTOCOL_DELIMITER = "://" // should never change
  private const val SUITE_DELIMITER = "&" // should be as uncommon as possible
  private const val FRAGMENT_DELIMITER = "%" // should be as uncommon as possible

  /** Generates a location hint for either a test suite or a test case (based on `isSuite` parameter) */
  fun testLocationHint(
    name: String,
    classname: String?,
    parentSuites: List<String>,
    isSuite: Boolean,
  ): String =
    when (isSuite) {
      true -> testSuiteLocationHint(name, classname, parentSuites)
      false -> testCaseLocationHint(name, classname, parentSuites)
    }

  /**
   * Generates a location hint for a test case.
   * If non-null `classname` is given, `parentSuites` is ignored - it serves as a fallback if `classname` is unknown
   */
  fun testCaseLocationHint(
    testName: String,
    classname: String? = null,
    parentSuites: List<String> = emptyList(),
  ): String {
    val classnameToUse = classname ?: parentSuites.joinToString(SUITE_DELIMITER)
    val cleanClassName = classnameToUse.removeMisleadingDelimiters()
    val cleanTestName = testName.removeSuffix("()")
    return "$TEST_CASE_PROTOCOL$PROTOCOL_DELIMITER$cleanClassName$FRAGMENT_DELIMITER$cleanTestName"
  }

  /**
   * Generates a location hint for a test suite.
   * If non-null `classname` is given, `parentSuites` is ignored - it serves as a fallback if `classname` is unknown
   */
  fun testSuiteLocationHint(
    suiteName: String,
    classname: String? = null,
    parentSuites: List<String> = emptyList(),
  ): String {
    val classnameToUse =
      when {
        classname != null -> classname
        parentSuites.isEmpty() -> suiteName
        else -> {
          val generatedClassname = parentSuites.joinToString(SUITE_DELIMITER, postfix = "$SUITE_DELIMITER$suiteName")
          generatedClassname
        }
      }
    val cleanClassName = classnameToUse.removeMisleadingDelimiters()
    return "$TEST_SUITE_PROTOCOL$PROTOCOL_DELIMITER$cleanClassName"
  }

  private fun String.removeMisleadingDelimiters(): String =
    replace(FRAGMENT_DELIMITER, SUITE_DELIMITER) // otherwise the delimiters might get misinterpreted

  /** Extracts information from a location hint generated by this class */
  fun parseLocationHint(locationHint: String): LocationHintData {
    val fragments = locationHint.substringAfter(PROTOCOL_DELIMITER).split(FRAGMENT_DELIMITER, limit = 2)
    val classNames =
      fragments.getOrNull(0)?.split(SUITE_DELIMITER)?.filter { it.isNotBlank() } ?: emptyList()
    val methodName = fragments.getOrNull(1) ?: ""
    return LocationHintData(classNames, methodName)
  }

  /**
   * The `classNameOrSuites` is:
   * - a single element with `classname` value from test XML (if it exists)
   * - a list of suite names, ordered from the top level downwards (otherwise)
   *
   * The `methodName` may be empty, especially in case of test suites
   */
  data class LocationHintData(val classNameOrSuites: List<String>, val methodName: String)
}
