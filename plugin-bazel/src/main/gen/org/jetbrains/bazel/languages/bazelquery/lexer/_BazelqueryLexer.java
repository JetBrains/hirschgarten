// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelquery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelqueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")

class _BazelqueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int EXPR_DQ = 4;
  public static final int EXPR_SQ = 6;
  public static final int WORD_DQ = 8;
  public static final int WORD_SQ = 10;
  public static final int FLAG = 12;
  public static final int VALUE = 14;
  public static final int PRE_VALUE = 16;
  public static final int VALUE_SQ = 18;
  public static final int VALUE_DQ = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\14\6\1\16\2\0\1\17\2\0"+
    "\1\20\33\6\1\21\1\6\1\22\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\35\1\52\1\53"+
    "\1\54\3\0\1\6\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\10\1\0\1\17\15\10\1\20\1\21\1\0"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\35\1\32\1\37"+
    "\2\40\1\4\4\0\6\10\1\41\13\10\1\25\1\42"+
    "\1\27\1\43\2\31\1\44\2\0\1\45\1\46\3\0"+
    "\11\10\1\47\2\10\1\50\5\10\1\51\1\52\11\31"+
    "\2\0\2\10\1\53\7\10\1\53\2\10\13\31\1\54"+
    "\1\55\7\10\1\13\1\10\13\31\1\10\1\15\6\10"+
    "\13\31\4\10\13\31\2\10\6\31\1\56\4\31\1\17"+
    "\1\10\7\31\1\0\6\31\1\10\10\31\1\44\5\31"+
    "\1\10\14\31\1\10\12\31\1\56\1\31\1\10\6\31"+
    "\1\56\3\31\1\10\7\31\1\10\6\31\1\10\53\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u01ef\0\u0249\0\u01ef"+
    "\0\u01ef\0\u0276\0\u02a3\0\u02d0\0\u01ef\0\u02fd\0\u01ef\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u032a\0\u0357\0\u01ef\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u01ef\0\u01ef\0\u0276\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u05cd\0\u01ef\0\u05fa\0\u0627\0\u0654\0\u01ef"+
    "\0\u0681\0\u01ef\0\u06ae\0\u01ef\0\u06db\0\u0708\0\u01ef\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u01ef\0\u0bc7\0\u01ef\0\u0bf4\0\u0c21\0\u01ef\0\u0708"+
    "\0\u0c4e\0\u01ef\0\u01ef\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u02fd"+
    "\0\u0e97\0\u0ec4\0\u02fd\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u01ef\0\u01ef\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u02fd"+
    "\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356"+
    "\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u01ef\0\u01ef\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u02fd\0\u1707"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f"+
    "\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u02fd\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2"+
    "\0\u20df\0\u210c\0\u02fd\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u0627\0\u2571\0\u259e\0\u25cb\0\u25f8"+
    "\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8"+
    "\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98"+
    "\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00"+
    "\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68"+
    "\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0"+
    "\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138"+
    "\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0"+
    "\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408"+
    "\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570"+
    "\0\u359d\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8"+
    "\0\u3705";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\3\15\1\16\1\17\1\20\1\21\6\14\1\20"+
    "\1\14\1\20\1\22\1\14\2\20\1\23\16\20\1\24"+
    "\10\20\1\0\3\25\2\0\1\26\1\0\1\27\1\30"+
    "\1\0\1\31\1\32\1\33\1\26\1\34\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\26\1\42\1\43\1\44"+
    "\2\26\1\45\1\26\1\46\1\47\5\26\1\50\1\51"+
    "\1\52\1\53\1\54\3\26\1\0\3\15\1\55\1\0"+
    "\1\26\1\56\1\27\1\30\1\0\1\31\1\32\1\33"+
    "\1\26\1\34\1\35\1\57\1\37\1\26\1\40\1\41"+
    "\1\26\1\42\1\43\1\44\2\26\1\45\1\26\1\46"+
    "\1\47\5\26\1\50\1\51\1\52\1\53\1\54\3\26"+
    "\1\0\3\15\1\60\1\0\1\26\1\61\1\27\1\30"+
    "\1\0\1\31\1\32\1\33\1\26\1\34\1\35\1\57"+
    "\1\37\1\26\1\40\1\41\1\26\1\42\1\43\1\44"+
    "\2\26\1\45\1\26\1\46\1\47\5\26\1\50\1\51"+
    "\1\52\1\53\1\54\3\26\4\62\1\63\50\62\7\64"+
    "\1\65\45\64\1\66\3\0\11\66\1\67\37\66\1\70"+
    "\3\71\1\72\1\70\1\73\1\74\6\70\1\73\1\70"+
    "\1\75\1\76\1\70\32\73\1\0\1\77\15\0\1\77"+
    "\35\0\7\70\1\100\51\70\1\101\50\70\56\0\3\15"+
    "\15\0\1\57\33\0\2\17\2\0\15\17\1\102\33\17"+
    "\2\0\1\15\1\103\75\0\1\104\100\0\1\105\12\0"+
    "\1\26\3\0\1\26\2\0\2\26\1\0\1\26\2\0"+
    "\32\26\6\0\1\35\3\0\2\35\1\0\2\35\1\0"+
    "\1\35\2\0\32\35\2\0\1\25\1\106\57\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\14\26"+
    "\1\107\7\26\1\110\5\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\25\26\1\111\4\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\5\26\1\112\24\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\27\26\1\113\2\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\11\26\1\114\20\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\16\26\1\115\13\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\11\26\1\116\20\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\1\26\1\117\3\26"+
    "\1\120\11\26\1\121\12\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\2\26\1\41\1\26"+
    "\1\42\25\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\1\26\1\122\3\26\1\123\3\26"+
    "\1\124\5\26\1\125\12\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\5\26\1\126\24\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\16\26\1\127\13\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\11\26\1\130\20\26"+
    "\2\131\2\0\1\132\2\131\1\0\45\131\2\133\3\0"+
    "\2\133\1\134\45\133\1\66\3\0\51\66\15\0\1\135"+
    "\1\136\1\137\3\0\32\136\1\0\3\71\15\0\1\140"+
    "\41\0\1\73\3\0\1\73\2\0\2\73\1\0\1\73"+
    "\2\0\32\73\6\0\1\75\3\0\2\75\1\0\2\75"+
    "\1\0\1\75\2\0\32\75\2\0\1\71\1\141\51\0"+
    "\2\100\3\0\2\100\1\142\45\100\2\101\2\0\1\143"+
    "\2\101\1\0\45\101\3\17\1\144\15\17\1\102\33\17"+
    "\2\0\1\15\126\0\1\145\30\0\1\146\26\0\1\25"+
    "\60\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\14\26\1\147\15\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\24\26\1\150\5\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\11\26\1\151\20\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\20\26\1\152\11\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\3\26\1\153\26\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\14\26\1\154\15\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\24\26\1\155\5\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\16\26\1\156\13\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\2\26\1\157\27\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\24\26\1\160\5\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\1\26\1\161\30\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\15\26\1\162\14\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\24\26\1\163\5\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\2\26\1\164\27\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\15\26\1\165\14\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\23\26\1\166\6\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\11\26\1\167\20\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\23\26\1\170\6\26"+
    "\2\131\2\0\1\171\2\131\1\0\45\131\2\133\3\0"+
    "\2\133\1\172\45\133\16\0\1\136\1\137\3\0\1\136"+
    "\1\173\2\136\1\174\1\175\1\136\1\176\4\136\1\177"+
    "\2\136\1\200\1\201\1\202\3\136\1\203\4\136\16\0"+
    "\1\136\1\137\3\0\32\136\2\0\1\71\54\0\1\17"+
    "\102\0\1\204\71\0\1\205\15\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\20\26\1\206\1\26"+
    "\1\207\7\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\22\26\1\210\7\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\14\26"+
    "\1\161\15\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\23\26\1\210\6\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\211\24\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\24\26\1\212\5\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\213\24\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\4\26\1\210\25\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\214\24\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\4\26\1\215\25\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\216\24\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\14\26\1\217\15\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\220\24\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\24\26\1\152\5\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\17\26"+
    "\1\221\12\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\11\26\1\222\20\26\16\0\1\136"+
    "\1\137\3\0\23\136\1\223\6\136\16\0\1\136\1\137"+
    "\3\0\5\136\1\224\24\136\16\0\1\136\1\137\3\0"+
    "\27\136\1\225\2\136\16\0\1\136\1\137\3\0\22\136"+
    "\1\226\7\136\16\0\1\136\1\137\3\0\17\136\1\227"+
    "\12\136\16\0\1\136\1\137\3\0\22\136\1\230\2\136"+
    "\1\231\4\136\16\0\1\136\1\137\3\0\1\136\1\232"+
    "\20\136\1\233\7\136\16\0\1\136\1\137\3\0\25\136"+
    "\1\234\4\136\16\0\1\136\1\137\3\0\16\136\1\235"+
    "\13\136\37\0\1\236\70\0\1\237\7\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\1\26\1\240"+
    "\30\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\4\26\1\42\25\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\20\26\1\241"+
    "\11\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\5\26\1\150\24\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\22\26\1\242"+
    "\7\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\14\26\1\152\15\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\6\26\1\243"+
    "\23\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\1\244\31\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\11\26\1\245\20\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\20\26\1\246\11\26\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\16\26\1\247\13\26"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\2\26\1\250\27\26\16\0\1\136\1\137\3\0"+
    "\20\136\1\251\11\136\16\0\1\136\1\137\3\0\14\136"+
    "\1\252\15\136\16\0\1\136\1\137\3\0\20\136\1\253"+
    "\11\136\16\0\1\136\1\137\3\0\1\136\1\254\30\136"+
    "\16\0\1\136\1\137\3\0\1\136\1\255\30\136\16\0"+
    "\1\136\1\137\3\0\4\136\1\256\25\136\16\0\1\136"+
    "\1\137\3\0\24\136\1\257\5\136\16\0\1\136\1\137"+
    "\3\0\3\136\1\260\26\136\16\0\1\136\1\137\3\0"+
    "\17\136\1\261\12\136\16\0\1\136\1\137\3\0\5\136"+
    "\1\262\24\136\16\0\1\136\1\137\3\0\11\136\1\263"+
    "\20\136\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\24\26\1\264\5\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\24\26\1\265"+
    "\5\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\23\26\1\266\6\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\11\26\1\267"+
    "\20\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\20\26\1\270\11\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\16\26\1\271"+
    "\13\26\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\1\26\1\272\30\26\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\14\26\1\273"+
    "\15\26\16\0\1\136\1\137\3\0\5\136\1\274\24\136"+
    "\16\0\1\136\1\137\3\0\5\136\1\275\24\136\16\0"+
    "\1\136\1\137\3\0\5\136\1\276\24\136\16\0\1\136"+
    "\1\137\3\0\20\136\1\277\11\136\16\0\1\136\1\137"+
    "\3\0\4\136\1\300\25\136\16\0\1\136\1\137\3\0"+
    "\5\136\1\301\24\136\16\0\1\136\1\137\3\0\20\136"+
    "\1\302\11\136\16\0\1\136\1\137\3\0\13\136\1\303"+
    "\16\136\16\0\1\136\1\137\3\0\24\136\1\304\5\136"+
    "\16\0\1\136\1\137\3\0\22\136\1\305\7\136\16\0"+
    "\1\136\1\137\3\0\26\136\1\306\3\136\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\10\26"+
    "\1\152\21\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\5\26\1\307\24\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\14\26"+
    "\1\310\15\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\13\26\1\311\16\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\7\26"+
    "\1\152\22\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\24\26\1\312\5\26\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\5\26"+
    "\1\210\24\26\16\0\1\136\1\137\3\0\3\136\1\313"+
    "\26\136\16\0\1\136\1\137\3\0\24\136\1\314\5\136"+
    "\16\0\1\136\1\137\3\0\22\136\1\315\7\136\16\0"+
    "\1\136\1\137\3\0\10\136\1\316\21\136\16\0\1\136"+
    "\1\137\3\0\11\136\1\317\20\136\16\0\1\136\1\137"+
    "\3\0\22\136\1\320\7\136\16\0\1\136\1\137\3\0"+
    "\25\136\1\321\4\136\16\0\1\136\1\137\3\0\1\136"+
    "\1\322\30\136\16\0\1\136\1\137\3\0\17\136\1\323"+
    "\12\136\16\0\1\136\1\137\3\0\30\136\1\324\1\136"+
    "\16\0\1\136\1\137\3\0\5\136\1\325\24\136\6\0"+
    "\1\26\3\0\1\26\2\0\2\26\1\0\1\26\2\0"+
    "\3\26\1\326\26\26\6\0\1\26\3\0\1\26\2\0"+
    "\2\26\1\0\1\26\2\0\5\26\1\152\24\26\6\0"+
    "\1\26\3\0\1\26\2\0\2\26\1\0\1\26\2\0"+
    "\7\26\1\327\22\26\6\0\1\26\3\0\1\26\2\0"+
    "\2\26\1\0\1\26\2\0\10\26\1\210\21\26\16\0"+
    "\1\136\1\137\3\0\24\136\1\330\5\136\16\0\1\136"+
    "\1\137\3\0\5\136\1\331\24\136\16\0\1\136\1\137"+
    "\3\0\11\136\1\332\20\136\16\0\1\333\1\137\3\0"+
    "\32\136\16\0\1\136\1\137\3\0\16\136\1\334\13\136"+
    "\16\0\1\136\1\137\3\0\1\335\31\136\16\0\1\136"+
    "\1\137\3\0\24\136\1\336\5\136\16\0\1\136\1\137"+
    "\3\0\7\136\1\337\22\136\16\0\1\340\1\137\3\0"+
    "\32\136\16\0\1\136\1\137\3\0\1\341\31\136\16\0"+
    "\1\136\1\137\3\0\22\136\1\342\7\136\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\24\26"+
    "\1\343\5\26\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\1\344\31\26\16\0\1\136\1\137"+
    "\3\0\1\345\31\136\16\0\1\136\1\137\3\0\4\136"+
    "\1\346\25\136\16\0\1\136\1\137\3\0\15\136\1\347"+
    "\14\136\16\0\1\136\1\137\3\0\3\136\1\350\12\136"+
    "\1\351\13\136\16\0\1\136\1\137\3\0\7\136\1\352"+
    "\22\136\16\0\1\136\1\137\3\0\17\136\1\353\12\136"+
    "\1\354\1\137\14\354\1\355\1\137\3\354\1\356\31\355"+
    "\16\0\1\136\1\137\3\0\5\136\1\357\24\136\16\0"+
    "\1\136\1\137\3\0\17\136\1\360\12\136\16\0\1\136"+
    "\1\137\3\0\6\136\1\361\23\136\16\0\1\136\1\137"+
    "\3\0\23\136\1\362\6\136\6\0\1\26\3\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\4\26\1\363\25\26"+
    "\16\0\1\136\1\137\3\0\4\136\1\364\25\136\16\0"+
    "\1\136\1\137\3\0\1\365\31\136\16\0\1\136\1\137"+
    "\3\0\5\136\1\366\24\136\16\0\1\136\1\137\3\0"+
    "\17\136\1\367\12\136\16\0\1\136\1\137\3\0\17\136"+
    "\1\370\12\136\16\0\1\136\1\137\3\0\1\371\31\136"+
    "\16\0\1\136\1\137\3\0\25\136\1\372\4\136\1\66"+
    "\3\0\11\66\1\0\40\66\3\0\11\66\1\0\1\373"+
    "\1\374\3\66\32\373\1\66\3\0\11\66\1\0\1\373"+
    "\1\374\3\66\6\373\1\375\23\373\16\0\1\136\1\137"+
    "\3\0\1\376\31\136\16\0\1\136\1\137\3\0\25\136"+
    "\1\377\4\136\16\0\1\136\1\137\3\0\11\136\1\u0100"+
    "\20\136\16\0\1\136\1\137\3\0\5\136\1\u0101\24\136"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\11\26\1\u0102\20\26\16\0\1\136\1\137\3\0"+
    "\5\136\1\u0103\24\136\16\0\1\136\1\137\3\0\20\136"+
    "\1\u0104\11\136\16\0\1\136\1\137\3\0\16\136\1\u0105"+
    "\13\136\16\0\1\136\1\137\3\0\16\136\1\u0106\13\136"+
    "\16\0\1\136\1\137\3\0\4\136\1\u0107\25\136\16\0"+
    "\1\136\1\137\3\0\20\136\1\u0108\11\136\16\0\1\136"+
    "\1\137\3\0\24\136\1\u0109\5\136\1\66\3\0\12\66"+
    "\1\373\1\374\3\66\32\373\1\66\3\0\12\66\1\373"+
    "\1\374\3\66\11\373\1\u010a\20\373\16\0\1\136\1\137"+
    "\3\0\20\136\1\u010b\11\136\16\0\1\136\1\137\3\0"+
    "\24\136\1\u010c\5\136\16\0\1\136\1\137\3\0\14\136"+
    "\1\u010d\15\136\16\0\1\136\1\137\3\0\1\u010e\31\136"+
    "\6\0\1\26\3\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\22\26\1\u010f\7\26\16\0\1\136\1\137\3\0"+
    "\20\136\1\u0110\11\136\16\0\1\136\1\137\3\0\1\136"+
    "\1\u0111\30\136\16\0\1\136\1\137\3\0\24\136\1\u0112"+
    "\5\136\16\0\1\136\1\137\3\0\4\136\1\u0113\25\136"+
    "\16\0\1\136\1\137\3\0\5\136\1\u0114\24\136\16\0"+
    "\1\136\1\137\3\0\10\136\1\u0115\21\136\16\0\1\136"+
    "\1\137\3\0\20\136\1\u0116\11\136\1\66\3\0\12\66"+
    "\1\373\1\374\3\66\14\373\1\u0117\15\373\16\0\1\136"+
    "\1\137\3\0\1\136\1\u0118\30\136\16\0\1\136\1\137"+
    "\3\0\20\136\1\u0119\11\136\16\0\1\136\1\137\3\0"+
    "\5\136\1\u011a\24\136\16\0\1\136\1\137\3\0\23\136"+
    "\1\u011b\6\136\6\0\1\26\3\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\5\26\1\u011c\24\26\16\0\1\136"+
    "\1\137\3\0\23\136\1\u011a\6\136\16\0\1\136\1\137"+
    "\3\0\3\136\1\u011d\26\136\16\0\1\136\1\137\3\0"+
    "\1\136\1\u011e\30\136\16\0\1\136\1\137\3\0\11\136"+
    "\1\u011f\20\136\16\0\1\136\1\137\3\0\1\u0120\31\136"+
    "\16\0\1\136\1\137\3\0\1\136\1\u0121\30\136\16\0"+
    "\1\136\1\137\3\0\25\136\1\u0122\4\136\1\66\3\0"+
    "\12\66\1\373\1\374\3\66\5\373\1\u0123\24\373\16\0"+
    "\1\136\1\137\3\0\24\136\1\u0124\5\136\16\0\1\136"+
    "\1\137\3\0\25\136\1\u0125\4\136\1\354\1\137\14\354"+
    "\1\355\1\137\3\354\32\355\16\0\1\136\1\137\3\0"+
    "\3\136\1\u0126\26\136\6\0\1\26\3\0\1\26\2\0"+
    "\2\26\1\0\1\26\2\0\3\26\1\u0127\26\26\16\0"+
    "\1\136\1\137\3\0\13\136\1\u0128\16\136\16\0\1\136"+
    "\1\137\3\0\14\136\1\u0129\15\136\16\0\1\136\1\137"+
    "\3\0\24\136\1\u012a\5\136\16\0\1\136\1\137\3\0"+
    "\14\136\1\u012b\15\136\16\0\1\136\1\137\3\0\23\136"+
    "\1\u012c\6\136\16\0\1\136\1\137\3\0\24\136\1\u011a"+
    "\5\136\1\66\1\137\2\354\12\66\1\373\1\374\3\66"+
    "\32\373\16\0\1\136\1\137\3\0\10\136\1\u011a\21\136"+
    "\16\0\1\136\1\137\3\0\24\136\1\u012d\5\136\16\0"+
    "\1\136\1\137\3\0\17\136\1\u012e\12\136\6\0\1\26"+
    "\3\0\1\26\2\0\2\26\1\0\1\26\2\0\24\26"+
    "\1\u012f\5\26\16\0\1\136\1\137\3\0\1\136\1\u0130"+
    "\30\136\16\0\1\136\1\137\3\0\1\u0131\31\136\16\0"+
    "\1\136\1\137\3\0\11\136\1\u0132\20\136\16\0\1\136"+
    "\1\137\3\0\11\136\1\u0133\20\136\16\0\1\136\1\137"+
    "\3\0\5\136\1\u0134\24\136\16\0\1\136\1\137\3\0"+
    "\1\u0135\31\136\16\0\1\136\1\137\3\0\20\136\1\u010d"+
    "\11\136\6\0\1\26\3\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\1\u0136\31\26\16\0\1\136\1\137\3\0"+
    "\7\136\1\u0137\22\136\16\0\1\136\1\137\3\0\22\136"+
    "\1\u0138\7\136\16\0\1\136\1\137\3\0\17\136\1\u0139"+
    "\12\136\16\0\1\136\1\137\3\0\15\136\1\u013a\14\136"+
    "\16\0\1\136\1\137\3\0\1\u013b\31\136\16\0\1\136"+
    "\1\137\3\0\22\136\1\u013c\7\136\6\0\1\26\3\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\22\26\1\207"+
    "\7\26\16\0\1\136\1\137\3\0\5\136\1\u0110\24\136"+
    "\16\0\1\136\1\137\3\0\5\136\1\u013d\24\136\16\0"+
    "\1\136\1\137\3\0\16\136\1\u013e\13\136\16\0\1\136"+
    "\1\137\3\0\11\136\1\u0122\20\136\16\0\1\136\1\137"+
    "\3\0\24\136\1\u013f\5\136\16\0\1\136\1\137\3\0"+
    "\25\136\1\u0140\4\136\16\0\1\136\1\137\3\0\20\136"+
    "\1\u0141\11\136\16\0\1\136\1\137\3\0\1\136\1\u0142"+
    "\30\136\16\0\1\136\1\137\3\0\10\136\1\u0143\21\136"+
    "\16\0\1\136\1\137\3\0\14\136\1\u0144\15\136\16\0"+
    "\1\136\1\137\3\0\17\136\1\u0145\12\136\16\0\1\136"+
    "\1\137\3\0\14\136\1\u0146\15\136\16\0\1\136\1\137"+
    "\3\0\22\136\1\u0147\7\136\16\0\1\136\1\137\3\0"+
    "\5\136\1\u0148\24\136\16\0\1\136\1\137\3\0\23\136"+
    "\1\u0149\6\136\16\0\1\136\1\137\3\0\1\u014a\31\136"+
    "\16\0\1\136\1\137\3\0\5\136\1\u014b\24\136\16\0"+
    "\1\136\1\137\3\0\1\u014c\31\136\16\0\1\136\1\137"+
    "\3\0\11\136\1\u014d\20\136\16\0\1\136\1\137\3\0"+
    "\5\136\1\u014e\24\136\16\0\1\136\1\137\3\0\1\136"+
    "\1\u014f\30\136\16\0\1\136\1\137\3\0\1\136\1\u0150"+
    "\30\136\16\0\1\136\1\137\3\0\24\136\1\u0151\5\136"+
    "\16\0\1\136\1\137\3\0\4\136\1\u0152\25\136\16\0"+
    "\1\136\1\137\3\0\4\136\1\u0110\25\136\16\0\1\136"+
    "\1\137\3\0\24\136\1\u0153\5\136\16\0\1\136\1\137"+
    "\3\0\17\136\1\u0154\12\136\16\0\1\136\1\137\3\0"+
    "\7\136\1\u0155\22\136\16\0\1\136\1\137\3\0\24\136"+
    "\1\u0156\5\136\16\0\1\136\1\137\3\0\22\136\1\u0157"+
    "\7\136\16\0\1\136\1\137\3\0\5\136\1\u0158\24\136"+
    "\16\0\1\136\1\137\3\0\22\136\1\u0110\7\136\16\0"+
    "\1\136\1\137\3\0\30\136\1\u0159\1\136\16\0\1\136"+
    "\1\137\3\0\23\136\1\u0114\6\136\16\0\1\136\1\137"+
    "\3\0\1\u015a\31\136\16\0\1\136\1\137\3\0\22\136"+
    "\1\u015b\7\136\16\0\1\136\1\137\3\0\5\136\1\u015c"+
    "\24\136\16\0\1\136\1\137\3\0\23\136\1\u015d\6\136"+
    "\16\0\1\136\1\137\3\0\17\136\1\u015e\12\136\16\0"+
    "\1\136\1\137\3\0\14\136\1\u015f\15\136\16\0\1\136"+
    "\1\137\3\0\26\136\1\u0160\3\136\16\0\1\136\1\137"+
    "\3\0\5\136\1\u0161\24\136\16\0\1\136\1\137\3\0"+
    "\4\136\1\324\25\136";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14130];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\1\1\6\11\1\1\1\0\1\11\15\1\2\11\1\0"+
    "\3\11\1\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\3\1\4\0\23\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\0\2\11\3\0\22\1\2\11"+
    "\11\1\2\0\30\1\2\11\114\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelqueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FLAG);  yypushback(1);
            }
          // fall through
          case 47: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 49: break;
          case 4:
            { return BazelqueryTokenTypes.COMMENT;
            }
          // fall through
          case 50: break;
          case 5:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 51: break;
          case 6:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 52: break;
          case 7:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 53: break;
          case 8:
            { return BazelqueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 54: break;
          case 9:
            { return BazelqueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 55: break;
          case 10:
            { return BazelqueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 56: break;
          case 11:
            { return BazelqueryTokenTypes.UNION;
            }
          // fall through
          case 57: break;
          case 12:
            { return BazelqueryTokenTypes.COMMA;
            }
          // fall through
          case 58: break;
          case 13:
            { return BazelqueryTokenTypes.EXCEPT;
            }
          // fall through
          case 59: break;
          case 14:
            { return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 60: break;
          case 15:
            { return BazelqueryTokenTypes.INTERSECT;
            }
          // fall through
          case 61: break;
          case 16:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 62: break;
          case 17:
            { yybegin(WORD_SQ); yypushback(1);
            }
          // fall through
          case 63: break;
          case 18:
            { yybegin(WORD_DQ); yypushback(1);
            }
          // fall through
          case 64: break;
          case 19:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 65: break;
          case 20:
            { yybegin(EXPR_SQ); yypushback(1);
            }
          // fall through
          case 66: break;
          case 21:
            { return BazelqueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 67: break;
          case 22:
            { yybegin(EXPR_DQ); yypushback(1);
            }
          // fall through
          case 68: break;
          case 23:
            { return BazelqueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 69: break;
          case 24:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 70: break;
          case 25:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 71: break;
          case 26:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 72: break;
          case 27:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 28:
            { yybegin(VALUE_DQ); yypushback(1);
            }
          // fall through
          case 74: break;
          case 29:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 75: break;
          case 30:
            { yybegin(VALUE_SQ); yypushback(1);
            }
          // fall through
          case 76: break;
          case 31:
            { yybegin(VALUE); return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 77: break;
          case 32:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 78: break;
          case 33:
            { return BazelqueryTokenTypes.IN;
            }
          // fall through
          case 79: break;
          case 34:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 80: break;
          case 35:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 81: break;
          case 36:
            { yybegin(PRE_VALUE); yypushback(1); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 82: break;
          case 37:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 83: break;
          case 38:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 84: break;
          case 39:
            { return BazelqueryTokenTypes.LET;
            }
          // fall through
          case 85: break;
          case 40:
            { return BazelqueryTokenTypes.SET;
            }
          // fall through
          case 86: break;
          case 41:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 87: break;
          case 42:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 88: break;
          case 43:
            { return BazelqueryTokenTypes.COMMAND;
            }
          // fall through
          case 89: break;
          case 44:
            { return BazelqueryTokenTypes.BAZEL;
            }
          // fall through
          case 90: break;
          case 45:
            { return BazelqueryTokenTypes.QUERY;
            }
          // fall through
          case 91: break;
          case 46:
            { yybegin(PRE_VALUE); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
