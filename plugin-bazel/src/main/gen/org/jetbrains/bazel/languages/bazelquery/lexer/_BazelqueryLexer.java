// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelquery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelqueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")

class _BazelqueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int EXPR_DQ = 4;
  public static final int EXPR_SQ = 6;
  public static final int WORD_DQ = 8;
  public static final int WORD_SQ = 10;
  public static final int FLAG = 12;
  public static final int VALUE = 14;
  public static final int FLAG_DQ = 16;
  public static final int VALUE_DQ = 18;
  public static final int FLAG_SQ = 20;
  public static final int VALUE_SQ = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\15\6\2\0\1\16\2\0\1\17"+
    "\33\6\1\20\1\6\1\21\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\6"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\6\1\50\1\51\1\52"+
    "\3\0\1\6\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\3\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\10\1\0\1\17\15\10\1\20\1\21\1\0\1\22"+
    "\1\23\1\24\1\25\1\4\3\0\1\10\1\0\6\10"+
    "\1\26\13\10\3\0\11\10\1\27\2\10\1\30\5\10"+
    "\2\0\2\10\1\31\7\10\1\31\2\10\1\32\1\33"+
    "\7\10\1\13\2\10\1\15\14\10\1\17\10\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u0102"+
    "\0\u012d\0\u0102\0\u0158\0\u0102\0\u0102\0\u0183\0\u01ae\0\u01d9"+
    "\0\u0204\0\u022f\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102"+
    "\0\u025a\0\u0285\0\u0102\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\u0102\0\u0102\0\u0183\0\u0102\0\u0102\0\u0102\0\u0102\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7"+
    "\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u022f\0\u0aeb\0\u0b16\0\u022f\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u022f\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0102\0\u0102\0\u0e72\0\u0e9d\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u022f\0\u0f9f\0\u0fca\0\u022f"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u022f\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\1\10\1\14\5\10\1\15"+
    "\2\10\1\16\3\10\1\17\15\10\1\20\10\10\1\0"+
    "\3\21\2\0\1\22\1\0\1\23\1\24\1\0\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\22\1\34"+
    "\1\35\1\22\1\36\1\37\1\40\2\22\1\41\1\42"+
    "\1\43\5\22\1\44\1\45\1\46\1\47\1\50\3\22"+
    "\1\0\3\11\1\51\1\0\1\22\1\52\1\23\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\53\1\33"+
    "\1\22\1\34\1\35\1\22\1\36\1\37\1\40\2\22"+
    "\1\41\1\42\1\43\5\22\1\44\1\45\1\46\1\47"+
    "\1\50\3\22\1\0\3\11\1\54\1\0\1\22\1\55"+
    "\1\23\1\24\1\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\53\1\33\1\22\1\34\1\35\1\22\1\36\1\37"+
    "\1\40\2\22\1\41\1\42\1\43\5\22\1\44\1\45"+
    "\1\46\1\47\1\50\3\22\4\0\1\56\55\0\1\57"+
    "\117\0\3\11\14\0\1\53\32\0\2\13\2\0\14\13"+
    "\1\60\32\13\2\0\1\11\1\61\72\0\1\62\75\0"+
    "\1\63\5\0\3\21\14\0\1\32\40\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\31\22\6\0"+
    "\1\22\3\0\1\22\2\0\1\22\1\0\1\64\2\0"+
    "\31\22\2\0\1\21\1\65\55\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\13\22\1\66\7\22"+
    "\1\67\5\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\24\22\1\70\4\22\6\0\1\22"+
    "\3\0\1\22\2\0\1\22\1\0\1\22\2\0\5\22"+
    "\1\71\23\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\26\22\1\72\2\22\6\0\1\22"+
    "\3\0\1\22\2\0\1\22\1\0\1\22\2\0\11\22"+
    "\1\73\17\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\15\22\1\74\13\22\6\0\1\22"+
    "\3\0\1\22\2\0\1\22\1\0\1\22\2\0\11\22"+
    "\1\75\17\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\1\22\1\76\3\22\1\77\10\22"+
    "\1\100\12\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\2\22\1\35\1\22\1\36\24\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\1\22\1\101\3\22\1\102\3\22\1\103\4\22"+
    "\1\104\12\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\5\22\1\105\23\22\6\0\1\22"+
    "\3\0\1\22\2\0\1\22\1\0\1\22\2\0\15\22"+
    "\1\106\13\22\6\0\1\22\3\0\1\22\2\0\1\22"+
    "\1\0\1\22\2\0\11\22\1\107\17\22\3\13\1\110"+
    "\14\13\1\60\32\13\2\0\1\11\122\0\1\111\27\0"+
    "\1\112\31\0\1\64\3\0\2\64\1\0\1\64\1\0"+
    "\1\64\2\0\31\64\2\0\1\21\56\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\13\22\1\113"+
    "\15\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\23\22\1\114\5\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\11\22\1\115"+
    "\17\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\17\22\1\116\11\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\3\22\1\117"+
    "\25\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\13\22\1\120\15\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\23\22\1\121"+
    "\5\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\15\22\1\122\13\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\2\22\1\123"+
    "\26\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\23\22\1\124\5\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\1\22\1\125"+
    "\27\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\14\22\1\126\14\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\23\22\1\127"+
    "\5\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\2\22\1\130\26\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\14\22\1\131"+
    "\14\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\22\22\1\132\6\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\11\22\1\133"+
    "\17\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\22\22\1\134\6\22\2\0\1\13\77\0"+
    "\1\135\66\0\1\136\15\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\2\0\17\22\1\137\1\22\1\140"+
    "\7\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\21\22\1\141\7\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\13\22\1\125"+
    "\15\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\22\22\1\141\6\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\142"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\23\22\1\143\5\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\144"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\4\22\1\141\24\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\145"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\4\22\1\146\24\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\147"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\13\22\1\150\15\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\151"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\23\22\1\116\5\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\16\22\1\152"+
    "\12\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\11\22\1\153\17\22\35\0\1\154\66\0"+
    "\1\155\7\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\1\22\1\156\27\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\4\22\1\36"+
    "\24\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\17\22\1\157\11\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\5\22\1\114"+
    "\23\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\21\22\1\160\7\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\13\22\1\116"+
    "\15\22\6\0\1\22\3\0\1\22\2\0\1\22\1\0"+
    "\1\22\2\0\6\22\1\161\22\22\6\0\1\22\3\0"+
    "\1\22\2\0\1\22\1\0\1\22\2\0\1\162\30\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\11\22\1\163\17\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\17\22\1\164\11\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\15\22\1\165\13\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\2\22\1\166\26\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\23\22\1\167\5\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\23\22\1\170\5\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\22\22\1\171\6\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\11\22\1\172\17\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\17\22\1\173\11\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\15\22\1\174\13\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\1\22\1\175\27\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\13\22\1\176\15\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\10\22\1\116\20\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\5\22\1\177\23\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\13\22\1\200\15\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\12\22\1\201\16\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\7\22\1\116\21\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\23\22\1\202\5\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\5\22\1\141\23\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\3\22\1\203\25\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\5\22\1\116\23\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\7\22\1\204\21\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\10\22\1\141\20\22\6\0\1\22\3\0\1\22"+
    "\2\0\1\22\1\0\1\22\2\0\23\22\1\205\5\22"+
    "\6\0\1\22\3\0\1\22\2\0\1\22\1\0\1\22"+
    "\2\0\1\206\30\22\6\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\2\0\4\22\1\207\24\22\6\0"+
    "\1\22\3\0\1\22\2\0\1\22\1\0\1\22\2\0"+
    "\11\22\1\210\17\22\6\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\2\0\21\22\1\211\7\22\6\0"+
    "\1\22\3\0\1\22\2\0\1\22\1\0\1\22\2\0"+
    "\5\22\1\212\23\22\6\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\2\0\3\22\1\213\25\22\6\0"+
    "\1\22\3\0\1\22\2\0\1\22\1\0\1\22\2\0"+
    "\23\22\1\214\5\22\6\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\2\0\1\215\30\22\6\0\1\22"+
    "\3\0\1\22\2\0\1\22\1\0\1\22\2\0\21\22"+
    "\1\140\7\22";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4945];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\1\11\1\1\1\11\1\1\2\11\5\1"+
    "\6\11\1\1\1\0\1\11\15\1\2\11\1\0\4\11"+
    "\1\1\3\0\1\1\1\0\22\1\3\0\22\1\2\0"+
    "\15\1\2\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelqueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 28: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 29: break;
          case 3:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 30: break;
          case 4:
            { return BazelqueryTokenTypes.COMMENT;
            }
          // fall through
          case 31: break;
          case 5:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 32: break;
          case 6:
            { /*yybegin(FLAG);*/ return BazelqueryTokenTypes.DOUBLE_HYPHEN;
            }
          // fall through
          case 33: break;
          case 7:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 34: break;
          case 8:
            { return BazelqueryTokenTypes.WORD;
            }
          // fall through
          case 35: break;
          case 9:
            { return BazelqueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 36: break;
          case 10:
            { return BazelqueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 37: break;
          case 11:
            { return BazelqueryTokenTypes.UNION;
            }
          // fall through
          case 38: break;
          case 12:
            { return BazelqueryTokenTypes.COMMA;
            }
          // fall through
          case 39: break;
          case 13:
            { return BazelqueryTokenTypes.EXCEPT;
            }
          // fall through
          case 40: break;
          case 14:
            { return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 41: break;
          case 15:
            { return BazelqueryTokenTypes.INTERSECT;
            }
          // fall through
          case 42: break;
          case 16:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 43: break;
          case 17:
            { yybegin(WORD_SQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 44: break;
          case 18:
            { yybegin(WORD_DQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 45: break;
          case 19:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 46: break;
          case 20:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 47: break;
          case 21:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 48: break;
          case 22:
            { return BazelqueryTokenTypes.IN;
            }
          // fall through
          case 49: break;
          case 23:
            { return BazelqueryTokenTypes.LET;
            }
          // fall through
          case 50: break;
          case 24:
            { return BazelqueryTokenTypes.SET;
            }
          // fall through
          case 51: break;
          case 25:
            { return BazelqueryTokenTypes.COMMAND;
            }
          // fall through
          case 52: break;
          case 26:
            { return BazelqueryTokenTypes.BAZEL;
            }
          // fall through
          case 53: break;
          case 27:
            { return BazelqueryTokenTypes.QUERY;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
