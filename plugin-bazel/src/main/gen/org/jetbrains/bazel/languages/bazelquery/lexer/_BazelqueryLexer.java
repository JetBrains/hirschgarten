// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelquery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelqueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")

class _BazelqueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int EXPR_DQ = 4;
  public static final int EXPR_SQ = 6;
  public static final int WORD_DQ = 8;
  public static final int WORD_SQ = 10;
  public static final int FLAG = 12;
  public static final int VALUE = 14;
  public static final int PRE_VALUE = 16;
  public static final int VALUE_SQ = 18;
  public static final int VALUE_DQ = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\6\12\16\1\17\2\0\1\20"+
    "\2\0\1\21\33\6\1\22\1\6\1\23\1\24\1\0"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\36\1\53"+
    "\1\54\1\55\3\0\1\6\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\11\1\7\1\21\15\11\1\22"+
    "\1\23\1\7\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\36\1\7"+
    "\1\40\2\41\1\0\1\4\4\0\6\11\1\42\15\11"+
    "\1\27\1\43\1\31\1\44\2\33\1\45\2\0\1\46"+
    "\1\47\3\0\11\11\1\50\4\11\1\51\5\11\1\52"+
    "\1\53\11\33\2\0\2\11\1\54\1\11\1\55\3\11"+
    "\1\56\6\11\1\57\3\11\13\33\1\60\1\61\11\11"+
    "\1\62\3\11\1\63\1\14\1\11\13\33\3\11\1\16"+
    "\1\64\1\11\1\65\6\11\13\33\11\11\1\66\13\33"+
    "\1\67\1\70\5\11\1\71\1\72\6\33\1\73\4\33"+
    "\1\11\1\21\1\74\2\11\15\33\1\75\2\11\7\33"+
    "\1\45\5\33\1\76\1\11\14\33\1\11\12\33\1\73"+
    "\1\33\1\11\6\33\1\73\3\33\1\11\7\33\1\11"+
    "\6\33\1\11\6\33\1\11\4\33\1\11\4\33\1\11"+
    "\4\33\1\11\4\33\1\77\25\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u01fa\0\u0256\0\u01fa"+
    "\0\u01fa\0\u0284\0\u02b2\0\u02e0\0\u01fa\0\u01fa\0\u030e\0\u01fa"+
    "\0\u01fa\0\u01fa\0\u01fa\0\u01fa\0\u033c\0\u01fa\0\u036a\0\u0398"+
    "\0\u01fa\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u01fa\0\u01fa"+
    "\0\u0284\0\u01fa\0\u01fa\0\u01fa\0\u061c\0\u01fa\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u01fa\0\u0702\0\u01fa\0\u0730\0\u075e\0\u01fa"+
    "\0\u078c\0\u07ba\0\u0284\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u01fa\0\u0c94\0\u01fa"+
    "\0\u0cc2\0\u0cf0\0\u01fa\0\u075e\0\u0d1e\0\u01fa\0\u01fa\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u030e\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u030e\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u01fa\0\u01fa"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u030e\0\u1368\0\u030e"+
    "\0\u1396\0\u13c4\0\u13f2\0\u030e\0\u1420\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u01fa\0\u01fa\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u030e\0\u1984\0\u19b2\0\u19e0"+
    "\0\u030e\0\u030e\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u030e\0\u030e\0\u1cc0\0\u030e\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba"+
    "\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a"+
    "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u030e"+
    "\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc"+
    "\0\u230a\0\u2338\0\u2366\0\u030e\0\u030e\0\u2394\0\u23c2\0\u23f0"+
    "\0\u241e\0\u244c\0\u030e\0\u030e\0\u247a\0\u24a8\0\u24d6\0\u2504"+
    "\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674"+
    "\0\u030e\0\u030e\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788"+
    "\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8"+
    "\0\u2926\0\u030e\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a"+
    "\0\u2a68\0\u2a96\0\u2ac4\0\u0678\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c"+
    "\0\u2baa\0\u030e\0\u2bd8\0\u2c06\0\u2c34\0\u2c62\0\u2c90\0\u2cbe"+
    "\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e"+
    "\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\u2f9e"+
    "\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\u30e0\0\u310e"+
    "\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4\0\u3222\0\u3250\0\u327e"+
    "\0\u32ac\0\u32da\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee"+
    "\0\u341c\0\u344a\0\u3478\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e"+
    "\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce"+
    "\0\u36fc\0\u372a\0\u3758\0\u3786\0\u37b4\0\u37e2\0\u3810\0\u383e"+
    "\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae"+
    "\0\u39dc\0\u030e\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2\0\u3af0"+
    "\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32\0\u3c60"+
    "\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u3da2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\3\15\1\16\1\17\1\20\1\21\6\14\2\20"+
    "\1\14\1\20\1\22\1\14\2\20\1\23\16\20\1\24"+
    "\10\20\1\25\3\26\2\25\1\27\1\25\1\30\1\31"+
    "\1\25\1\32\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\27\1\42\1\43\1\27\1\44\1\45"+
    "\1\46\2\27\1\47\1\27\1\50\1\51\5\27\1\52"+
    "\1\53\1\54\1\55\1\56\3\27\1\25\3\15\1\57"+
    "\1\25\1\27\1\60\1\30\1\31\1\25\1\32\1\33"+
    "\1\34\1\35\1\27\1\36\1\37\1\61\1\41\1\27"+
    "\1\42\1\43\1\27\1\44\1\45\1\46\2\27\1\47"+
    "\1\27\1\50\1\51\5\27\1\52\1\53\1\54\1\55"+
    "\1\56\3\27\1\25\3\15\1\62\1\25\1\27\1\63"+
    "\1\30\1\31\1\25\1\32\1\33\1\34\1\35\1\27"+
    "\1\36\1\37\1\61\1\41\1\27\1\42\1\43\1\27"+
    "\1\44\1\45\1\46\2\27\1\47\1\27\1\50\1\51"+
    "\5\27\1\52\1\53\1\54\1\55\1\56\3\27\4\64"+
    "\1\65\51\64\7\66\1\67\46\66\1\70\3\0\11\70"+
    "\1\71\40\70\1\25\3\72\1\73\1\25\1\74\1\75"+
    "\6\25\2\74\1\25\1\76\1\77\1\25\32\74\1\0"+
    "\1\100\16\0\1\100\35\0\7\25\1\101\52\25\1\102"+
    "\51\25\57\0\3\15\16\0\1\103\33\0\2\17\2\0"+
    "\16\17\1\104\33\17\2\0\1\15\1\105\77\0\1\106"+
    "\101\0\1\107\12\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\32\27\6\0\1\27\3\0\1\27"+
    "\2\0\1\27\1\35\1\27\1\0\1\27\2\0\32\27"+
    "\6\0\1\37\3\0\2\37\1\0\3\37\1\0\1\37"+
    "\2\0\32\37\2\0\1\26\1\110\60\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\14\27\1\111"+
    "\7\27\1\112\5\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\25\27\1\113\4\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\5\27\1\114\24\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\27\27\1\115\2\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\11\27\1\116\20\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\16\27\1\117\13\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\11\27\1\120\20\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\1\27\1\121\3\27\1\122"+
    "\11\27\1\123\12\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\2\27\1\124\1\27\1\125"+
    "\25\27\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\1\27\1\126\3\27\1\127\3\27\1\130"+
    "\5\27\1\131\12\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\5\27\1\132\24\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\16\27\1\133\13\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\11\27\1\134\20\27\2\135"+
    "\2\0\1\136\2\135\1\0\46\135\2\137\3\0\2\137"+
    "\1\140\46\137\1\70\3\0\52\70\15\0\1\141\1\0"+
    "\1\142\1\143\3\0\32\142\1\0\3\72\16\0\1\144"+
    "\41\0\1\74\3\0\1\74\2\0\3\74\1\0\1\74"+
    "\2\0\32\74\6\0\1\76\3\0\2\76\1\0\3\76"+
    "\1\0\1\76\2\0\32\76\2\0\1\72\1\145\52\0"+
    "\2\101\2\0\3\101\1\146\46\101\2\102\2\0\1\147"+
    "\51\102\3\17\1\150\16\17\1\104\33\17\2\0\1\15"+
    "\130\0\1\151\31\0\1\152\26\0\1\26\61\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\14\27"+
    "\1\153\15\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\24\27\1\154\5\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\11\27"+
    "\1\155\20\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\20\27\1\156\11\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\3\27"+
    "\1\157\26\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\14\27\1\160\15\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\24\27"+
    "\1\161\5\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\16\27\1\162\13\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\2\27"+
    "\1\163\27\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\24\27\1\164\5\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\1\27"+
    "\1\165\30\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\25\27\1\166\4\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\5\27"+
    "\1\167\24\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\15\27\1\170\14\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\24\27"+
    "\1\171\5\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\2\27\1\172\27\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\15\27"+
    "\1\173\14\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\23\27\1\174\6\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\11\27"+
    "\1\175\20\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\23\27\1\176\6\27\2\135\2\0"+
    "\1\177\2\135\1\0\46\135\2\137\3\0\2\137\1\200"+
    "\46\137\17\0\1\142\1\143\3\0\1\142\1\201\2\142"+
    "\1\202\1\203\1\142\1\204\4\142\1\205\2\142\1\206"+
    "\1\207\1\210\3\142\1\211\4\142\17\0\1\142\1\143"+
    "\3\0\32\142\2\0\1\72\55\0\1\17\104\0\1\212"+
    "\72\0\1\213\15\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\20\27\1\214\1\27\1\215\7\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\22\27\1\216\7\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\14\27\1\217\15\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\23\27\1\220\6\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\221\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\24\27\1\222\5\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\223\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\4\27\1\224\25\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\225\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\4\27\1\226\25\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\11\27\1\227\20\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\20\27\1\230\11\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\231\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\14\27\1\232\15\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\233\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\24\27\1\234\5\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\17\27\1\235\12\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\11\27\1\236\20\27\17\0\1\142\1\143\3\0"+
    "\23\142\1\237\6\142\17\0\1\142\1\143\3\0\5\142"+
    "\1\240\24\142\17\0\1\142\1\143\3\0\27\142\1\241"+
    "\2\142\17\0\1\142\1\143\3\0\22\142\1\242\7\142"+
    "\17\0\1\142\1\143\3\0\17\142\1\243\12\142\17\0"+
    "\1\142\1\143\3\0\22\142\1\244\2\142\1\245\4\142"+
    "\17\0\1\142\1\143\3\0\1\142\1\246\20\142\1\247"+
    "\7\142\17\0\1\142\1\143\3\0\25\142\1\250\4\142"+
    "\17\0\1\142\1\143\3\0\16\142\1\251\13\142\40\0"+
    "\1\252\71\0\1\253\7\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\1\27\1\254\30\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\4\27\1\255\25\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\4\27\1\256\25\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\20\27\1\257\11\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\5\27\1\260\24\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\22\27\1\261\7\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\14\27\1\262\15\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\6\27\1\263\23\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\14\27\1\264\15\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\23\27\1\265\6\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\1\266\31\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\11\27"+
    "\1\267\20\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\20\27\1\270\11\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\23\27"+
    "\1\271\6\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\16\27\1\272\13\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\2\27"+
    "\1\273\27\27\17\0\1\142\1\143\3\0\20\142\1\274"+
    "\11\142\17\0\1\142\1\143\3\0\14\142\1\275\15\142"+
    "\17\0\1\142\1\143\3\0\20\142\1\276\11\142\17\0"+
    "\1\142\1\143\3\0\1\142\1\277\30\142\17\0\1\142"+
    "\1\143\3\0\1\142\1\300\30\142\17\0\1\142\1\143"+
    "\3\0\4\142\1\301\25\142\17\0\1\142\1\143\3\0"+
    "\24\142\1\302\5\142\17\0\1\142\1\143\3\0\3\142"+
    "\1\303\26\142\17\0\1\142\1\143\3\0\17\142\1\304"+
    "\12\142\17\0\1\142\1\143\3\0\5\142\1\305\24\142"+
    "\17\0\1\142\1\143\3\0\11\142\1\306\20\142\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\24\27\1\307\5\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\5\27\1\310\24\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\6\27\1\311\23\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\24\27\1\312\5\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\22\27\1\313\7\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\23\27\1\314\6\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\23\27\1\315\6\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\11\27\1\316\20\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\4\27\1\317\25\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\20\27\1\320\11\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\16\27\1\321\13\27\6\0\1\27\3\0\1\27\2\0"+
    "\3\27\1\0\1\27\2\0\1\27\1\322\30\27\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\14\27\1\323\15\27\17\0\1\142\1\143\3\0\5\142"+
    "\1\324\24\142\17\0\1\142\1\143\3\0\5\142\1\325"+
    "\24\142\17\0\1\142\1\143\3\0\5\142\1\326\24\142"+
    "\17\0\1\142\1\143\3\0\20\142\1\327\11\142\17\0"+
    "\1\142\1\143\3\0\4\142\1\330\25\142\17\0\1\142"+
    "\1\143\3\0\5\142\1\331\24\142\17\0\1\142\1\143"+
    "\3\0\20\142\1\332\11\142\17\0\1\142\1\143\3\0"+
    "\13\142\1\333\16\142\17\0\1\142\1\143\3\0\24\142"+
    "\1\334\5\142\17\0\1\142\1\143\3\0\22\142\1\335"+
    "\7\142\17\0\1\142\1\143\3\0\26\142\1\336\3\142"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\10\27\1\337\21\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\20\27\1\340\11\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\11\27\1\341\20\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\342\24\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\14\27\1\343\15\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\6\27\1\344\23\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\13\27\1\345\16\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\7\27\1\346\22\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\24\27\1\347\5\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\5\27\1\350\24\27"+
    "\17\0\1\142\1\143\3\0\3\142\1\351\26\142\17\0"+
    "\1\142\1\143\3\0\24\142\1\352\5\142\17\0\1\142"+
    "\1\143\3\0\22\142\1\353\7\142\17\0\1\142\1\143"+
    "\3\0\10\142\1\354\21\142\17\0\1\142\1\143\3\0"+
    "\11\142\1\355\20\142\17\0\1\142\1\143\3\0\22\142"+
    "\1\356\7\142\17\0\1\142\1\143\3\0\25\142\1\357"+
    "\4\142\17\0\1\142\1\143\3\0\1\142\1\360\30\142"+
    "\17\0\1\142\1\143\3\0\17\142\1\361\12\142\17\0"+
    "\1\142\1\143\3\0\30\142\1\362\1\142\17\0\1\142"+
    "\1\143\3\0\5\142\1\363\24\142\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\23\27\1\364"+
    "\6\27\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\23\27\1\365\6\27\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\14\27\1\366"+
    "\15\27\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\3\27\1\367\26\27\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\5\27\1\370"+
    "\24\27\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\11\27\1\371\20\27\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\7\27\1\372"+
    "\22\27\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\23\27\1\373\6\27\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\10\27\1\374"+
    "\21\27\17\0\1\142\1\143\3\0\24\142\1\375\5\142"+
    "\17\0\1\142\1\143\3\0\5\142\1\376\24\142\17\0"+
    "\1\142\1\143\3\0\11\142\1\377\20\142\17\0\1\u0100"+
    "\1\143\3\0\32\142\17\0\1\142\1\143\3\0\16\142"+
    "\1\u0101\13\142\17\0\1\142\1\143\3\0\1\u0102\31\142"+
    "\17\0\1\142\1\143\3\0\24\142\1\u0103\5\142\17\0"+
    "\1\142\1\143\3\0\7\142\1\u0104\22\142\17\0\1\u0105"+
    "\1\143\3\0\32\142\17\0\1\142\1\143\3\0\1\u0106"+
    "\31\142\17\0\1\142\1\143\3\0\22\142\1\u0107\7\142"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\5\27\1\u0108\24\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\24\27\1\u0109\5\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\23\27\1\u010a\6\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\14\27\1\u010b\15\27"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\1\u010c\31\27\17\0\1\142\1\143\3\0\1\u010d"+
    "\31\142\17\0\1\142\1\143\3\0\4\142\1\u010e\25\142"+
    "\17\0\1\142\1\143\3\0\15\142\1\u010f\14\142\17\0"+
    "\1\142\1\143\3\0\3\142\1\u0110\12\142\1\u0111\13\142"+
    "\17\0\1\142\1\143\3\0\7\142\1\u0112\22\142\17\0"+
    "\1\142\1\143\3\0\17\142\1\u0113\12\142\1\70\1\143"+
    "\15\70\1\u0114\1\143\3\70\1\u0115\31\u0114\17\0\1\142"+
    "\1\143\3\0\5\142\1\u0116\24\142\17\0\1\142\1\143"+
    "\3\0\17\142\1\u0117\12\142\17\0\1\142\1\143\3\0"+
    "\6\142\1\u0118\23\142\17\0\1\142\1\143\3\0\23\142"+
    "\1\u0119\6\142\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\23\27\1\u011a\6\27\6\0\1\27"+
    "\3\0\1\27\2\0\3\27\1\0\1\27\2\0\5\27"+
    "\1\u011b\24\27\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\4\27\1\u011c\25\27\17\0\1\142"+
    "\1\143\3\0\4\142\1\u011d\25\142\17\0\1\142\1\143"+
    "\3\0\1\u011e\31\142\17\0\1\142\1\143\3\0\5\142"+
    "\1\u011f\24\142\17\0\1\142\1\143\3\0\17\142\1\u0120"+
    "\12\142\17\0\1\142\1\143\3\0\17\142\1\u0121\12\142"+
    "\17\0\1\142\1\143\3\0\1\u0122\31\142\17\0\1\142"+
    "\1\143\3\0\25\142\1\u0123\4\142\1\70\3\0\13\70"+
    "\1\u0114\1\u0124\3\70\32\u0114\1\70\3\0\13\70\1\u0114"+
    "\1\u0124\3\70\6\u0114\1\u0125\23\u0114\17\0\1\142\1\143"+
    "\3\0\1\u0126\31\142\17\0\1\142\1\143\3\0\25\142"+
    "\1\u0127\4\142\17\0\1\142\1\143\3\0\11\142\1\u0128"+
    "\20\142\17\0\1\142\1\143\3\0\5\142\1\u0129\24\142"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\23\27\1\u012a\6\27\6\0\1\27\3\0\1\27"+
    "\2\0\3\27\1\0\1\27\2\0\11\27\1\u012b\20\27"+
    "\17\0\1\142\1\143\3\0\5\142\1\u012c\24\142\17\0"+
    "\1\142\1\143\3\0\20\142\1\u012d\11\142\17\0\1\142"+
    "\1\143\3\0\16\142\1\u012e\13\142\17\0\1\142\1\143"+
    "\3\0\16\142\1\u012f\13\142\17\0\1\142\1\143\3\0"+
    "\4\142\1\u0130\25\142\17\0\1\142\1\143\3\0\20\142"+
    "\1\u0131\11\142\17\0\1\142\1\143\3\0\24\142\1\u0132"+
    "\5\142\1\70\3\0\13\70\1\u0114\1\u0124\3\70\11\u0114"+
    "\1\u0133\20\u0114\17\0\1\142\1\143\3\0\20\142\1\u0134"+
    "\11\142\17\0\1\142\1\143\3\0\24\142\1\u0135\5\142"+
    "\17\0\1\142\1\143\3\0\14\142\1\u0136\15\142\17\0"+
    "\1\142\1\143\3\0\1\u0137\31\142\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\22\27\1\u0138"+
    "\7\27\17\0\1\142\1\143\3\0\20\142\1\u0139\11\142"+
    "\17\0\1\142\1\143\3\0\1\142\1\u013a\30\142\17\0"+
    "\1\142\1\143\3\0\24\142\1\u013b\5\142\17\0\1\142"+
    "\1\143\3\0\4\142\1\u013c\25\142\17\0\1\142\1\143"+
    "\3\0\5\142\1\u013d\24\142\17\0\1\142\1\143\3\0"+
    "\10\142\1\u013e\21\142\17\0\1\142\1\143\3\0\20\142"+
    "\1\u013f\11\142\1\70\3\0\13\70\1\u0114\1\u0124\3\70"+
    "\14\u0114\1\u0140\15\u0114\17\0\1\142\1\143\3\0\1\142"+
    "\1\u0141\30\142\17\0\1\142\1\143\3\0\20\142\1\u0142"+
    "\11\142\17\0\1\142\1\143\3\0\5\142\1\u0143\24\142"+
    "\17\0\1\142\1\143\3\0\23\142\1\u0144\6\142\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\5\27\1\u0145\24\27\17\0\1\142\1\143\3\0\23\142"+
    "\1\u0143\6\142\17\0\1\142\1\143\3\0\3\142\1\u0146"+
    "\26\142\17\0\1\142\1\143\3\0\1\142\1\u0147\30\142"+
    "\17\0\1\142\1\143\3\0\11\142\1\u0148\20\142\17\0"+
    "\1\142\1\143\3\0\1\u0149\31\142\17\0\1\142\1\143"+
    "\3\0\1\142\1\u014a\30\142\17\0\1\142\1\143\3\0"+
    "\25\142\1\u014b\4\142\1\70\3\0\13\70\1\u0114\1\u0124"+
    "\3\70\5\u0114\1\u014c\24\u0114\17\0\1\142\1\143\3\0"+
    "\24\142\1\u014d\5\142\17\0\1\142\1\143\3\0\25\142"+
    "\1\u014e\4\142\1\70\1\143\15\70\1\u0114\1\143\3\70"+
    "\32\u0114\17\0\1\142\1\143\3\0\3\142\1\u014f\26\142"+
    "\6\0\1\27\3\0\1\27\2\0\3\27\1\0\1\27"+
    "\2\0\3\27\1\u0150\26\27\17\0\1\142\1\143\3\0"+
    "\13\142\1\u0151\16\142\17\0\1\142\1\143\3\0\14\142"+
    "\1\u0152\15\142\17\0\1\142\1\143\3\0\24\142\1\u0153"+
    "\5\142\17\0\1\142\1\143\3\0\14\142\1\u0154\15\142"+
    "\17\0\1\142\1\143\3\0\23\142\1\u0155\6\142\17\0"+
    "\1\142\1\143\3\0\24\142\1\u0143\5\142\1\70\1\143"+
    "\15\70\1\u0114\1\u0124\3\70\32\u0114\17\0\1\142\1\143"+
    "\3\0\10\142\1\u0143\21\142\17\0\1\142\1\143\3\0"+
    "\24\142\1\u0156\5\142\17\0\1\142\1\143\3\0\17\142"+
    "\1\u0157\12\142\6\0\1\27\3\0\1\27\2\0\3\27"+
    "\1\0\1\27\2\0\24\27\1\u0158\5\27\17\0\1\142"+
    "\1\143\3\0\1\142\1\u0159\30\142\17\0\1\142\1\143"+
    "\3\0\1\u015a\31\142\17\0\1\142\1\143\3\0\11\142"+
    "\1\u015b\20\142\17\0\1\142\1\143\3\0\11\142\1\u015c"+
    "\20\142\17\0\1\142\1\143\3\0\5\142\1\u015d\24\142"+
    "\17\0\1\142\1\143\3\0\1\u015e\31\142\17\0\1\142"+
    "\1\143\3\0\20\142\1\u0136\11\142\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\1\u015f\31\27"+
    "\17\0\1\142\1\143\3\0\7\142\1\u0160\22\142\17\0"+
    "\1\142\1\143\3\0\22\142\1\u0161\7\142\17\0\1\142"+
    "\1\143\3\0\17\142\1\u0162\12\142\17\0\1\142\1\143"+
    "\3\0\15\142\1\u0163\14\142\17\0\1\142\1\143\3\0"+
    "\1\u0164\31\142\17\0\1\142\1\143\3\0\22\142\1\u0165"+
    "\7\142\6\0\1\27\3\0\1\27\2\0\3\27\1\0"+
    "\1\27\2\0\22\27\1\u0166\7\27\17\0\1\142\1\143"+
    "\3\0\5\142\1\u0139\24\142\17\0\1\142\1\143\3\0"+
    "\5\142\1\u0167\24\142\17\0\1\142\1\143\3\0\16\142"+
    "\1\u0168\13\142\17\0\1\142\1\143\3\0\11\142\1\u014b"+
    "\20\142\17\0\1\142\1\143\3\0\24\142\1\u0169\5\142"+
    "\17\0\1\142\1\143\3\0\25\142\1\u016a\4\142\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\4\27\1\u016b\25\27\17\0\1\142\1\143\3\0\20\142"+
    "\1\u016c\11\142\17\0\1\142\1\143\3\0\1\142\1\u016d"+
    "\30\142\17\0\1\142\1\143\3\0\10\142\1\u016e\21\142"+
    "\17\0\1\142\1\143\3\0\14\142\1\u016f\15\142\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\5\27\1\u0170\24\27\17\0\1\142\1\143\3\0\17\142"+
    "\1\u0171\12\142\17\0\1\142\1\143\3\0\14\142\1\u0172"+
    "\15\142\17\0\1\142\1\143\3\0\22\142\1\u0173\7\142"+
    "\17\0\1\142\1\143\3\0\5\142\1\u0174\24\142\6\0"+
    "\1\27\3\0\1\27\2\0\3\27\1\0\1\27\2\0"+
    "\20\27\1\u0175\11\27\17\0\1\142\1\143\3\0\23\142"+
    "\1\u0176\6\142\17\0\1\142\1\143\3\0\1\u0177\31\142"+
    "\17\0\1\142\1\143\3\0\5\142\1\u0178\24\142\17\0"+
    "\1\142\1\143\3\0\1\u0179\31\142\6\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\0\1\27\2\0\23\27\1\u017a"+
    "\6\27\17\0\1\142\1\143\3\0\11\142\1\u017b\20\142"+
    "\17\0\1\142\1\143\3\0\5\142\1\u017c\24\142\17\0"+
    "\1\142\1\143\3\0\1\142\1\u017d\30\142\17\0\1\142"+
    "\1\143\3\0\1\142\1\u017e\30\142\17\0\1\142\1\143"+
    "\3\0\24\142\1\u017f\5\142\17\0\1\142\1\143\3\0"+
    "\4\142\1\u0180\25\142\17\0\1\142\1\143\3\0\4\142"+
    "\1\u0139\25\142\17\0\1\142\1\143\3\0\24\142\1\u0181"+
    "\5\142\17\0\1\142\1\143\3\0\17\142\1\u0182\12\142"+
    "\17\0\1\142\1\143\3\0\7\142\1\u0183\22\142\17\0"+
    "\1\142\1\143\3\0\24\142\1\u0184\5\142\17\0\1\142"+
    "\1\143\3\0\22\142\1\u0185\7\142\17\0\1\142\1\143"+
    "\3\0\5\142\1\u0186\24\142\17\0\1\142\1\143\3\0"+
    "\22\142\1\u0139\7\142\17\0\1\142\1\143\3\0\30\142"+
    "\1\u0187\1\142\17\0\1\142\1\143\3\0\23\142\1\u013d"+
    "\6\142\17\0\1\142\1\143\3\0\1\u0188\31\142\17\0"+
    "\1\142\1\143\3\0\22\142\1\u0189\7\142\17\0\1\142"+
    "\1\143\3\0\5\142\1\u018a\24\142\17\0\1\142\1\143"+
    "\3\0\23\142\1\u018b\6\142\17\0\1\142\1\143\3\0"+
    "\17\142\1\u018c\12\142\17\0\1\142\1\143\3\0\14\142"+
    "\1\u018d\15\142\17\0\1\142\1\143\3\0\26\142\1\u018e"+
    "\3\142\17\0\1\142\1\143\3\0\5\142\1\u018f\24\142"+
    "\17\0\1\142\1\143\3\0\4\142\1\362\25\142";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15824];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\1\1\2\11\3\1\2\11"+
    "\1\1\5\11\1\1\1\11\2\1\1\11\15\1\2\11"+
    "\1\1\3\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\1\1\4\0\25\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\0\2\11\3\0\24\1"+
    "\2\11\11\1\2\0\36\1\2\11\344\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelqueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FLAG);  yypushback(1);
            }
          // fall through
          case 64: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 65: break;
          case 3:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 66: break;
          case 4:
            { return BazelqueryTokenTypes.COMMENT;
            }
          // fall through
          case 67: break;
          case 5:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 68: break;
          case 6:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 69: break;
          case 7:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 70: break;
          case 8:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 9:
            { return BazelqueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 72: break;
          case 10:
            { return BazelqueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 73: break;
          case 11:
            { return BazelqueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 74: break;
          case 12:
            { return BazelqueryTokenTypes.UNION;
            }
          // fall through
          case 75: break;
          case 13:
            { return BazelqueryTokenTypes.COMMA;
            }
          // fall through
          case 76: break;
          case 14:
            { return BazelqueryTokenTypes.EXCEPT;
            }
          // fall through
          case 77: break;
          case 15:
            { return BazelqueryTokenTypes.INTEGER;
            }
          // fall through
          case 78: break;
          case 16:
            { return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 79: break;
          case 17:
            { return BazelqueryTokenTypes.INTERSECT;
            }
          // fall through
          case 80: break;
          case 18:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 81: break;
          case 19:
            { yybegin(WORD_SQ); yypushback(1);
            }
          // fall through
          case 82: break;
          case 20:
            { yybegin(WORD_DQ); yypushback(1);
            }
          // fall through
          case 83: break;
          case 21:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 84: break;
          case 22:
            { yybegin(EXPR_SQ); yypushback(1);
            }
          // fall through
          case 85: break;
          case 23:
            { return BazelqueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 86: break;
          case 24:
            { yybegin(EXPR_DQ); yypushback(1);
            }
          // fall through
          case 87: break;
          case 25:
            { return BazelqueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 88: break;
          case 26:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 89: break;
          case 27:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 90: break;
          case 28:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 29:
            { yybegin(VALUE_DQ); yypushback(1);
            }
          // fall through
          case 92: break;
          case 30:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 93: break;
          case 31:
            { yybegin(VALUE_SQ); yypushback(1);
            }
          // fall through
          case 94: break;
          case 32:
            { yybegin(VALUE); return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 95: break;
          case 33:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 96: break;
          case 34:
            { return BazelqueryTokenTypes.IN;
            }
          // fall through
          case 97: break;
          case 35:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 98: break;
          case 36:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 99: break;
          case 37:
            { yybegin(PRE_VALUE); yypushback(1); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 100: break;
          case 38:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 101: break;
          case 39:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 102: break;
          case 40:
            { return BazelqueryTokenTypes.LET;
            }
          // fall through
          case 103: break;
          case 41:
            { return BazelqueryTokenTypes.SET;
            }
          // fall through
          case 104: break;
          case 42:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 105: break;
          case 43:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 106: break;
          case 44:
            { return BazelqueryTokenTypes.ATTR;
            }
          // fall through
          case 107: break;
          case 45:
            { return BazelqueryTokenTypes.DEPS;
            }
          // fall through
          case 108: break;
          case 46:
            { return BazelqueryTokenTypes.KIND;
            }
          // fall through
          case 109: break;
          case 47:
            { return BazelqueryTokenTypes.SOME;
            }
          // fall through
          case 110: break;
          case 48:
            { return BazelqueryTokenTypes.BAZEL;
            }
          // fall through
          case 111: break;
          case 49:
            { return BazelqueryTokenTypes.QUERY;
            }
          // fall through
          case 112: break;
          case 50:
            { return BazelqueryTokenTypes.RDEPS;
            }
          // fall through
          case 113: break;
          case 51:
            { return BazelqueryTokenTypes.TESTS;
            }
          // fall through
          case 114: break;
          case 52:
            { return BazelqueryTokenTypes.FILTER;
            }
          // fall through
          case 115: break;
          case 53:
            { return BazelqueryTokenTypes.LABELS;
            }
          // fall through
          case 116: break;
          case 54:
            { return BazelqueryTokenTypes.VISIBLE;
            }
          // fall through
          case 117: break;
          case 55:
            { return BazelqueryTokenTypes.ALLPATHS;
            }
          // fall through
          case 118: break;
          case 56:
            { return BazelqueryTokenTypes.ALLRDEPS;
            }
          // fall through
          case 119: break;
          case 57:
            { return BazelqueryTokenTypes.SIBLINGS;
            }
          // fall through
          case 120: break;
          case 58:
            { return BazelqueryTokenTypes.SOMEPATH;
            }
          // fall through
          case 121: break;
          case 59:
            { yybegin(PRE_VALUE); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 122: break;
          case 60:
            { return BazelqueryTokenTypes.LOADFILES;
            }
          // fall through
          case 123: break;
          case 61:
            { return BazelqueryTokenTypes.BUILDFILES;
            }
          // fall through
          case 124: break;
          case 62:
            { return BazelqueryTokenTypes.RBUILDFILES;
            }
          // fall through
          case 125: break;
          case 63:
            { return BazelqueryTokenTypes.SAME_PKG_DIRECT_RDEPS;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
