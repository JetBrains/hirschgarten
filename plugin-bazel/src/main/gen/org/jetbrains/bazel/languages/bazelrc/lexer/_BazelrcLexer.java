// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelrc.flex

package org.jetbrains.bazel.languages.bazelrc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelrc.elements.BazelrcTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")
class _BazelrcLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  public static final int CMD = 2;
  public static final int CONFIG = 4;
  public static final int CMD_DQ = 6;
  public static final int CONFIG_DQ = 8;
  public static final int CMD_SQ = 10;
  public static final int CONFIG_SQ = 12;
  public static final int FLAGS = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in
   * the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non
   * negative integer
   */
  private static final int ZZ_LEXSTATE[] = {0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7};

  /** Top-level table for translating characters to character classes */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\u10ff\u0100";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Second-level tables for translating characters to character classes */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
      "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0" + "\1\4\1\5\3\0\1\6\22\0\1\7\41\0\1\10" + "\u01a3\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"
          + "\1\10\1\11\1\4\1\12\1\6\1\13\1\12\1\4"
          + "\1\14\1\15\1\4\2\16\1\4\1\17\1\20\1\4"
          + "\2\16\1\21\1\2\4\21\6\0\2\21\1\22\3\21"
          + "\1\0\1\21\1\0\1\21\3\0";

  private static int[] zzUnpackAction() {
    int[] result = new int[59];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates a state to a row index in the transition table */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\11\0\22\0\33\0\44\0\55\0\66\0\77"
          + "\0\110\0\121\0\132\0\143\0\154\0\165\0\110\0\110"
          + "\0\110\0\176\0\207\0\110\0\165\0\220\0\231\0\110"
          + "\0\110\0\242\0\253\0\264\0\275\0\110\0\110\0\306"
          + "\0\317\0\330\0\341\0\352\0\363\0\374\0\u0105\0\u010e"
          + "\0\u0117\0\u0120\0\u0129\0\u0132\0\u013b\0\u0144\0\u014d\0\u0156"
          + "\0\u015f\0\u0168\0\u0171\0\u017a\0\u0183\0\u018c\0\u0195\0\u019e"
          + "\0\u01a7\0\u01b0\0\u01b9";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[59];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** The transition table of the DFA */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\11\3\12\1\11\1\13\3\11\1\14\1\15\2\16"
          + "\1\17\1\14\1\20\1\21\1\22\1\23\1\24\2\25"
          + "\4\23\1\26\2\27\2\25\1\30\2\27\1\31\1\32"
          + "\2\33\2\25\1\30\2\33\1\24\1\34\2\35\2\25"
          + "\2\35\1\36\1\37\1\40\2\41\2\25\2\41\1\36"
          + "\1\24\1\42\1\43\1\44\2\25\1\45\1\46\1\47"
          + "\1\43\1\50\12\0\3\12\5\0\2\13\2\0\5\13"
          + "\1\14\4\0\1\14\2\0\1\22\1\0\1\15\10\0"
          + "\3\25\5\0\1\14\1\0\1\14\1\51\1\0\1\14"
          + "\2\0\1\22\1\23\3\0\4\23\1\26\1\23\1\0"
          + "\1\23\1\52\4\23\1\26\2\27\3\0\2\27\1\0"
          + "\1\32\3\27\1\53\3\27\1\0\1\32\2\33\3\0"
          + "\2\33\1\0\1\34\3\33\1\54\3\33\1\0\1\34"
          + "\2\35\2\0\2\35\2\0\1\40\3\35\1\55\3\35"
          + "\1\0\1\40\2\41\2\0\2\41\2\0\1\42\3\41"
          + "\1\56\3\41\1\0\1\42\1\43\3\0\4\43\1\50"
          + "\1\0\1\44\2\25\5\0\1\45\1\57\2\0\1\43"
          + "\3\45\1\60\1\46\1\61\2\0\4\46\1\62\1\47"
          + "\1\63\2\0\2\47\1\43\1\47\1\64\1\43\1\0"
          + "\1\43\1\65\4\43\1\50\2\0\1\14\10\0\1\23"
          + "\10\0\1\27\10\0\1\33\10\0\1\35\10\0\1\41"
          + "\6\0\2\57\3\0\3\57\1\66\1\45\1\57\1\45"
          + "\1\67\4\45\1\60\2\61\2\0\5\61\1\46\1\61"
          + "\1\43\1\65\4\46\1\62\2\63\2\0\2\63\1\0"
          + "\1\63\1\70\1\47\1\63\1\47\1\71\4\47\1\64"
          + "\2\0\1\43\6\0\3\57\1\72\4\57\1\66\2\0"
          + "\1\45\6\0\3\63\1\73\4\63\1\70\2\0\1\47"
          + "\10\0\1\57\10\0\1\63\6\0";

  private static int[] zzUnpacktrans() {
    int[] result = new int[450];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState} */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\10\0\1\11\5\1\3\11\2\1\1\11\3\1\2\11" + "\4\1\2\11\11\1\6\0\6\1\1\0\1\1\1\0" + "\1\1\3\0";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[59];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  _BazelrcLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /** Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /** Translates raw input code points to DFA table row */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input
        ? ZZ_CMAP_BLOCKS[offset]
        : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false}, iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /** Returns the current lexical state. */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /** Returns the text matched by the current regular expression. */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }

  /**
   * Returns the character at position {@code pos} from the matched text.
   *
   * <p>It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }

  /** Returns the length of the matched text region. */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
   * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
   * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
              yybegin(CMD);
              yypushback(1);
            }
            // fall through
          case 19:
            break;
          case 2:
            {
              return TokenType.WHITE_SPACE;
            }
            // fall through
          case 20:
            break;
          case 3:
            {
              return BazelrcTokenTypes.COMMENT;
            }
            // fall through
          case 21:
            break;
          case 4:
            {
              return BazelrcTokenTypes.COMMAND;
            }
            // fall through
          case 22:
            break;
          case 5:
            {
              yybegin(FLAGS);
              return TokenType.WHITE_SPACE;
            }
            // fall through
          case 23:
            break;
          case 6:
            {
              yybegin(FLAGS);
              yypushback(1);
            }
            // fall through
          case 24:
            break;
          case 7:
            {
              yybegin(CMD_DQ);
              return BazelrcTokenTypes.DOUBLE_QUOTE;
            }
            // fall through
          case 25:
            break;
          case 8:
            {
              yybegin(CMD_SQ);
              return BazelrcTokenTypes.SINGLE_QUOTE;
            }
            // fall through
          case 26:
            break;
          case 9:
            {
              yybegin(CONFIG);
              return BazelrcTokenTypes.COLON;
            }
            // fall through
          case 27:
            break;
          case 10:
            {
              yybegin(FLAGS);
              return BazelrcTokenTypes.CONFIG;
            }
            // fall through
          case 28:
            break;
          case 11:
            {
              yybegin(YYINITIAL);
              return TokenType.WHITE_SPACE;
            }
            // fall through
          case 29:
            break;
          case 12:
            {
              yybegin(FLAGS);
              return BazelrcTokenTypes.DOUBLE_QUOTE;
            }
            // fall through
          case 30:
            break;
          case 13:
            {
              yybegin(CONFIG_DQ);
              return BazelrcTokenTypes.COLON;
            }
            // fall through
          case 31:
            break;
          case 14:
            {
              return BazelrcTokenTypes.CONFIG;
            }
            // fall through
          case 32:
            break;
          case 15:
            {
              yybegin(FLAGS);
              return BazelrcTokenTypes.SINGLE_QUOTE;
            }
            // fall through
          case 33:
            break;
          case 16:
            {
              yybegin(CONFIG_SQ);
              return BazelrcTokenTypes.COLON;
            }
            // fall through
          case 34:
            break;
          case 17:
            {
              return BazelrcTokenTypes.FLAG;
            }
            // fall through
          case 35:
            break;
          case 18:
            {
              yybegin(YYINITIAL);
              return BazelrcTokenTypes.COMMENT;
            }
            // fall through
          case 36:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
}
