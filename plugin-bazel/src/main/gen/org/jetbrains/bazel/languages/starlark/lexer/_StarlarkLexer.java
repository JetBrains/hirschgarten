// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Starlark.flex

package org.jetbrains.bazel.languages.starlark.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.starlark.elements.StarlarkTokenTypes;


class _StarlarkLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\7\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\2\0\4\33"+
    "\1\34\1\33\10\35\1\36\10\35\1\37\2\35\1\40"+
    "\1\41\1\42\1\43\1\35\1\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\35\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\35\1\63\1\64"+
    "\1\65\1\66\1\35\1\67\1\70\1\71\1\35\1\72"+
    "\1\73\1\74\1\75\53\0\1\35\12\0\1\35\4\0"+
    "\1\35\5\0\27\35\1\0\37\35\1\0\u01ca\35\4\0"+
    "\14\35\16\0\5\35\7\0\1\35\1\0\1\35\21\0"+
    "\165\35\1\0\2\35\2\0\4\35\1\0\1\35\6\0"+
    "\1\35\1\0\3\35\1\0\1\35\1\0\24\35\1\0"+
    "\123\35\1\0\213\35\1\0\255\35\1\0\46\35\2\0"+
    "\1\35\6\0\51\35\10\0\55\35\1\0\1\35\1\0"+
    "\2\35\1\0\2\35\1\0\1\35\10\0\33\35\4\0"+
    "\4\35\35\0\13\35\5\0\100\35\12\76\4\0\146\35"+
    "\1\0\10\35\2\0\12\35\1\0\6\35\12\76\3\35"+
    "\2\0\1\35\20\0\73\35\2\0\145\35\16\0\12\76"+
    "\54\35\4\0\1\35\2\0\1\35\2\0\56\35\22\0"+
    "\34\35\4\0\13\35\65\0\25\35\1\0\10\35\25\0"+
    "\17\35\1\0\201\35\2\0\12\76\1\0\23\35\1\0"+
    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0"+
    "\1\35\3\0\4\35\2\0\11\35\2\0\2\35\2\0"+
    "\4\35\10\0\1\35\4\0\2\35\1\0\5\35\2\0"+
    "\12\76\2\35\12\0\1\35\1\0\1\35\2\0\3\35"+
    "\1\0\6\35\4\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\2\35\1\0\2\35\2\0\1\35"+
    "\1\0\5\35\4\0\2\35\2\0\3\35\3\0\1\35"+
    "\7\0\4\35\1\0\1\35\7\0\12\76\6\35\13\0"+
    "\3\35\1\0\11\35\1\0\3\35\1\0\26\35\1\0"+
    "\7\35\1\0\2\35\1\0\5\35\2\0\12\35\1\0"+
    "\3\35\1\0\3\35\2\0\1\35\17\0\4\35\2\0"+
    "\12\76\11\0\7\35\1\0\3\35\1\0\10\35\2\0"+
    "\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\5\35\2\0\11\35\2\0\2\35\2\0\3\35\10\0"+
    "\2\35\4\0\2\35\1\0\5\35\2\0\12\76\1\0"+
    "\1\35\20\0\2\35\1\0\6\35\3\0\3\35\1\0"+
    "\4\35\3\0\2\35\1\0\1\35\1\0\2\35\3\0"+
    "\2\35\3\0\3\35\3\0\14\35\4\0\5\35\3\0"+
    "\3\35\1\0\4\35\2\0\1\35\6\0\1\35\16\0"+
    "\12\76\20\0\15\35\1\0\3\35\1\0\27\35\1\0"+
    "\20\35\3\0\10\35\1\0\3\35\1\0\4\35\7\0"+
    "\2\35\1\0\3\35\5\0\4\35\2\0\12\76\20\0"+
    "\4\35\1\0\10\35\1\0\3\35\1\0\27\35\1\0"+
    "\12\35\1\0\5\35\2\0\11\35\1\0\3\35\1\0"+
    "\4\35\7\0\2\35\7\0\1\35\1\0\4\35\2\0"+
    "\12\76\1\0\2\35\15\0\4\35\1\0\10\35\1\0"+
    "\3\35\1\0\63\35\1\0\3\35\1\0\5\35\5\0"+
    "\4\35\7\0\5\35\2\0\12\76\12\0\6\35\2\0"+
    "\2\35\1\0\22\35\3\0\30\35\1\0\11\35\1\0"+
    "\1\35\2\0\7\35\3\0\1\35\4\0\6\35\1\0"+
    "\1\35\1\0\10\35\6\0\12\76\2\0\2\35\15\0"+
    "\72\35\5\0\17\35\1\0\12\76\47\0\2\35\1\0"+
    "\1\35\1\0\5\35\1\0\30\35\1\0\1\35\1\0"+
    "\27\35\2\0\5\35\1\0\1\35\1\0\6\35\2\0"+
    "\12\76\2\0\4\35\40\0\1\35\27\0\2\35\6\0"+
    "\12\76\13\0\1\35\1\0\1\35\1\0\1\35\4\0"+
    "\12\35\1\0\44\35\4\0\24\35\1\0\22\35\1\0"+
    "\44\35\11\0\1\35\71\0\100\35\12\76\6\0\100\35"+
    "\12\76\4\35\2\0\46\35\1\0\1\35\5\0\1\35"+
    "\2\0\53\35\1\0\115\35\1\0\4\35\2\0\7\35"+
    "\1\0\1\35\1\0\4\35\2\0\51\35\1\0\4\35"+
    "\2\0\41\35\1\0\4\35\2\0\7\35\1\0\1\35"+
    "\1\0\4\35\2\0\17\35\1\0\71\35\1\0\4\35"+
    "\2\0\103\35\2\0\3\35\40\0\20\35\20\0\126\35"+
    "\2\0\6\35\3\0\u016c\35\2\0\21\35\1\0\32\35"+
    "\5\0\113\35\3\0\13\35\7\0\15\35\1\0\7\35"+
    "\13\0\25\35\13\0\24\35\14\0\15\35\1\0\3\35"+
    "\1\0\2\35\14\0\124\35\3\0\1\35\4\0\2\35"+
    "\2\0\12\76\41\0\3\35\2\0\12\76\6\0\131\35"+
    "\7\0\53\35\5\0\106\35\12\0\37\35\1\0\14\35"+
    "\4\0\14\35\12\0\12\76\36\35\2\0\5\35\13\0"+
    "\54\35\4\0\32\35\6\0\12\76\46\0\34\35\4\0"+
    "\77\35\1\0\35\35\2\0\1\35\12\76\6\0\12\76"+
    "\15\0\1\35\10\0\17\35\101\0\114\35\4\0\12\76"+
    "\21\0\11\35\14\0\60\35\12\76\72\35\14\0\70\35"+
    "\10\0\12\76\3\0\3\35\12\76\44\35\2\0\11\35"+
    "\7\0\53\35\2\0\3\35\20\0\3\35\1\0\47\35"+
    "\5\0\372\35\1\0\33\35\2\0\6\35\2\0\46\35"+
    "\2\0\6\35\2\0\10\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\37\35\2\0\65\35\1\0\7\35"+
    "\1\0\1\35\3\0\3\35\1\0\7\35\3\0\4\35"+
    "\2\0\6\35\4\0\15\35\5\0\3\35\1\0\7\35"+
    "\102\0\2\35\23\0\1\35\34\0\1\35\15\0\1\35"+
    "\20\0\15\35\63\0\41\35\21\0\1\35\4\0\1\35"+
    "\2\0\12\35\1\0\1\35\3\0\5\35\6\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\4\35\1\0\13\35"+
    "\2\0\4\35\5\0\5\35\4\0\1\35\21\0\51\35"+
    "\u022d\0\64\35\26\0\57\35\1\0\57\35\1\0\205\35"+
    "\6\0\11\35\14\0\46\35\1\0\1\35\5\0\1\35"+
    "\2\0\70\35\7\0\1\35\17\0\30\35\11\0\7\35"+
    "\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35"+
    "\1\0\7\35\1\0\7\35\1\0\7\35\1\0\40\35"+
    "\57\0\1\35\325\0\3\35\31\0\17\35\1\0\5\35"+
    "\2\0\5\35\4\0\126\35\2\0\2\35\2\0\3\35"+
    "\1\0\132\35\1\0\4\35\5\0\53\35\1\0\136\35"+
    "\21\0\33\35\65\0\306\35\112\0\360\35\20\0\215\35"+
    "\103\0\56\35\2\0\15\35\3\0\20\35\12\76\2\35"+
    "\24\0\63\35\1\0\12\35\1\0\163\35\45\0\11\35"+
    "\2\0\147\35\2\0\65\35\2\0\5\35\60\0\61\35"+
    "\30\0\64\35\14\0\106\35\12\0\12\76\6\0\30\35"+
    "\3\0\1\35\1\0\3\35\12\76\44\35\2\0\44\35"+
    "\14\0\35\35\3\0\101\35\16\0\1\35\12\76\6\0"+
    "\20\35\12\76\5\35\1\0\67\35\11\0\16\35\2\0"+
    "\12\76\6\0\27\35\3\0\111\35\30\0\3\35\2\0"+
    "\20\35\2\0\5\35\12\0\6\35\2\0\6\35\2\0"+
    "\6\35\11\0\7\35\1\0\7\35\1\0\53\35\1\0"+
    "\14\35\10\0\173\35\1\0\2\35\2\0\12\76\6\0"+
    "\244\35\14\0\27\35\4\0\61\35\4\0\156\35\2\0"+
    "\152\35\46\0\7\35\14\0\5\35\5\0\14\35\1\0"+
    "\15\35\1\0\5\35\1\0\1\35\1\0\2\35\1\0"+
    "\2\35\1\0\154\35\41\0\153\35\22\0\100\35\2\0"+
    "\66\35\50\0\14\35\4\0\20\35\20\0\20\35\3\0"+
    "\2\35\30\0\3\35\40\0\5\35\1\0\207\35\23\0"+
    "\12\76\7\0\32\35\4\0\1\35\1\0\32\35\13\0"+
    "\131\35\3\0\6\35\2\0\6\35\2\0\6\35\2\0"+
    "\3\35\43\0\14\35\1\0\32\35\1\0\23\35\1\0"+
    "\2\35\1\0\17\35\2\0\16\35\42\0\173\35\105\0"+
    "\65\35\210\0\1\35\202\0\35\35\3\0\61\35\17\0"+
    "\1\35\37\0\40\35\15\0\36\35\5\0\53\35\5\0"+
    "\36\35\2\0\44\35\4\0\10\35\1\0\5\35\52\0"+
    "\236\35\2\0\12\76\6\0\44\35\4\0\44\35\4\0"+
    "\50\35\10\0\64\35\234\0\67\35\11\0\26\35\12\0"+
    "\10\35\230\0\6\35\2\0\1\35\1\0\54\35\1\0"+
    "\2\35\3\0\1\35\2\0\27\35\12\0\27\35\11\0"+
    "\37\35\101\0\23\35\1\0\2\35\12\0\26\35\12\0"+
    "\32\35\106\0\70\35\6\0\2\35\100\0\4\35\1\0"+
    "\2\35\5\0\10\35\1\0\3\35\1\0\35\35\2\0"+
    "\3\35\4\0\1\35\40\0\35\35\3\0\35\35\43\0"+
    "\10\35\1\0\36\35\31\0\66\35\12\0\26\35\12\0"+
    "\23\35\15\0\22\35\156\0\111\35\67\0\63\35\15\0"+
    "\63\35\15\0\50\35\10\0\12\76\306\0\35\35\12\0"+
    "\1\35\10\0\41\35\217\0\27\35\11\0\107\35\37\0"+
    "\12\76\17\0\74\35\25\0\31\35\7\0\12\76\6\0"+
    "\65\35\1\0\12\76\4\0\3\35\11\0\44\35\2\0"+
    "\1\35\11\0\105\35\4\0\4\35\3\0\12\76\1\35"+
    "\1\0\1\35\43\0\22\35\1\0\45\35\6\0\1\35"+
    "\101\0\7\35\1\0\1\35\1\0\4\35\1\0\17\35"+
    "\1\0\12\35\7\0\73\35\5\0\12\76\6\0\4\35"+
    "\1\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\5\35\1\0\12\35\2\0\2\35"+
    "\2\0\3\35\2\0\1\35\6\0\1\35\5\0\7\35"+
    "\2\0\7\35\3\0\5\35\213\0\113\35\5\0\12\76"+
    "\4\0\2\35\40\0\106\35\1\0\1\35\10\0\12\76"+
    "\246\0\66\35\2\0\11\35\27\0\6\35\42\0\101\35"+
    "\3\0\1\35\13\0\12\76\46\0\71\35\7\0\12\76"+
    "\66\0\33\35\2\0\17\35\4\0\12\76\306\0\73\35"+
    "\145\0\100\35\12\76\25\0\1\35\240\0\10\35\2\0"+
    "\56\35\2\0\10\35\1\0\2\35\33\0\77\35\10\0"+
    "\1\35\10\0\112\35\3\0\1\35\42\0\71\35\7\0"+
    "\11\35\1\0\55\35\1\0\11\35\17\0\12\76\30\0"+
    "\36\35\2\0\26\35\1\0\16\35\111\0\7\35\1\0"+
    "\2\35\1\0\54\35\3\0\1\35\1\0\2\35\1\0"+
    "\11\35\10\0\12\76\6\0\6\35\1\0\2\35\1\0"+
    "\45\35\1\0\2\35\1\0\6\35\7\0\12\76\u0136\0"+
    "\27\35\11\0\232\35\146\0\157\35\21\0\304\35\274\0"+
    "\57\35\321\0\107\35\271\0\71\35\7\0\37\35\1\0"+
    "\12\76\146\0\36\35\2\0\5\35\13\0\67\35\11\0"+
    "\4\35\14\0\12\76\11\0\25\35\5\0\23\35\260\0"+
    "\100\35\200\0\113\35\4\0\71\35\7\0\21\35\100\0"+
    "\2\35\1\0\1\35\34\0\370\35\10\0\363\35\15\0"+
    "\37\35\61\0\3\35\21\0\4\35\10\0\u018c\35\4\0"+
    "\153\35\5\0\15\35\3\0\11\35\7\0\12\35\3\0"+
    "\2\35\306\0\5\35\3\0\6\35\10\0\10\35\2\0"+
    "\7\35\36\0\4\35\224\0\3\35\273\0\125\35\1\0"+
    "\107\35\1\0\2\35\2\0\1\35\2\0\2\35\2\0"+
    "\4\35\1\0\14\35\1\0\1\35\1\0\7\35\1\0"+
    "\101\35\1\0\4\35\2\0\10\35\1\0\7\35\1\0"+
    "\34\35\1\0\4\35\1\0\5\35\1\0\1\35\3\0"+
    "\7\35\1\0\u0154\35\2\0\31\35\1\0\31\35\1\0"+
    "\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0"+
    "\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0"+
    "\10\35\2\0\62\76\67\35\4\0\62\35\10\0\1\35"+
    "\16\0\1\35\26\0\5\35\1\0\17\35\120\0\7\35"+
    "\1\0\21\35\2\0\7\35\1\0\2\35\1\0\5\35"+
    "\325\0\55\35\3\0\16\35\2\0\12\76\4\0\1\35"+
    "\u0171\0\60\35\12\76\6\0\305\35\13\0\7\35\51\0"+
    "\114\35\4\0\12\76\246\0\4\35\1\0\33\35\1\0"+
    "\2\35\1\0\1\35\2\0\1\35\1\0\12\35\1\0"+
    "\4\35\1\0\1\35\1\0\1\35\6\0\1\35\4\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\3\35\1\0"+
    "\2\35\1\0\1\35\2\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\2\35\1\0"+
    "\1\35\2\0\4\35\1\0\7\35\1\0\4\35\1\0"+
    "\4\35\1\0\1\35\1\0\12\35\1\0\21\35\5\0"+
    "\3\35\1\0\5\35\1\0\21\35\164\0\32\35\6\0"+
    "\32\35\6\0\32\35\166\0\327\35\51\0\65\35\13\0"+
    "\336\35\2\0\u0182\35\16\0\u0131\35\37\0\36\35\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\20\27\1\33"+
    "\1\34\1\35\1\36\1\37\2\5\1\0\1\40\1\41"+
    "\2\5\1\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\4\0\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\27\1\60\1\27\2\61\12\27\1\62\1\27"+
    "\1\63\1\64\3\27\1\65\10\27\1\66\3\5\1\67"+
    "\1\0\1\46\2\21\1\70\1\71\1\72\3\27\2\61"+
    "\1\0\2\61\1\0\3\27\1\73\1\74\4\27\1\75"+
    "\6\27\1\76\3\27\1\77\3\27\4\0\3\27\3\61"+
    "\3\27\1\100\1\101\2\27\1\102\3\27\1\103\1\27"+
    "\1\104\3\27\1\105\1\27\2\0\1\27\1\106\1\107"+
    "\4\0\1\110\1\111\7\27\1\112\1\27\1\113\1\114"+
    "\1\115\2\0\1\27\1\116\1\27\1\117\1\120\1\121"+
    "\1\27\1\122\1\27\1\123\1\27\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\77\0\176\0\275\0\374"+
    "\0\u013b\0\u017a\0\u01b9\0\77\0\77\0\u01f8\0\u0237\0\77"+
    "\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\77\0\77\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\77\0\u04ad\0\77\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\77"+
    "\0\u091b\0\77\0\77\0\77\0\u095a\0\u0999\0\u09d8\0\77"+
    "\0\77\0\u0a17\0\u0a56\0\u0a95\0\77\0\77\0\77\0\77"+
    "\0\u0ad4\0\u0b13\0\77\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\77\0\77\0\77\0\u0c8d\0\77\0\77\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u046e\0\u107d\0\u046e"+
    "\0\u046e\0\u10bc\0\u10fb\0\u113a\0\u046e\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\77\0\77\0\u1371"+
    "\0\u13b0\0\77\0\u13ef\0\u13ef\0\u0bd0\0\u0c0f\0\77\0\77"+
    "\0\u046e\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u046e\0\u046e\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u046e\0\u181e\0\u185d\0\u189c\0\u18db"+
    "\0\u191a\0\u1959\0\u046e\0\u1998\0\u19d7\0\u1a16\0\u046e\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\77\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u046e"+
    "\0\u046e\0\u1e06\0\u1e45\0\u046e\0\u1e84\0\u1ec3\0\u1f02\0\u046e"+
    "\0\u1f41\0\u046e\0\u1f80\0\u1fbf\0\u1ffe\0\u046e\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u046e\0\u046e\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u046e\0\u046e\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u046e\0\u23ee\0\u046e\0\u046e\0\u046e\0\u242d\0\u246c"+
    "\0\u24ab\0\u046e\0\u24ea\0\u046e\0\u046e\0\u046e\0\u2529\0\u046e"+
    "\0\u2568\0\u046e\0\u25a7\0\u046e\0\u046e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\25\1\26\1\27\1\30"+
    "\1\31\1\32\5\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\33\1\47"+
    "\1\33\1\50\1\33\1\51\1\52\1\53\1\54\1\33"+
    "\1\55\1\33\1\56\1\33\1\57\1\60\1\61\1\62"+
    "\1\63\1\2\130\0\1\64\45\0\2\65\1\0\3\65"+
    "\1\66\32\65\1\67\35\65\2\10\2\0\73\10\31\0"+
    "\1\70\76\0\1\71\45\0\2\72\1\0\7\72\1\73"+
    "\26\72\1\74\35\72\15\0\1\75\13\0\1\76\76\0"+
    "\1\77\76\0\1\100\70\0\3\101\73\0\1\102\6\0"+
    "\1\103\66\0\1\101\1\0\3\104\6\0\1\105\1\0"+
    "\1\106\1\107\10\0\1\105\10\0\1\106\6\0\1\107"+
    "\27\0\1\101\1\0\3\25\6\0\1\105\13\0\1\105"+
    "\56\0\1\110\1\111\76\0\1\112\76\0\1\113\1\114"+
    "\67\0\3\33\5\0\5\33\4\0\26\33\4\0\1\33"+
    "\2\0\1\115\125\0\1\116\70\0\3\33\5\0\5\33"+
    "\4\0\14\33\1\117\3\33\1\120\2\33\1\121\2\33"+
    "\4\0\1\33\6\0\1\122\3\0\1\123\10\0\3\33"+
    "\5\0\5\33\4\0\17\33\1\124\6\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\12\33\1\125\2\33"+
    "\1\126\10\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\4\33\1\127\21\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\12\33\1\130\11\33\1\131\1\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\10\33"+
    "\1\132\4\33\1\133\1\33\1\134\6\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\12\33\1\135\13\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\5\33"+
    "\1\136\5\33\1\137\1\140\3\33\1\141\5\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\1\142\14\33"+
    "\1\143\10\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\15\33\1\144\10\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\17\33\1\145\6\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\1\146\25\33\4\0"+
    "\1\33\6\0\1\7\3\0\1\13\10\0\3\33\5\0"+
    "\5\33\4\0\1\147\1\150\2\33\1\151\21\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\17\33\1\152"+
    "\6\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\7\33\1\153\1\154\15\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\10\33\1\155\15\33\4\0\1\33"+
    "\31\0\1\156\45\0\2\65\1\0\3\65\1\157\32\65"+
    "\1\67\35\65\6\0\1\160\70\0\77\65\2\72\1\0"+
    "\7\72\1\157\26\72\1\74\35\72\12\0\1\161\64\0"+
    "\77\72\23\0\3\101\6\0\1\105\13\0\1\105\57\0"+
    "\1\162\66\0\1\101\1\0\3\104\6\0\1\105\13\0"+
    "\1\105\44\0\1\163\1\0\1\163\2\0\3\164\74\0"+
    "\2\165\75\0\3\166\5\0\2\166\7\0\6\166\56\0"+
    "\1\167\76\0\1\170\70\0\3\33\5\0\5\33\4\0"+
    "\3\33\1\171\22\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\20\33\1\172\4\33\1\173\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\1\174\25\33\4\0"+
    "\1\33\2\175\1\0\3\175\1\176\32\175\1\177\35\175"+
    "\2\200\1\0\7\200\1\201\26\200\1\202\35\200\6\0"+
    "\1\122\3\0\1\123\10\0\3\33\5\0\5\33\4\0"+
    "\4\33\1\203\21\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\1\204\25\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\14\33\1\205\11\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\5\33\1\206\4\33"+
    "\1\207\13\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\10\33\1\210\7\33\1\211\5\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\2\33\1\212\23\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\14\33"+
    "\1\213\11\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\17\33\1\214\6\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\15\33\1\215\10\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\15\33\1\216\10\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\16\33"+
    "\1\217\7\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\13\33\1\220\12\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\1\221\25\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\14\33\1\222\4\33\1\223"+
    "\4\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\20\33\1\224\5\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\10\33\1\225\15\33\4\0\1\33\6\0"+
    "\1\122\3\0\1\123\10\0\3\33\5\0\5\33\4\0"+
    "\26\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\21\33\1\226\4\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\25\33\1\227\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\10\33\1\230\15\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\21\33\1\231\4\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\4\33"+
    "\1\232\21\33\4\0\1\33\6\160\1\233\32\160\1\234"+
    "\35\160\12\161\1\235\26\161\1\236\35\161\23\0\3\164"+
    "\74\0\3\33\5\0\5\33\4\0\4\33\1\237\21\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\14\33"+
    "\1\240\11\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\10\33\1\241\15\33\4\0\1\33\2\175\1\0"+
    "\3\175\1\242\32\175\1\177\35\175\6\0\1\243\70\0"+
    "\77\175\2\200\1\0\7\200\1\242\26\200\1\202\35\200"+
    "\12\0\1\244\64\0\77\200\23\0\3\33\5\0\5\33"+
    "\4\0\1\245\25\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\20\33\1\246\5\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\21\33\1\247\4\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\5\33\1\250"+
    "\20\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\4\33\1\251\21\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\4\33\1\252\21\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\1\253\25\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\13\33\1\254\12\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\1\33"+
    "\1\255\24\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\15\33\1\256\10\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\1\33\1\257\24\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\3\33\1\260\22\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\12\33"+
    "\1\261\13\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\20\33\1\262\5\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\20\33\1\263\5\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\22\33\1\264\3\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\12\33"+
    "\1\265\13\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\7\33\1\266\16\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\12\33\1\267\13\33\4\0\1\33"+
    "\6\160\1\270\32\160\1\234\134\160\12\161\1\271\26\161"+
    "\1\236\134\161\23\0\3\33\5\0\5\33\4\0\17\33"+
    "\1\272\6\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\2\33\1\273\23\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\21\33\1\274\4\33\4\0\1\33"+
    "\6\243\1\275\32\243\1\276\35\243\12\244\1\277\26\244"+
    "\1\300\35\244\23\0\3\33\5\0\5\33\4\0\11\33"+
    "\1\301\14\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\20\33\1\302\5\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\10\33\1\303\15\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\16\33\1\304\7\33"+
    "\4\0\1\33\23\0\3\33\5\0\5\33\4\0\12\33"+
    "\1\305\13\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\1\306\25\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\17\33\1\307\6\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\3\33\1\310\22\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\15\33\1\311"+
    "\10\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\4\33\1\312\21\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\17\33\1\313\6\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\4\33\1\314\21\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\3\33\1\315"+
    "\22\33\4\0\1\33\6\160\1\157\32\160\1\234\35\160"+
    "\12\161\1\157\26\161\1\236\35\161\23\0\3\33\5\0"+
    "\5\33\4\0\21\33\1\316\4\33\4\0\1\33\6\243"+
    "\1\317\32\243\1\276\134\243\12\244\1\320\26\244\1\300"+
    "\134\244\23\0\3\33\5\0\5\33\4\0\14\33\1\321"+
    "\11\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\21\33\1\322\4\33\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\12\33\1\323\13\33\4\0\1\33\23\0"+
    "\3\33\5\0\5\33\4\0\12\33\1\324\13\33\4\0"+
    "\1\33\23\0\3\33\5\0\5\33\4\0\21\33\1\325"+
    "\4\33\4\0\1\33\23\0\3\33\5\0\5\33\4\0"+
    "\1\326\25\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\2\33\1\327\23\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\14\33\1\330\11\33\4\0\1\33"+
    "\6\243\1\242\32\243\1\276\35\243\12\244\1\242\26\244"+
    "\1\300\35\244\23\0\3\33\5\0\5\33\4\0\22\33"+
    "\1\331\3\33\4\0\1\33\23\0\3\33\5\0\5\33"+
    "\4\0\25\33\1\332\4\0\1\33\23\0\3\33\5\0"+
    "\5\33\4\0\1\333\25\33\4\0\1\33\23\0\3\33"+
    "\5\0\5\33\4\0\4\33\1\334\21\33\4\0\1\33"+
    "\23\0\3\33\5\0\5\33\4\0\12\33\1\335\13\33"+
    "\4\0\1\33";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9702];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\6\1\2\11\2\1\1\11\5\1\2\11"+
    "\4\1\1\11\1\1\1\11\21\1\1\11\1\1\3\11"+
    "\2\1\1\0\2\11\2\1\1\0\4\11\2\1\1\11"+
    "\4\0\1\1\3\11\1\1\2\11\37\1\2\11\2\1"+
    "\1\11\1\0\3\1\2\11\6\1\1\0\2\1\1\0"+
    "\30\1\4\0\3\1\1\11\25\1\2\0\3\1\4\0"+
    "\16\1\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _StarlarkLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 86: break;
          case 2:
            { return StarlarkTokenTypes.TAB;
            }
          // fall through
          case 87: break;
          case 3:
            { return StarlarkTokenTypes.LINE_BREAK;
            }
          // fall through
          case 88: break;
          case 4:
            { return StarlarkTokenTypes.SPACE;
            }
          // fall through
          case 89: break;
          case 5:
            { return StarlarkTokenTypes.STRING;
            }
          // fall through
          case 90: break;
          case 6:
            { return StarlarkTokenTypes.COMMENT;
            }
          // fall through
          case 91: break;
          case 7:
            { return StarlarkTokenTypes.PERC;
            }
          // fall through
          case 92: break;
          case 8:
            { return StarlarkTokenTypes.AND;
            }
          // fall through
          case 93: break;
          case 9:
            { return StarlarkTokenTypes.LPAR;
            }
          // fall through
          case 94: break;
          case 10:
            { return StarlarkTokenTypes.RPAR;
            }
          // fall through
          case 95: break;
          case 11:
            { return StarlarkTokenTypes.MULT;
            }
          // fall through
          case 96: break;
          case 12:
            { return StarlarkTokenTypes.PLUS;
            }
          // fall through
          case 97: break;
          case 13:
            { return StarlarkTokenTypes.COMMA;
            }
          // fall through
          case 98: break;
          case 14:
            { return StarlarkTokenTypes.MINUS;
            }
          // fall through
          case 99: break;
          case 15:
            { return StarlarkTokenTypes.DOT;
            }
          // fall through
          case 100: break;
          case 16:
            { return StarlarkTokenTypes.DIV;
            }
          // fall through
          case 101: break;
          case 17:
            { return StarlarkTokenTypes.INT;
            }
          // fall through
          case 102: break;
          case 18:
            { return StarlarkTokenTypes.COLON;
            }
          // fall through
          case 103: break;
          case 19:
            { return StarlarkTokenTypes.SEMICOLON;
            }
          // fall through
          case 104: break;
          case 20:
            { return StarlarkTokenTypes.LT;
            }
          // fall through
          case 105: break;
          case 21:
            { return StarlarkTokenTypes.EQ;
            }
          // fall through
          case 106: break;
          case 22:
            { return StarlarkTokenTypes.GT;
            }
          // fall through
          case 107: break;
          case 23:
            { return StarlarkTokenTypes.IDENTIFIER;
            }
          // fall through
          case 108: break;
          case 24:
            { return StarlarkTokenTypes.LBRACKET;
            }
          // fall through
          case 109: break;
          case 25:
            { return StarlarkTokenTypes.RBRACKET;
            }
          // fall through
          case 110: break;
          case 26:
            { return StarlarkTokenTypes.XOR;
            }
          // fall through
          case 111: break;
          case 27:
            { return StarlarkTokenTypes.LBRACE;
            }
          // fall through
          case 112: break;
          case 28:
            { return StarlarkTokenTypes.OR;
            }
          // fall through
          case 113: break;
          case 29:
            { return StarlarkTokenTypes.RBRACE;
            }
          // fall through
          case 114: break;
          case 30:
            { return StarlarkTokenTypes.TILDE;
            }
          // fall through
          case 115: break;
          case 31:
            { return StarlarkTokenTypes.NE;
            }
          // fall through
          case 116: break;
          case 32:
            { return StarlarkTokenTypes.PERCEQ;
            }
          // fall through
          case 117: break;
          case 33:
            { return StarlarkTokenTypes.ANDEQ;
            }
          // fall through
          case 118: break;
          case 34:
            { return StarlarkTokenTypes.EXP;
            }
          // fall through
          case 119: break;
          case 35:
            { return StarlarkTokenTypes.MULTEQ;
            }
          // fall through
          case 120: break;
          case 36:
            { return StarlarkTokenTypes.PLUSEQ;
            }
          // fall through
          case 121: break;
          case 37:
            { return StarlarkTokenTypes.MINUSEQ;
            }
          // fall through
          case 122: break;
          case 38:
            { return StarlarkTokenTypes.FLOAT;
            }
          // fall through
          case 123: break;
          case 39:
            { return StarlarkTokenTypes.FLOORDIV;
            }
          // fall through
          case 124: break;
          case 40:
            { return StarlarkTokenTypes.DIVEQ;
            }
          // fall through
          case 125: break;
          case 41:
            { return StarlarkTokenTypes.LTLT;
            }
          // fall through
          case 126: break;
          case 42:
            { return StarlarkTokenTypes.LE;
            }
          // fall through
          case 127: break;
          case 43:
            { return StarlarkTokenTypes.EQEQ;
            }
          // fall through
          case 128: break;
          case 44:
            { return StarlarkTokenTypes.GE;
            }
          // fall through
          case 129: break;
          case 45:
            { return StarlarkTokenTypes.GTGT;
            }
          // fall through
          case 130: break;
          case 46:
            { return StarlarkTokenTypes.LINE_CONTINUATION;
            }
          // fall through
          case 131: break;
          case 47:
            { return StarlarkTokenTypes.XOREQ;
            }
          // fall through
          case 132: break;
          case 48:
            { return StarlarkTokenTypes.AS_KEYWORD;
            }
          // fall through
          case 133: break;
          case 49:
            { return StarlarkTokenTypes.BYTES;
            }
          // fall through
          case 134: break;
          case 50:
            { return StarlarkTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 135: break;
          case 51:
            { return StarlarkTokenTypes.IN_KEYWORD;
            }
          // fall through
          case 136: break;
          case 52:
            { return StarlarkTokenTypes.IS_KEYWORD;
            }
          // fall through
          case 137: break;
          case 53:
            { return StarlarkTokenTypes.OR_KEYWORD;
            }
          // fall through
          case 138: break;
          case 54:
            { return StarlarkTokenTypes.OREQ;
            }
          // fall through
          case 139: break;
          case 55:
            { return StarlarkTokenTypes.FLOORDIVEQ;
            }
          // fall through
          case 140: break;
          case 56:
            { return StarlarkTokenTypes.LTLTEQ;
            }
          // fall through
          case 141: break;
          case 57:
            { return StarlarkTokenTypes.GTGTEQ;
            }
          // fall through
          case 142: break;
          case 58:
            { return StarlarkTokenTypes.AND_KEYWORD;
            }
          // fall through
          case 143: break;
          case 59:
            { return StarlarkTokenTypes.DEF_KEYWORD;
            }
          // fall through
          case 144: break;
          case 60:
            { return StarlarkTokenTypes.DEL_KEYWORD;
            }
          // fall through
          case 145: break;
          case 61:
            { return StarlarkTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 146: break;
          case 62:
            { return StarlarkTokenTypes.NOT_KEYWORD;
            }
          // fall through
          case 147: break;
          case 63:
            { return StarlarkTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 148: break;
          case 64:
            { return StarlarkTokenTypes.ELIF_KEYWORD;
            }
          // fall through
          case 149: break;
          case 65:
            { return StarlarkTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 150: break;
          case 66:
            { return StarlarkTokenTypes.FROM_KEYWORD;
            }
          // fall through
          case 151: break;
          case 67:
            { return StarlarkTokenTypes.LOAD_KEYWORD;
            }
          // fall through
          case 152: break;
          case 68:
            { return StarlarkTokenTypes.PASS_KEYWORD;
            }
          // fall through
          case 153: break;
          case 69:
            { return StarlarkTokenTypes.WITH_KEYWORD;
            }
          // fall through
          case 154: break;
          case 70:
            { return StarlarkTokenTypes.ASYNC_KEYWORD;
            }
          // fall through
          case 155: break;
          case 71:
            { return StarlarkTokenTypes.AWAIT_KEYWORD;
            }
          // fall through
          case 156: break;
          case 72:
            { return StarlarkTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 157: break;
          case 73:
            { return StarlarkTokenTypes.CLASS_KEYWORD;
            }
          // fall through
          case 158: break;
          case 74:
            { return StarlarkTokenTypes.RAISE_KEYWORD;
            }
          // fall through
          case 159: break;
          case 75:
            { return StarlarkTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 160: break;
          case 76:
            { return StarlarkTokenTypes.YIELD_KEYWORD;
            }
          // fall through
          case 161: break;
          case 77:
            { return StarlarkTokenTypes.ASSERT_KEYWORD;
            }
          // fall through
          case 162: break;
          case 78:
            { return StarlarkTokenTypes.EXCEPT_KEYWORD;
            }
          // fall through
          case 163: break;
          case 79:
            { return StarlarkTokenTypes.GLOBAL_KEYWORD;
            }
          // fall through
          case 164: break;
          case 80:
            { return StarlarkTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 165: break;
          case 81:
            { return StarlarkTokenTypes.LAMBDA_KEYWORD;
            }
          // fall through
          case 166: break;
          case 82:
            { return StarlarkTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 167: break;
          case 83:
            { return StarlarkTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 168: break;
          case 84:
            { return StarlarkTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 169: break;
          case 85:
            { return StarlarkTokenTypes.NONLOCAL_KEYWORD;
            }
          // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
