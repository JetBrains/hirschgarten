// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ProjectView.flex

package org.jetbrains.bazel.languages.projectview.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


class _ProjectViewLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\0"+
    "\1\5\1\6\6\0\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\11\14\1\15\2\0\1\16\3\0\32\17\1\0"+
    "\1\20\2\0\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\17\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\57\0\1\17"+
    "\12\0\1\17\4\0\1\17\5\0\27\17\1\0\37\17"+
    "\1\0\u01ca\17\4\0\14\17\16\0\5\17\7\0\1\17"+
    "\1\0\1\17\21\0\165\17\1\0\2\17\2\0\4\17"+
    "\1\0\1\17\6\0\1\17\1\0\3\17\1\0\1\17"+
    "\1\0\24\17\1\0\123\17\1\0\213\17\1\0\255\17"+
    "\1\0\46\17\2\0\1\17\6\0\51\17\10\0\55\17"+
    "\1\0\1\17\1\0\2\17\1\0\2\17\1\0\1\17"+
    "\10\0\33\17\4\0\4\17\35\0\13\17\5\0\100\17"+
    "\12\53\4\0\146\17\1\0\10\17\2\0\12\17\1\0"+
    "\6\17\12\53\3\17\2\0\1\17\20\0\73\17\2\0"+
    "\145\17\16\0\12\53\54\17\4\0\1\17\2\0\1\17"+
    "\2\0\56\17\22\0\34\17\4\0\13\17\65\0\25\17"+
    "\1\0\10\17\25\0\17\17\1\0\201\17\2\0\12\53"+
    "\1\0\23\17\1\0\10\17\2\0\2\17\2\0\26\17"+
    "\1\0\7\17\1\0\1\17\3\0\4\17\2\0\11\17"+
    "\2\0\2\17\2\0\4\17\10\0\1\17\4\0\2\17"+
    "\1\0\5\17\2\0\12\53\2\17\12\0\1\17\1\0"+
    "\1\17\2\0\3\17\1\0\6\17\4\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\2\0\1\17\1\0\5\17\4\0\2\17\2\0"+
    "\3\17\3\0\1\17\7\0\4\17\1\0\1\17\7\0"+
    "\12\53\6\17\13\0\3\17\1\0\11\17\1\0\3\17"+
    "\1\0\26\17\1\0\7\17\1\0\2\17\1\0\5\17"+
    "\2\0\12\17\1\0\3\17\1\0\3\17\2\0\1\17"+
    "\17\0\4\17\2\0\12\53\11\0\7\17\1\0\3\17"+
    "\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\5\17\2\0\11\17\2\0\2\17"+
    "\2\0\3\17\10\0\2\17\4\0\2\17\1\0\5\17"+
    "\2\0\12\53\1\0\1\17\20\0\2\17\1\0\6\17"+
    "\3\0\3\17\1\0\4\17\3\0\2\17\1\0\1\17"+
    "\1\0\2\17\3\0\2\17\3\0\3\17\3\0\14\17"+
    "\4\0\5\17\3\0\3\17\1\0\4\17\2\0\1\17"+
    "\6\0\1\17\16\0\12\53\20\0\15\17\1\0\3\17"+
    "\1\0\27\17\1\0\20\17\3\0\10\17\1\0\3\17"+
    "\1\0\4\17\7\0\2\17\1\0\3\17\5\0\4\17"+
    "\2\0\12\53\20\0\4\17\1\0\10\17\1\0\3\17"+
    "\1\0\27\17\1\0\12\17\1\0\5\17\2\0\11\17"+
    "\1\0\3\17\1\0\4\17\7\0\2\17\7\0\1\17"+
    "\1\0\4\17\2\0\12\53\1\0\2\17\15\0\4\17"+
    "\1\0\10\17\1\0\3\17\1\0\63\17\1\0\3\17"+
    "\1\0\5\17\5\0\4\17\7\0\5\17\2\0\12\53"+
    "\12\0\6\17\2\0\2\17\1\0\22\17\3\0\30\17"+
    "\1\0\11\17\1\0\1\17\2\0\7\17\3\0\1\17"+
    "\4\0\6\17\1\0\1\17\1\0\10\17\6\0\12\53"+
    "\2\0\2\17\15\0\72\17\5\0\17\17\1\0\12\53"+
    "\47\0\2\17\1\0\1\17\1\0\5\17\1\0\30\17"+
    "\1\0\1\17\1\0\27\17\2\0\5\17\1\0\1\17"+
    "\1\0\6\17\2\0\12\53\2\0\4\17\40\0\1\17"+
    "\27\0\2\17\6\0\12\53\13\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\12\17\1\0\44\17\4\0\24\17"+
    "\1\0\22\17\1\0\44\17\11\0\1\17\71\0\100\17"+
    "\12\53\6\0\100\17\12\53\4\17\2\0\46\17\1\0"+
    "\1\17\5\0\1\17\2\0\53\17\1\0\115\17\1\0"+
    "\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0"+
    "\51\17\1\0\4\17\2\0\41\17\1\0\4\17\2\0"+
    "\7\17\1\0\1\17\1\0\4\17\2\0\17\17\1\0"+
    "\71\17\1\0\4\17\2\0\103\17\2\0\3\17\40\0"+
    "\20\17\20\0\126\17\2\0\6\17\3\0\u016c\17\2\0"+
    "\21\17\1\0\32\17\5\0\113\17\3\0\13\17\7\0"+
    "\15\17\1\0\7\17\13\0\25\17\13\0\24\17\14\0"+
    "\15\17\1\0\3\17\1\0\2\17\14\0\124\17\3\0"+
    "\1\17\4\0\2\17\2\0\12\53\41\0\3\17\2\0"+
    "\12\53\6\0\131\17\7\0\53\17\5\0\106\17\12\0"+
    "\37\17\1\0\14\17\4\0\14\17\12\0\12\53\36\17"+
    "\2\0\5\17\13\0\54\17\4\0\32\17\6\0\12\53"+
    "\46\0\34\17\4\0\77\17\1\0\35\17\2\0\1\17"+
    "\12\53\6\0\12\53\15\0\1\17\10\0\17\17\101\0"+
    "\114\17\4\0\12\53\21\0\11\17\14\0\60\17\12\53"+
    "\72\17\14\0\70\17\10\0\12\53\3\0\3\17\12\53"+
    "\44\17\2\0\11\17\7\0\53\17\2\0\3\17\20\0"+
    "\3\17\1\0\47\17\5\0\372\17\1\0\33\17\2\0"+
    "\6\17\2\0\46\17\2\0\6\17\2\0\10\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\37\17\2\0"+
    "\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0"+
    "\7\17\3\0\4\17\2\0\6\17\4\0\15\17\5\0"+
    "\3\17\1\0\7\17\102\0\2\17\23\0\1\17\34\0"+
    "\1\17\15\0\1\17\20\0\15\17\63\0\41\17\21\0"+
    "\1\17\4\0\1\17\2\0\12\17\1\0\1\17\3\0"+
    "\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\4\17\1\0\13\17\2\0\4\17\5\0\5\17\4\0"+
    "\1\17\21\0\51\17\u022d\0\64\17\26\0\57\17\1\0"+
    "\57\17\1\0\205\17\6\0\11\17\14\0\46\17\1\0"+
    "\1\17\5\0\1\17\2\0\70\17\7\0\1\17\17\0"+
    "\30\17\11\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\40\17\57\0\1\17\325\0\3\17\31\0"+
    "\17\17\1\0\5\17\2\0\5\17\4\0\126\17\2\0"+
    "\2\17\2\0\3\17\1\0\132\17\1\0\4\17\5\0"+
    "\53\17\1\0\136\17\21\0\33\17\65\0\306\17\112\0"+
    "\360\17\20\0\215\17\103\0\56\17\2\0\15\17\3\0"+
    "\20\17\12\53\2\17\24\0\63\17\1\0\12\17\1\0"+
    "\163\17\45\0\11\17\2\0\147\17\2\0\65\17\2\0"+
    "\5\17\60\0\61\17\30\0\64\17\14\0\106\17\12\0"+
    "\12\53\6\0\30\17\3\0\1\17\1\0\3\17\12\53"+
    "\44\17\2\0\44\17\14\0\35\17\3\0\101\17\16\0"+
    "\1\17\12\53\6\0\20\17\12\53\5\17\1\0\67\17"+
    "\11\0\16\17\2\0\12\53\6\0\27\17\3\0\111\17"+
    "\30\0\3\17\2\0\20\17\2\0\5\17\12\0\6\17"+
    "\2\0\6\17\2\0\6\17\11\0\7\17\1\0\7\17"+
    "\1\0\53\17\1\0\14\17\10\0\173\17\1\0\2\17"+
    "\2\0\12\53\6\0\244\17\14\0\27\17\4\0\61\17"+
    "\4\0\156\17\2\0\152\17\46\0\7\17\14\0\5\17"+
    "\5\0\14\17\1\0\15\17\1\0\5\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\154\17\41\0\153\17"+
    "\22\0\100\17\2\0\66\17\50\0\14\17\4\0\20\17"+
    "\20\0\20\17\3\0\2\17\30\0\3\17\40\0\5\17"+
    "\1\0\207\17\23\0\12\53\7\0\32\17\4\0\1\17"+
    "\1\0\32\17\13\0\131\17\3\0\6\17\2\0\6\17"+
    "\2\0\6\17\2\0\3\17\43\0\14\17\1\0\32\17"+
    "\1\0\23\17\1\0\2\17\1\0\17\17\2\0\16\17"+
    "\42\0\173\17\105\0\65\17\210\0\1\17\202\0\35\17"+
    "\3\0\61\17\17\0\1\17\37\0\40\17\15\0\36\17"+
    "\5\0\53\17\5\0\36\17\2\0\44\17\4\0\10\17"+
    "\1\0\5\17\52\0\236\17\2\0\12\53\6\0\44\17"+
    "\4\0\44\17\4\0\50\17\10\0\64\17\234\0\67\17"+
    "\11\0\26\17\12\0\10\17\230\0\6\17\2\0\1\17"+
    "\1\0\54\17\1\0\2\17\3\0\1\17\2\0\27\17"+
    "\12\0\27\17\11\0\37\17\101\0\23\17\1\0\2\17"+
    "\12\0\26\17\12\0\32\17\106\0\70\17\6\0\2\17"+
    "\100\0\4\17\1\0\2\17\5\0\10\17\1\0\3\17"+
    "\1\0\35\17\2\0\3\17\4\0\1\17\40\0\35\17"+
    "\3\0\35\17\43\0\10\17\1\0\36\17\31\0\66\17"+
    "\12\0\26\17\12\0\23\17\15\0\22\17\156\0\111\17"+
    "\67\0\63\17\15\0\63\17\15\0\50\17\10\0\12\53"+
    "\306\0\35\17\12\0\1\17\10\0\41\17\217\0\27\17"+
    "\11\0\107\17\37\0\12\53\17\0\74\17\25\0\31\17"+
    "\7\0\12\53\6\0\65\17\1\0\12\53\4\0\3\17"+
    "\11\0\44\17\2\0\1\17\11\0\105\17\4\0\4\17"+
    "\3\0\12\53\1\17\1\0\1\17\43\0\22\17\1\0"+
    "\45\17\6\0\1\17\101\0\7\17\1\0\1\17\1\0"+
    "\4\17\1\0\17\17\1\0\12\17\7\0\73\17\5\0"+
    "\12\53\6\0\4\17\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\2\17\1\0\5\17\1\0"+
    "\12\17\2\0\2\17\2\0\3\17\2\0\1\17\6\0"+
    "\1\17\5\0\7\17\2\0\7\17\3\0\5\17\213\0"+
    "\113\17\5\0\12\53\4\0\2\17\40\0\106\17\1\0"+
    "\1\17\10\0\12\53\246\0\66\17\2\0\11\17\27\0"+
    "\6\17\42\0\101\17\3\0\1\17\13\0\12\53\46\0"+
    "\71\17\7\0\12\53\66\0\33\17\2\0\17\17\4\0"+
    "\12\53\306\0\73\17\145\0\100\17\12\53\25\0\1\17"+
    "\240\0\10\17\2\0\56\17\2\0\10\17\1\0\2\17"+
    "\33\0\77\17\10\0\1\17\10\0\112\17\3\0\1\17"+
    "\42\0\71\17\7\0\11\17\1\0\55\17\1\0\11\17"+
    "\17\0\12\53\30\0\36\17\2\0\26\17\1\0\16\17"+
    "\111\0\7\17\1\0\2\17\1\0\54\17\3\0\1\17"+
    "\1\0\2\17\1\0\11\17\10\0\12\53\6\0\6\17"+
    "\1\0\2\17\1\0\45\17\1\0\2\17\1\0\6\17"+
    "\7\0\12\53\u0136\0\27\17\11\0\232\17\146\0\157\17"+
    "\21\0\304\17\274\0\57\17\321\0\107\17\271\0\71\17"+
    "\7\0\37\17\1\0\12\53\146\0\36\17\2\0\5\17"+
    "\13\0\67\17\11\0\4\17\14\0\12\53\11\0\25\17"+
    "\5\0\23\17\260\0\100\17\200\0\113\17\4\0\71\17"+
    "\7\0\21\17\100\0\2\17\1\0\1\17\34\0\370\17"+
    "\10\0\363\17\15\0\37\17\61\0\3\17\21\0\4\17"+
    "\10\0\u018c\17\4\0\153\17\5\0\15\17\3\0\11\17"+
    "\7\0\12\17\3\0\2\17\306\0\5\17\3\0\6\17"+
    "\10\0\10\17\2\0\7\17\36\0\4\17\224\0\3\17"+
    "\273\0\125\17\1\0\107\17\1\0\2\17\2\0\1\17"+
    "\2\0\2\17\2\0\4\17\1\0\14\17\1\0\1\17"+
    "\1\0\7\17\1\0\101\17\1\0\4\17\2\0\10\17"+
    "\1\0\7\17\1\0\34\17\1\0\4\17\1\0\5\17"+
    "\1\0\1\17\3\0\7\17\1\0\u0154\17\2\0\31\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\10\17\2\0\62\53\67\17\4\0"+
    "\62\17\10\0\1\17\16\0\1\17\26\0\5\17\1\0"+
    "\17\17\120\0\7\17\1\0\21\17\2\0\7\17\1\0"+
    "\2\17\1\0\5\17\325\0\55\17\3\0\16\17\2\0"+
    "\12\53\4\0\1\17\u0171\0\60\17\12\53\6\0\305\17"+
    "\13\0\7\17\51\0\114\17\4\0\12\53\246\0\4\17"+
    "\1\0\33\17\1\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\0\12\17\1\0\4\17\1\0\1\17\1\0\1\17"+
    "\6\0\1\17\4\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\2\17\1\0\1\17\2\0\4\17\1\0\7\17"+
    "\1\0\4\17\1\0\4\17\1\0\1\17\1\0\12\17"+
    "\1\0\21\17\5\0\3\17\1\0\5\17\1\0\21\17"+
    "\164\0\32\17\6\0\32\17\6\0\32\17\166\0\327\17"+
    "\51\0\65\17\13\0\336\17\2\0\u0182\17\16\0\u0131\17"+
    "\37\0\36\17\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\15\16\1\5"+
    "\1\0\70\16\1\17\35\16\1\20\31\16\1\21\76\16"+
    "\1\22\1\23\1\16\1\24\7\16\1\25\2\16\1\26"+
    "\16\16\1\27\5\16\1\30\4\16\1\31\7\16\1\32"+
    "\24\16\1\33\1\16\1\34\3\16\1\35\5\16\1\36"+
    "\20\16\1\37\1\40\15\16\1\41\1\42\1\43\1\44"+
    "\16\16\1\45\14\16\1\46\7\16\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\54\0\54\0\130\0\204\0\54"+
    "\0\54\0\54\0\54\0\54\0\260\0\54\0\54\0\334"+
    "\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\54\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\334\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4"+
    "\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524"+
    "\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\334\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\334\0\334\0\u2100"+
    "\0\334\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234"+
    "\0\334\0\u2260\0\u228c\0\334\0\u22b8\0\u22e4\0\u2310\0\u233c"+
    "\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c"+
    "\0\u24c8\0\u24f4\0\334\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0"+
    "\0\334\0\u25fc\0\u2628\0\u2654\0\u2680\0\334\0\u26ac\0\u26d8"+
    "\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\334\0\u27e0\0\u280c"+
    "\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c"+
    "\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc"+
    "\0\u2af8\0\u2b24\0\334\0\u2b50\0\334\0\u2b7c\0\u2ba8\0\u2bd4"+
    "\0\334\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\334\0\u2cdc"+
    "\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c"+
    "\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\334"+
    "\0\334\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4"+
    "\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac\0\334\0\334"+
    "\0\334\0\334\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4"+
    "\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414"+
    "\0\334\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u3548"+
    "\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\334\0\u3650\0\u367c"+
    "\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\20\1\21\1\22\1\20\1\23\1\24\1\25"+
    "\1\26\1\20\1\27\1\30\5\20\1\31\1\20\1\32"+
    "\1\33\2\20\1\34\3\20\1\2\54\0\2\6\1\0"+
    "\2\6\1\35\12\6\1\36\33\6\2\7\2\0\50\7"+
    "\13\0\2\15\52\0\2\20\2\0\1\20\1\0\33\20"+
    "\13\0\2\20\2\0\1\20\1\0\4\20\1\37\11\20"+
    "\1\40\14\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\41\22\20\1\42\6\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\43\3\20\1\44\21\20\13\0\2\20"+
    "\2\0\1\20\1\0\16\20\1\45\10\20\1\46\3\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\47\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\5\20\1\50\25\20"+
    "\13\0\2\20\2\0\1\20\1\0\15\20\1\51\15\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\52\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\53\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\10\20\1\54\17\20"+
    "\1\55\2\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\56\3\20\1\57\13\20\1\60\1\61\10\20\13\0"+
    "\2\20\2\0\1\20\1\0\17\20\1\62\13\20\54\6"+
    "\13\0\2\20\2\0\1\20\1\0\4\20\1\63\26\20"+
    "\13\0\2\20\2\0\1\20\1\0\4\20\1\64\26\20"+
    "\13\0\2\20\2\0\1\20\1\0\31\20\1\65\1\20"+
    "\13\0\2\20\2\0\1\20\1\0\11\20\1\66\21\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\67\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\70\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\71\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\3\20\1\72\27\20"+
    "\13\0\2\20\2\0\1\20\1\0\14\20\1\73\16\20"+
    "\13\0\2\20\2\0\1\20\1\0\16\20\1\74\14\20"+
    "\13\0\2\20\2\0\1\20\1\0\20\20\1\75\12\20"+
    "\13\0\2\20\2\0\1\20\1\0\25\20\1\76\5\20"+
    "\13\0\2\20\2\0\1\20\1\0\17\20\1\77\13\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\100\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\16\20\1\101\14\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\102\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\22\20\1\103\10\20"+
    "\13\0\2\20\2\0\1\20\1\0\24\20\1\104\6\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\105\32\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\106\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\11\20\1\107\21\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\110\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\111\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\112\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\11\20\1\113\21\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\114\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\2\20\1\115\30\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\116\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\22\20\1\104\10\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\117\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\17\20\1\120\13\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\20\1\121\31\20\13\0"+
    "\2\20\2\0\1\20\1\0\4\20\1\122\26\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\123\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\3\20\1\124\27\20\13\0"+
    "\2\20\2\0\1\20\1\0\7\20\1\125\23\20\13\0"+
    "\2\20\2\0\1\20\1\0\23\20\1\126\7\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\127\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\3\20\1\130\27\20\13\0"+
    "\2\20\2\0\1\20\1\0\13\20\1\131\17\20\13\0"+
    "\2\20\2\0\1\20\1\0\23\20\1\132\7\20\13\0"+
    "\2\20\2\0\1\20\1\0\17\20\1\133\13\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\134\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\4\20\1\135\26\20\13\0"+
    "\2\20\2\0\1\20\1\0\25\20\1\136\5\20\13\0"+
    "\2\20\2\0\1\20\1\0\3\20\1\137\27\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\140\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\24\20\1\141\6\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\142\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\143\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\144\32\20\13\0\2\20"+
    "\2\0\1\20\1\0\24\20\1\145\6\20\13\0\2\20"+
    "\2\0\1\20\1\0\4\20\1\146\26\20\13\0\2\20"+
    "\2\0\1\20\1\0\1\147\32\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\150\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\1\151\32\20\13\0\2\20\2\0\1\20"+
    "\1\0\17\20\1\152\13\20\13\0\2\20\2\0\1\20"+
    "\1\0\22\20\1\153\10\20\13\0\2\20\2\0\1\20"+
    "\1\0\11\20\1\154\21\20\13\0\2\20\2\0\1\20"+
    "\1\0\11\20\1\155\21\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\156\32\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\157\32\20\13\0\2\20\2\0\1\20\1\0\5\20"+
    "\1\160\25\20\13\0\2\20\2\0\1\20\1\0\23\20"+
    "\1\161\7\20\13\0\2\20\2\0\1\20\1\0\5\20"+
    "\1\162\25\20\13\0\2\20\2\0\1\20\1\0\4\20"+
    "\1\163\26\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\164\31\20\13\0\2\20\2\0\1\20\1\0\23\20"+
    "\1\165\7\20\13\0\2\20\2\0\1\20\1\0\14\20"+
    "\1\166\16\20\13\0\2\20\2\0\1\20\1\0\3\20"+
    "\1\167\27\20\13\0\2\20\2\0\1\20\1\0\1\170"+
    "\32\20\13\0\2\20\2\0\1\20\1\0\6\20\1\171"+
    "\24\20\13\0\2\20\2\0\1\20\1\0\23\20\1\172"+
    "\7\20\13\0\2\20\2\0\1\20\1\0\6\20\1\173"+
    "\13\20\1\174\10\20\13\0\2\20\2\0\1\20\1\0"+
    "\16\20\1\175\14\20\13\0\2\20\2\0\1\20\1\0"+
    "\20\20\1\176\12\20\13\0\2\20\2\0\1\20\1\0"+
    "\17\20\1\177\13\20\13\0\2\20\2\0\1\20\1\0"+
    "\4\20\1\200\26\20\13\0\2\20\2\0\1\20\1\0"+
    "\2\20\1\201\30\20\13\0\2\20\2\0\1\20\1\0"+
    "\6\20\1\202\6\20\1\203\15\20\13\0\2\20\2\0"+
    "\1\20\1\0\1\204\32\20\13\0\2\20\2\0\1\20"+
    "\1\0\17\20\1\205\13\20\13\0\2\20\2\0\1\20"+
    "\1\0\4\20\1\206\26\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\207\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\23\20\1\210\7\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\211\32\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\20\1\212\31\20\13\0\2\20\2\0\1\20\1\0"+
    "\5\20\1\213\25\20\13\0\2\20\2\0\1\20\1\0"+
    "\22\20\1\214\10\20\13\0\2\20\2\0\1\20\1\0"+
    "\14\20\1\215\16\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\216\21\20\1\217\10\20\13\0\2\20\2\0\1\20"+
    "\1\0\14\20\1\220\16\20\13\0\2\20\2\0\1\20"+
    "\1\0\17\20\1\221\13\20\13\0\2\20\2\0\1\20"+
    "\1\0\6\20\1\222\24\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\20\1\223\31\20\13\0\2\20\2\0\1\20"+
    "\1\0\16\20\1\224\14\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\225\32\20\13\0\2\20\2\0\1\20\1\0"+
    "\11\20\1\226\21\20\13\0\2\20\2\0\1\20\1\0"+
    "\14\20\1\227\16\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\20\1\230\31\20\13\0\2\20\2\0\1\20\1\0"+
    "\23\20\1\231\7\20\13\0\2\20\2\0\1\20\1\0"+
    "\21\20\1\232\11\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\233\32\20\13\0\2\20\2\0\1\20\1\0\1\234"+
    "\32\20\13\0\2\20\2\0\1\20\1\0\5\20\1\235"+
    "\25\20\13\0\2\20\2\0\1\20\1\0\4\20\1\236"+
    "\14\20\1\237\11\20\13\0\2\20\2\0\1\20\1\0"+
    "\16\20\1\240\14\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\241\32\20\13\0\2\20\2\0\1\20\1\0\30\20"+
    "\1\242\2\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\243\31\20\13\0\2\20\2\0\1\20\1\0\22\20"+
    "\1\244\10\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\245\31\20\13\0\2\20\2\0\1\20\1\0\24\20"+
    "\1\246\6\20\13\0\2\20\2\0\1\20\1\0\11\20"+
    "\1\247\21\20\13\0\2\20\2\0\1\20\1\0\3\20"+
    "\1\250\27\20\13\0\2\20\2\0\1\20\1\0\1\20"+
    "\1\251\31\20\13\0\2\20\2\0\1\20\1\0\15\20"+
    "\1\252\4\20\1\253\10\20\13\0\2\20\2\0\1\20"+
    "\1\0\16\20\1\254\14\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\20\1\255\31\20\13\0\2\20\2\0\1\20"+
    "\1\0\16\20\1\256\14\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\20\1\257\31\20\13\0\2\20\2\0\1\20"+
    "\1\0\11\20\1\260\21\20\13\0\2\20\2\0\1\20"+
    "\1\0\21\20\1\261\11\20\13\0\2\20\2\0\1\20"+
    "\1\0\14\20\1\262\16\20\13\0\2\20\2\0\1\20"+
    "\1\0\4\20\1\263\26\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\264\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\24\20\1\265\6\20\13\0\2\20\2\0\1\20"+
    "\1\0\7\20\1\266\23\20\13\0\2\20\2\0\1\20"+
    "\1\0\23\20\1\267\7\20\13\0\2\20\2\0\1\20"+
    "\1\0\16\20\1\270\14\20\13\0\2\20\2\0\1\20"+
    "\1\0\7\20\1\271\23\20\13\0\2\20\2\0\1\20"+
    "\1\0\10\20\1\272\22\20\13\0\2\20\2\0\1\20"+
    "\1\0\7\20\1\273\23\20\13\0\2\20\2\0\1\20"+
    "\1\0\21\20\1\274\11\20\13\0\2\20\2\0\1\20"+
    "\1\0\7\20\1\275\23\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\276\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\14\20\1\277\16\20\13\0\2\20\2\0\1\20"+
    "\1\0\11\20\1\300\21\20\13\0\2\20\2\0\1\20"+
    "\1\0\4\20\1\301\26\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\20\1\302\31\20\13\0\2\20\2\0\1\20"+
    "\1\0\7\20\1\303\23\20\13\0\2\20\2\0\1\20"+
    "\1\0\24\20\1\304\6\20\13\0\2\20\2\0\1\20"+
    "\1\0\21\20\1\305\11\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\306\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\24\20\1\307\6\20\13\0\2\20\2\0\1\20"+
    "\1\0\11\20\1\310\21\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\311\32\20\13\0\2\20\2\0\1\20\1\0"+
    "\20\20\1\312\12\20\13\0\2\20\2\0\1\20\1\0"+
    "\16\20\1\313\14\20\13\0\2\20\2\0\1\20\1\0"+
    "\24\20\1\314\6\20\13\0\2\20\2\0\1\20\1\0"+
    "\21\20\1\315\11\20\13\0\2\20\2\0\1\20\1\0"+
    "\3\20\1\316\27\20\13\0\2\20\2\0\1\20\1\0"+
    "\22\20\1\317\10\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\20\1\320\31\20\13\0\2\20\2\0\1\20\1\0"+
    "\22\20\1\321\10\20\13\0\2\20\2\0\1\20\1\0"+
    "\3\20\1\322\27\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\323\32\20\13\0\2\20\2\0\1\20\1\0\1\324"+
    "\32\20\13\0\2\20\2\0\1\20\1\0\1\325\32\20"+
    "\13\0\2\20\2\0\1\20\1\0\16\20\1\326\14\20"+
    "\13\0\2\20\2\0\1\20\1\0\13\20\1\327\17\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\330\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\22\20\1\331\10\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\332\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\7\20\1\333\23\20"+
    "\13\0\2\20\2\0\1\20\1\0\22\20\1\334\10\20"+
    "\13\0\2\20\2\0\1\20\1\0\14\20\1\335\16\20"+
    "\13\0\2\20\2\0\1\20\1\0\2\20\1\336\30\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\337\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\23\20\1\340\7\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\341\32\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\20\1\342\31\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\20\1\343\31\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\344\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\345\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\346\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\23\20\1\347\7\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\350\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\351\32\20\13\0\2\20"+
    "\2\0\1\20\1\0\1\352\32\20\13\0\2\20\2\0"+
    "\1\20\1\0\30\20\1\353\2\20\13\0\2\20\2\0"+
    "\1\20\1\0\14\20\1\354\16\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\355\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\356\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\21\20\1\357\11\20\13\0\2\20\2\0"+
    "\1\20\1\0\16\20\1\360\14\20\13\0\2\20\2\0"+
    "\1\20\1\0\10\20\1\361\22\20\13\0\2\20\2\0"+
    "\1\20\1\0\3\20\1\362\27\20\13\0\2\20\2\0"+
    "\1\20\1\0\7\20\1\363\23\20\13\0\2\20\2\0"+
    "\1\20\1\0\3\20\1\364\27\20\13\0\2\20\2\0"+
    "\1\20\1\0\4\20\1\365\26\20\13\0\2\20\2\0"+
    "\1\20\1\0\22\20\1\366\10\20\13\0\2\20\2\0"+
    "\1\20\1\0\24\20\1\367\6\20\13\0\2\20\2\0"+
    "\1\20\1\0\30\20\1\370\2\20\13\0\2\20\2\0"+
    "\1\20\1\0\1\20\1\371\31\20\13\0\2\20\2\0"+
    "\1\20\1\0\22\20\1\372\10\20\13\0\2\20\2\0"+
    "\1\20\1\0\20\20\1\373\12\20\13\0\2\20\2\0"+
    "\1\20\1\0\1\374\32\20\13\0\2\20\2\0\1\20"+
    "\1\0\23\20\1\375\7\20\13\0\2\20\2\0\1\20"+
    "\1\0\22\20\1\376\10\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\20\1\377\31\20\13\0\2\20\2\0\1\20"+
    "\1\0\4\20\1\u0100\26\20\13\0\2\20\2\0\1\20"+
    "\1\0\17\20\1\u0101\13\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\u0102\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\5\20\1\u0103\25\20\13\0\2\20\2\0\1\20"+
    "\1\0\1\u0104\32\20\13\0\2\20\2\0\1\20\1\0"+
    "\14\20\1\u0105\16\20\13\0\2\20\2\0\1\20\1\0"+
    "\20\20\1\u0106\12\20\13\0\2\20\2\0\1\20\1\0"+
    "\16\20\1\u0107\14\20\13\0\2\20\2\0\1\20\1\0"+
    "\4\20\1\u0108\26\20\13\0\2\20\2\0\1\20\1\0"+
    "\14\20\1\u0109\16\20\13\0\2\20\2\0\1\20\1\0"+
    "\23\20\1\u010a\7\20\13\0\2\20\2\0\1\20\1\0"+
    "\22\20\1\u010b\10\20\13\0\2\20\2\0\1\20\1\0"+
    "\21\20\1\u010c\11\20\13\0\2\20\2\0\1\20\1\0"+
    "\21\20\1\u010d\11\20\13\0\2\20\2\0\1\20\1\0"+
    "\16\20\1\u010e\14\20\13\0\2\20\2\0\1\20\1\0"+
    "\1\u010f\32\20\13\0\2\20\2\0\1\20\1\0\1\u0110"+
    "\32\20\13\0\2\20\2\0\1\20\1\0\22\20\1\u0111"+
    "\10\20\13\0\2\20\2\0\1\20\1\0\5\20\1\u0112"+
    "\25\20\13\0\2\20\2\0\1\20\1\0\5\20\1\u0113"+
    "\25\20\13\0\2\20\2\0\1\20\1\0\7\20\1\u0114"+
    "\23\20\13\0\2\20\2\0\1\20\1\0\13\20\1\u0115"+
    "\17\20\13\0\2\20\2\0\1\20\1\0\1\20\1\u0116"+
    "\31\20\13\0\2\20\2\0\1\20\1\0\1\20\1\u0117"+
    "\31\20\13\0\2\20\2\0\1\20\1\0\1\u0118\32\20"+
    "\13\0\2\20\2\0\1\20\1\0\30\20\1\u0119\2\20"+
    "\13\0\2\20\2\0\1\20\1\0\17\20\1\u011a\13\20"+
    "\13\0\2\20\2\0\1\20\1\0\6\20\1\u011b\24\20"+
    "\13\0\2\20\2\0\1\20\1\0\14\20\1\u011c\16\20"+
    "\13\0\2\20\2\0\1\20\1\0\14\20\1\u011d\16\20"+
    "\13\0\2\20\2\0\1\20\1\0\11\20\1\u011e\21\20"+
    "\13\0\2\20\2\0\1\20\1\0\22\20\1\u011f\10\20"+
    "\13\0\2\20\2\0\1\20\1\0\24\20\1\u0120\6\20"+
    "\13\0\2\20\2\0\1\20\1\0\23\20\1\u0121\7\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\u0122\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\6\20\1\u0123\24\20"+
    "\13\0\2\20\2\0\1\20\1\0\11\20\1\u0124\21\20"+
    "\13\0\2\20\2\0\1\20\1\0\11\20\1\u0125\21\20"+
    "\13\0\2\20\2\0\1\20\1\0\5\20\1\u0126\25\20"+
    "\13\0\2\20\2\0\1\20\1\0\17\20\1\u0127\13\20"+
    "\13\0\2\20\2\0\1\20\1\0\31\20\1\u0128\1\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\20\1\u0129\31\20"+
    "\13\0\2\20\2\0\1\20\1\0\6\20\1\u012a\24\20"+
    "\13\0\2\20\2\0\1\20\1\0\7\20\1\u012b\23\20"+
    "\13\0\2\20\2\0\1\20\1\0\21\20\1\u012c\11\20"+
    "\13\0\2\20\2\0\1\20\1\0\4\20\1\u012d\26\20"+
    "\13\0\2\20\2\0\1\20\1\0\7\20\1\u012e\23\20"+
    "\13\0\2\20\2\0\1\20\1\0\25\20\1\u012f\5\20"+
    "\13\0\2\20\2\0\1\20\1\0\7\20\1\u0130\23\20"+
    "\13\0\2\20\2\0\1\20\1\0\5\20\1\u0131\25\20"+
    "\13\0\2\20\2\0\1\20\1\0\7\20\1\u0132\23\20"+
    "\13\0\2\20\2\0\1\20\1\0\17\20\1\u0133\13\20"+
    "\13\0\2\20\2\0\1\20\1\0\5\20\1\u0134\25\20"+
    "\13\0\2\20\2\0\1\20\1\0\17\20\1\u0135\13\20"+
    "\13\0\2\20\2\0\1\20\1\0\1\u0136\32\20\13\0"+
    "\2\20\2\0\1\20\1\0\24\20\1\u0137\6\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\u0138\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\5\20\1\u0139\25\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\u013a\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\23\20\1\u013b\7\20\13\0"+
    "\2\20\2\0\1\20\1\0\15\20\1\u013c\15\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\u013d\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\21\20\1\u013e\11\20\13\0"+
    "\2\20\2\0\1\20\1\0\14\20\1\u013f\16\20\13\0"+
    "\2\20\2\0\1\20\1\0\22\20\1\u0140\10\20\13\0"+
    "\2\20\2\0\1\20\1\0\15\20\1\u0141\15\20\13\0"+
    "\2\20\2\0\1\20\1\0\22\20\1\u0142\10\20\13\0"+
    "\2\20\2\0\1\20\1\0\1\u0143\32\20\13\0\2\20"+
    "\2\0\1\20\1\0\5\20\1\u0144\25\20\13\0\2\20"+
    "\2\0\1\20\1\0\1\20\1\u0145\31\20\13\0\2\20"+
    "\2\0\1\20\1\0\4\20\1\u0146\26\20\13\0\2\20"+
    "\2\0\1\20\1\0\22\20\1\u0147\10\20\13\0\2\20"+
    "\2\0\1\20\1\0\23\20\1\u0148\7\20\13\0\2\20"+
    "\2\0\1\20\1\0\11\20\1\u0149\21\20\13\0\2\20"+
    "\2\0\1\20\1\0\17\20\1\u014a\13\20\13\0\2\20"+
    "\2\0\1\20\1\0\11\20\1\u014b\21\20\13\0\2\20"+
    "\2\0\1\20\1\0\21\20\1\u014c\11\20\13\0\2\20"+
    "\2\0\1\20\1\0\24\20\1\u014d\6\20\13\0\2\20"+
    "\2\0\1\20\1\0\17\20\1\u014e\13\20\13\0\2\20"+
    "\2\0\1\20\1\0\5\20\1\u014f\25\20\13\0\2\20"+
    "\2\0\1\20\1\0\21\20\1\u0150\11\20\13\0\2\20"+
    "\2\0\1\20\1\0\16\20\1\u0151\14\20\13\0\2\20"+
    "\2\0\1\20\1\0\3\20\1\u0152\27\20\13\0\2\20"+
    "\2\0\1\20\1\0\3\20\1\u0153\27\20\13\0\2\20"+
    "\2\0\1\20\1\0\23\20\1\u0154\7\20\13\0\2\20"+
    "\2\0\1\20\1\0\5\20\1\u0155\25\20\13\0\2\20"+
    "\2\0\1\20\1\0\17\20\1\u0156\13\20\13\0\2\20"+
    "\2\0\1\20\1\0\1\u0157\32\20\13\0\2\20\2\0"+
    "\1\20\1\0\21\20\1\u0158\11\20\13\0\2\20\2\0"+
    "\1\20\1\0\4\20\1\u0159\26\20\13\0\2\20\2\0"+
    "\1\20\1\0\11\20\1\u015a\21\20\13\0\2\20\2\0"+
    "\1\20\1\0\11\20\1\u015b\21\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\u015c\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\21\20\1\u015d\11\20\13\0\2\20\2\0"+
    "\1\20\1\0\22\20\1\u015e\10\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\u015f\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\3\20\1\u0160\27\20\13\0\2\20\2\0"+
    "\1\20\1\0\23\20\1\u0161\7\20\13\0\2\20\2\0"+
    "\1\20\1\0\17\20\1\u0162\13\20\13\0\2\20\2\0"+
    "\1\20\1\0\21\20\1\u0163\11\20\13\0\2\20\2\0"+
    "\1\20\1\0\11\20\1\u0164\21\20\13\0\2\20\2\0"+
    "\1\20\1\0\5\20\1\u0165\25\20\13\0\2\20\2\0"+
    "\1\20\1\0\22\20\1\u0166\10\20";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14212];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\2\1\5\11\1\1\2\11\15\1\1\11"+
    "\1\0\u0148\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ProjectViewLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 2:
            { return ProjectViewTokenTypes.TAB;
            }
          // fall through
          case 41: break;
          case 3:
            { return ProjectViewTokenTypes.LINE_BREAK;
            }
          // fall through
          case 42: break;
          case 4:
            { return ProjectViewTokenTypes.SPACE;
            }
          // fall through
          case 43: break;
          case 5:
            { return ProjectViewTokenTypes.STRING;
            }
          // fall through
          case 44: break;
          case 6:
            { return ProjectViewTokenTypes.COMMENT;
            }
          // fall through
          case 45: break;
          case 7:
            { return ProjectViewTokenTypes.MULT;
            }
          // fall through
          case 46: break;
          case 8:
            { return ProjectViewTokenTypes.MINUS;
            }
          // fall through
          case 47: break;
          case 9:
            { return ProjectViewTokenTypes.DOT;
            }
          // fall through
          case 48: break;
          case 10:
            { return ProjectViewTokenTypes.DIV;
            }
          // fall through
          case 49: break;
          case 11:
            { return ProjectViewTokenTypes.INT;
            }
          // fall through
          case 50: break;
          case 12:
            { return ProjectViewTokenTypes.COLON;
            }
          // fall through
          case 51: break;
          case 13:
            { return ProjectViewTokenTypes.EQ;
            }
          // fall through
          case 52: break;
          case 14:
            { return ProjectViewTokenTypes.IDENTIFIER;
            }
          // fall through
          case 53: break;
          case 15:
            { return ProjectViewTokenTypes.BOOL;
            }
          // fall through
          case 54: break;
          case 16:
            { return ProjectViewTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 55: break;
          case 17:
            { return ProjectViewTokenTypes.TARGETS_KEYWORD;
            }
          // fall through
          case 56: break;
          case 18:
            { return ProjectViewTokenTypes.SHARD_SYNC_KEYWORD;
            }
          // fall through
          case 57: break;
          case 19:
            { return ProjectViewTokenTypes.SYNC_FLAGS_KEYWORD;
            }
          // fall through
          case 58: break;
          case 20:
            { return ProjectViewTokenTypes.TEST_FLAGS_KEYWORD;
            }
          // fall through
          case 59: break;
          case 21:
            { return ProjectViewTokenTypes.BUILD_FLAGS_KEYWORD;
            }
          // fall through
          case 60: break;
          case 22:
            { return ProjectViewTokenTypes.DIRECTORIES_KEYWORD;
            }
          // fall through
          case 61: break;
          case 23:
            { return ProjectViewTokenTypes.BAZEL_BINARY_KEYWORD;
            }
          // fall through
          case 62: break;
          case 24:
            { return ProjectViewTokenTypes.IMPORT_DEPTH_KEYWORD;
            }
          // fall through
          case 63: break;
          case 25:
            { return ProjectViewTokenTypes.TEST_SOURCES_KEYWORD;
            }
          // fall through
          case 64: break;
          case 26:
            { return ProjectViewTokenTypes.ENABLED_RULES_KEYWORD;
            }
          // fall through
          case 65: break;
          case 27:
            { return ProjectViewTokenTypes.WORKSPACE_TYPE_KEYWORD;
            }
          // fall through
          case 66: break;
          case 28:
            { return ProjectViewTokenTypes.ANDROID_MIN_SDK_KEYWORD;
            }
          // fall through
          case 67: break;
          case 29:
            { return ProjectViewTokenTypes.EXCLUDE_LIBRARY_KEYWORD;
            }
          // fall through
          case 68: break;
          case 30:
            { return ProjectViewTokenTypes.TS_CONFIG_RULES_KEYWORD;
            }
          // fall through
          case 69: break;
          case 31:
            { return ProjectViewTokenTypes.PRODUCE_TRACE_LOG_KEYWORD;
            }
          // fall through
          case 70: break;
          case 32:
            { return ProjectViewTokenTypes.TARGET_SHARD_SIZE_KEYWORD;
            }
          // fall through
          case 71: break;
          case 33:
            { return ProjectViewTokenTypes.JAVA_LANGUAGE_LEVEL_KEYWORD;
            }
          // fall through
          case 72: break;
          case 34:
            { return ProjectViewTokenTypes.ADDITIONAL_LANGUAGES_KEYWORD;
            }
          // fall through
          case 73: break;
          case 35:
            { return ProjectViewTokenTypes.ANDROID_SDK_PLATFORM_KEYWORD;
            }
          // fall through
          case 74: break;
          case 36:
            { return ProjectViewTokenTypes.BUILD_MANUAL_TARGETS_KEYWORD;
            }
          // fall through
          case 75: break;
          case 37:
            { return ProjectViewTokenTypes.IMPORT_RUN_CONFIGURATION_KEYWORD;
            }
          // fall through
          case 76: break;
          case 38:
            { return ProjectViewTokenTypes.DERIVE_TARGETS_FROM_DIRECTORIES_KEYWORD;
            }
          // fall through
          case 77: break;
          case 39:
            { return ProjectViewTokenTypes.GENERATED_ANDROID_RESOURCE_DIRECTORIES_KEYWORD;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
