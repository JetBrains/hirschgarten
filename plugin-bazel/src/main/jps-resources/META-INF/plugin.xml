<idea-plugin>
  <id>org.jetbrains.bazel</id>
  <category>Build Tools</category>
  <vendor>JetBrains</vendor>
  <name>Bazel (EAP)</name>
  <description><![CDATA[
  <p>Bazel by JetBrains (EAP) for IntelliJ IDEA</p>

  <p>This plugin is available as EAP (Early Access Program). This means that it may already be useful, but many
  corner cases might not be supported yet.</p>

  <p>Main features</p>
  <ul>
      <li>Open Bazel projects in IntelliJ IDEA</li>
      <li>Supports Java and Kotlin</li>
      <li>Build, run, test, debug Bazel targets</li>
      <li>Starlark syntax, completion, navigation support</li>
      <li>Starlark debugging</li>
      <li>Run and debug tests running in Bazel</li>
  </ul>

  <p>To learn more about how to use the features, please check <a href="https://www.jetbrains.com/help/idea/2024.3/bazel.html">the documentation page</a>.</p>
  ]]>
  </description>

  <dependencies>
    <plugin id="com.intellij.modules.lang"/>
    <module name="intellij.platform.searchEverywhere"/>
  </dependencies>

  <depends optional="true" config-file="withCodeWithMe.xml">com.jetbrains.codeWithMe</depends>
  <depends optional="true" config-file="withCoverage.xml">com.intellij.modules.coverage</depends>
  <depends optional="true" config-file="withCpp.xml">com.intellij.clion</depends>
  <depends optional="true" config-file="withDevKit.xml">DevKit</depends>
  <depends optional="true" config-file="withGo.xml">org.jetbrains.plugins.go</depends>
  <depends optional="true" config-file="withIdeStarter.xml">com.jetbrains.performancePlugin</depends>
  <depends optional="true" config-file="withJava.xml">com.intellij.modules.java</depends>
  <depends optional="true" config-file="withJunit.xml">JUnit</depends>
  <depends optional="true" config-file="withKotlin.xml">org.jetbrains.kotlin</depends>
  <depends optional="true" config-file="withPython.xml">com.intellij.modules.python</depends>
  <depends optional="true" config-file="withTerminal.xml">org.jetbrains.plugins.terminal</depends>

  <extensionPoints>
    <extensionPoint qualifiedName="org.jetbrains.bazel.sourceTypeIconProvider"
                    interface="org.jetbrains.bazel.utils.SourceTypeIconProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.scalaSdkExtension"
                    interface="org.jetbrains.bazel.scala.sdk.ScalaSdkExtension"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.androidFacetEntityUpdaterExtension"
                    interface="org.jetbrains.bazel.magicmetamodel.impl.workspacemodel.impl.updaters.AndroidFacetEntityUpdaterExtension"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.runHandlerProvider"
                    interface="org.jetbrains.bazel.run.RunHandlerProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.projectAwareExtension"
                    interface="org.jetbrains.bazel.projectAware.ProjectAwareExtension"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.runConfigurationExtension"
                    interface="org.jetbrains.bazel.run.config.RunConfigurationExtensionManager"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.projectSyncHook"
                    interface="org.jetbrains.bazel.sync.ProjectSyncHook"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.projectPreSyncHook"
                    interface="org.jetbrains.bazel.sync.ProjectPreSyncHook"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.projectPostSyncHook"
                    interface="org.jetbrains.bazel.sync.ProjectPostSyncHook"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.projectStructureProvider"
                    interface="org.jetbrains.bazel.sync.projectStructure.ProjectStructureProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.additionalProjectTaskRunnerProvider"
                    interface="org.jetbrains.bazel.buildTask.AdditionalProjectTaskRunnerProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.treeStructureSettingsExtension"
                    interface="org.jetbrains.bazel.ui.projectTree.TreeStructureSettingsProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.jvmBinaryJarsExtension"
                    interface="org.jetbrains.bazel.extensionPoints.JvmBinaryJarsExtension"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.localJvmRunnerRunConfigurationProvider"
                    interface="org.jetbrains.bazel.runnerAction.LocalJvmRunnerRunConfigurationProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.kotlinFacetEntityUpdater"
                    interface="org.jetbrains.bazel.magicmetamodel.impl.workspacemodel.impl.updaters.KotlinFacetEntityUpdater"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.bazelCoverageClassNodeDecoratorPsiElementClassifier"
                    interface="org.jetbrains.bazel.run.coverage.BazelCoverageClassNodeDecoratorPsiElementClassifier"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.unresolvedImportChecker"
                    interface="org.jetbrains.bazel.ui.notifications.UnresolvedImportChecker"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.psiElementConfigurationLocator"
                    interface="org.jetbrains.bazel.junit.PsiElementConfigurationLocator"
                    dynamic="true"/>
    <extensionPoint qualifiedName="org.jetbrains.bazel.targetKindProvider"
                    interface="org.jetbrains.bazel.sync.TargetKindProvider"
                    dynamic="true"/>
  </extensionPoints>

  <!-- it needs to be here, not in withKotlin.xml because plugin loader checks only this file -->
  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <supportsKotlinPluginMode supportsK1="true" supportsK2="true"/>
  </extensions>

  <extensions defaultExtensionNs="org.jetbrains.bazel">
    <projectPreSyncHook implementation="org.jetbrains.bazel.flow.open.RegenerateProjectViewFileContentPreSyncHook"/>

    <projectSyncHook implementation="org.jetbrains.bazel.flow.sync.DirectoriesSyncHook" id="DirectoriesSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.languages.starlark.repomapping.BazelRepoMappingSyncHook"
                     id="BazelRepoMappingSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.run.import.ImportRunConfigurationsSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.fastbuild.ToolchainInfoSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.flow.sync.PathSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.ui.widgets.tool.window.components.BazelToolwindowSyncHook"
                     order="after BazelRepoMappingSyncHook"/>
    <projectSyncHook implementation="org.jetbrains.bazel.target.sync.TargetUtilsSyncHook" id="TargetUtilsSyncHook"/>

    <projectPostSyncHook implementation="org.jetbrains.bazel.ui.widgets.fileTargets.BazelFileTargetsWidgetSyncHook"/>
    <projectPostSyncHook implementation="org.jetbrains.bazel.flow.sync.RemoveExcludedVcsMappingsSyncHook"/>
    <projectPostSyncHook implementation="org.jetbrains.bazel.sync.SyncCache$ClearSyncCache"/>


    <projectStructureProvider
      implementation="org.jetbrains.bazel.sync.projectStructure.workspaceModel.WorkspaceModelProjectStructureProvider"
      order="after TargetUtilsProjectStructureProvider"/>
    <projectStructureProvider implementation="org.jetbrains.bazel.target.sync.projectStructure.TargetUtilsProjectStructureProvider"
                              id="TargetUtilsProjectStructureProvider"/>

    <runHandlerProvider implementation="org.jetbrains.bazel.jvm.run.JvmRunHandler$JvmRunHandlerProvider"
                        id="JvmRunHandlerProvider"/>
    <runHandlerProvider
      implementation="org.jetbrains.bazel.jvm.run.JvmTestHandler$JvmTestHandlerProvider"
      id="JvmTestHandlerProvider"/>
    <runHandlerProvider implementation="org.jetbrains.bazel.run.handler.GenericRunHandlerProvider"
                        order="last"/>
    <runHandlerProvider implementation="org.jetbrains.bazel.run.handler.GenericTestHandlerProvider"
                        order="last"/>
    <projectAwareExtension
      implementation="org.jetbrains.bazel.flow.open.BazelProjectAwareExtension"/>

    <additionalProjectTaskRunnerProvider
      implementation="org.jetbrains.bazel.hotswap.BazelHotSwapProjectTaskRunnerProvider"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <registryKey defaultValue="false"
                 description="Build project on initial project sync"
                 key="bsp.build.project.on.sync"/>
    <registryKey defaultValue="true"
                 description="Python modules support"
                 key="bsp.python.support"/>
    <registryKey defaultValue="false"
                 description="Android modules support"
                 key="bsp.android.support"/>
    <registryKey defaultValue="false"
                 description="Go modules support"
                 key="bsp.go.support"/>
    <registryKey defaultValue="true"
                 description="Shorten module/library names by hashing the first parts and retaining the others"
                 key="bsp.shorten.module.library.names"/>
    <registryKey defaultValue="false"
                 description="Wrap libraries inside modules to form a proper dependency graph between libraries. Enabled by default with K2 mode"
                 key="bsp.wrap.libraries.inside.modules"/>
    <registryKey defaultValue="true"
                 description="Execute second phase of the phased sync. `bsp.use.phased.sync` has to be enabled to use this flag. It should be used only for testing purposes."
                 key="bsp.execute.second.phase.on.sync"/>
    <registryKey defaultValue=""
                 description="Add dependencies to so-called &quot;dummy&quot; modules to make Java resolve work correctly. Set to either true, false, or leave empty for the default value."
                 key="bsp.add.dummy.module.dependencies"/>
    <registryKey defaultValue="true"
                 description="Exclude class files inside jars (and source files inside source jars) if they match up with a source file in the current project."
                 key="bsp.exclude.compiled.source.code.inside.jars"/>
    <!-- https://youtrack.jetbrains.com/issue/BAZEL-1734 -->
    <registryKey defaultValue="false"
                 description="Enable partial sync action for a target."
                 key="bsp.enable.partial.sync"/>
    <registryKey defaultValue="false"
                 description="Enables a fast compile mechanism for Java by delegating directly to the Bazel builder"
                 key="bazel.enable.jvm.fastbuild"/>
    <registryKey defaultValue="25"
                 description="Maximum number of attempts to connect with the Starlark debugger socket"
                 key="bazel.starlark.debug.socket.attempts"/>
    <registryKey defaultValue="400"
                 description="Interval (in milliseconds) between attempts to connect with the Starlark debugger socket"
                 key="bazel.starlark.debug.socket.interval"/>
    <registryKey defaultValue="2"
                 description="How many levels to go down when scanning the project for Bazel symlinks to exclude"
                 key="bazel.symlink.scan.max.depth"/>
    <registryKey defaultValue="true"
                 description="Force Bazel to shut down before each shard build to prevent Bazel memory leak issue"
                 key="bazel.shutdown.before.shard.build"/>
    <registryKey defaultValue="false"
                 description="Enable a custom class finder for Java instead of &quot;dummy&quot; modules"
                 key="bazel.enable.custom.java.class.finder"/>
    <registryKey defaultValue="true"
                 description="Add the whole directory to IntelliJ project model instead of individual files when it's possible"
                 key="bazel.merge.source.roots"/>
    <registryKey defaultValue="true"
                 description="Check and warn about shared sources in the project by showing the &quot;Shared sources detected&quot; notification"
                 key="bazel.check.shared.sources"/>
    <registryKey defaultValue="false"
                 description="Whether the Bazel plugin should import automatically even if .idea or another project model (e.g., Gradle) exists already"
                 key="bazel.project.auto.open.if.present"/>

    <!--Restart required here to clear cache-->
    <registryKey defaultValue="false"
                 description="Bazel Query autocompletion in new 2024 terminal"
                 key="bazel.query.terminal.completion"
                 restartRequired="true"/>

    <activityTracker implementation="org.jetbrains.bazel.startup.BazelStartupActivityTracker"/>

    <projectService serviceInterface="com.intellij.openapi.project.BaseProjectDirectories"
                    serviceImplementation="org.jetbrains.bazel.services.BazelBaseProjectDirectories"
                    overrides="true"/>
    <moduleService serviceInterface="com.intellij.openapi.roots.ModuleFileIndex"
                   serviceImplementation="org.jetbrains.bazel.services.BazelModuleFileIndex"
                   overrides="true"/>

    <commandLineInspectionProjectConfigurator
      implementation="org.jetbrains.bazel.startup.BazelCommandLineInspectionConfigurator"/>
    <configurationType implementation="org.jetbrains.bazel.run.config.BazelRunConfigurationType"/>

    <notificationGroup id="Bazel" displayType="STICKY_BALLOON"/>

    <workspaceModel.fileIndexContributor
      implementation="org.jetbrains.bazel.workspace.BazelProjectDirectoriesWorkspaceFileIndexContributor"/>
    <workspaceModel.fileIndexContributor
      implementation="org.jetbrains.bazel.workspace.DummyModuleExclusionWorkspaceFileIndexContributor"/>
    <ignoredFileProvider implementation="org.jetbrains.bazel.workspace.BazelProjectExcludesIgnoredFileProvider"/>
    <moduleType id="BAZEL_DUMMY_MODULE_TYPE"
                implementationClass="org.jetbrains.bazel.magicmetamodel.impl.workspacemodel.impl.updaters.transformers.BazelDummyModuleType"/>
    <workspaceModel.fileIndexContributor
      implementation="org.jetbrains.bazel.workspace.CompiledSourceCodeInsideJarExcludeWorkspaceFileIndexContributor"/>
    <workspaceModel.fileIndexContributor
      implementation="org.jetbrains.bazel.workspace.packageMarker.PackageMarkerEntityWorkspaceFileIndexContributor"/>

    <postStartupActivity
      implementation="org.jetbrains.bazel.startup.BazelStartupActivity"/>

    <treeStructureProvider implementation="org.jetbrains.bazel.ui.projectTree.BazelTreeStructureProvider"/>
    <projectViewNodeDecorator
      implementation="org.jetbrains.bazel.ui.projectTree.BazelProjectViewNodeDecorator"/>
    <projectTaskRunner
      id="BazelProjectTaskRunner"
      implementation="org.jetbrains.bazel.buildTask.BazelProjectTaskRunner"/>
    <projectTaskRunner implementation="org.jetbrains.bazel.fastbuild.BazelFastBuildProjectTaskRunner"
                       order="before BazelProjectTaskRunner"/>
    <programRunner implementation="org.jetbrains.bazel.jvm.run.BazelJvmDebugRunner"/>

    <directoryProjectConfigurator
      implementation="org.jetbrains.bazel.flow.open.CounterPlatformProjectConfigurator"
      order="last"/>
    <!--    <projectService serviceInterface="com.intellij.openapi.roots.SingleFileSourcesTracker"-->
    <!--                    serviceImplementation="org.jetbrains.bazel.services.SingleFileSourcesTrackerImpl"-->
    <!--                    overrides="true"/>-->
    <statusBarWidgetFactory id="BazelFileTargetsWidget"
                            implementation="org.jetbrains.bazel.ui.widgets.fileTargets.BazelFileTargetsWidgetFactory"/>

    <toolWindowAllowlist id="Bazel"/>
    <toolWindowExtractor
      implementation="org.jetbrains.bazel.ui.widgets.tool.window.all.targets.BazelToolWindowViewModelExtractor"/>

    <consoleFilterProvider
      implementation="org.jetbrains.bazel.ui.console.filter.AbsoluteAndRelativePathsConsoleFilterProvider"/>

    <notificationGroup displayType="BALLOON" id="Bazel Plugin"/>
    <editorNotificationProvider
      implementation="org.jetbrains.bazel.ui.notifications.BuildAndResyncOnUnresolvedImportNotificationsProvider"/>

    <statistics.projectUsagesCollector implementation="org.jetbrains.bazel.fus.BazelProjectStatisticsCollector"/>

    <disableCompilationDependenciesResolutionTask
      implementation="org.jetbrains.bazel.jpsCompilation.utils.DisableCompilationDependenciesResolutionImpl"/>
    <projectService serviceInterface="org.jetbrains.bazel.server.connection.BazelServerService"
                    serviceImplementation="org.jetbrains.bazel.server.connection.BazelServerServiceImpl"/>

    <consoleFilterProvider implementation="org.jetbrains.bazel.ui.console.BazelBuildTargetConsoleFilterProvider"/>

    <attachSourcesProvider implementation="org.jetbrains.bazel.ui.notifications.BazelAttachSourcesProvider"/>
    <projectOpenProcessor
      implementation="org.jetbrains.bazel.flow.open.BazelProjectOpenProcessor"/>
    <postStartupActivity
      implementation="org.jetbrains.bazel.flow.open.OpenBrokenBazelProjectStartupActivity"/>
    <postStartupActivity
      implementation="org.jetbrains.bazel.flow.open.OpenBazelProjectReplacingOtherProjectModels"/>
    <notificationGroup displayType="BALLOON" id="Bazel slow plugins warning"/>

    <externalSystemUnlinkedProjectAware
      id="Bazel"
      implementation="org.jetbrains.bazel.flow.open.BazelUnlinkedProjectAware"/>
    <directoryProjectConfigurator
      implementation="org.jetbrains.bazel.flow.open.exclude.BazelSymlinkExcludeDirectoryProjectConfigurator"
      order="after PlatformProjectConfigurator"/>
    <externalIconProvider
      key="bazel"
      implementationClass="org.jetbrains.bazel.flow.open.BazelExternalSystemIconProvider"/>
    <projectModelModifier implementation="org.jetbrains.bazel.flow.modify.BazelProjectModelModifier"/>

    <fileType
      name="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.StarlarkFileType"
      fieldName="INSTANCE"
      language="Starlark"
      fileNames="BUILD;WORKSPACE"
      extensions="bzl;bazel;bzlmod;star"
      patterns="*.bzl.template"/>
    <lang.fileViewProviderFactory
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.psi.StarlarkViewProviderFactory"/>
    <enterBetweenBracesDelegate
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.indentation.StarlarkEnterBetweenBracesHandler"/>
    <lang.parserDefinition
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.parser.StarlarkParserDefinition"/>
    <lang.syntaxHighlighterFactory
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.highlighting.StarlarkSyntaxHighlighterFactory"/>
    <lang.commenter
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.commenter.StarlarkCommenter"/>
    <lang.braceMatcher
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.matching.StarlarkBraceMatcher"/>
    <lang.quoteHandler
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.matching.StarlarkQuoteHandler"/>
    <lang.findUsagesProvider
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.findusages.StarlarkFindUsagesProvider"/>
    <lang.foldingBuilder language="Starlark"
                         implementationClass="org.jetbrains.bazel.languages.starlark.folding.StarlarkFoldingBuilder"/>
    <lineIndentProvider
      implementation="org.jetbrains.bazel.languages.starlark.indentation.StarlarkLineIndentProvider"/>
    <colorSettingsPage
      implementation="org.jetbrains.bazel.languages.starlark.highlighting.StarlarkColorSettingsPage"/>
    <additionalTextAttributes
      scheme="Default"
      file="colorSchemes/StarlarkDefault.xml"/>
    <additionalTextAttributes
      scheme="Darcula"
      file="colorSchemes/StarlarkDarcula.xml"/>
    <annotator
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.annotation.StarlarkDeclarationAnnotator"/>
    <annotator
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.annotation.StarlarkFunctionAnnotator"/>
    <annotator
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.annotation.StarlarkStringAnnotator"/>
    <annotator
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.annotation.StarlarkLoadAnnotator"/>
    <completion.confidence
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.StarlarkCompletionConfidence"/>
    <completion.contributor
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.BazelGlobalFunctionCompletionContributor"/>
    <completion.contributor
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.StarlarkParamsCompletionContributor"/>
    <completion.contributor
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.StarlarkArgumentCompletionContributor"/>
    <completion.contributor
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.BazelNativeRulesCompletionContributor"/>
    <completion.contributor
      language="Starlark"
      implementationClass="org.jetbrains.bazel.languages.starlark.completion.BazelNativeRulesArgumentCompletionContributor"/>
    <editorTabTitleProvider
      implementation="org.jetbrains.bazel.ui.tabs.BazelEditorTabTitleProvider"/>
    <extendWordSelectionHandler
      implementation="org.jetbrains.bazel.languages.starlark.actions.StarlarkStringLiteralSelectioner"/>
    <fileType
      name="ProjectView"
      implementationClass="org.jetbrains.bazel.languages.projectview.base.ProjectViewFileType"
      fieldName="INSTANCE"
      language="ProjectView"
      extensions="bazelproject"/>
    <lang.syntaxHighlighterFactory
      language="ProjectView"
      implementationClass="org.jetbrains.bazel.languages.projectview.highlighting.ProjectViewSyntaxHighlighterFactory"/>
    <lang.commenter
      language="ProjectView"
      implementationClass="org.jetbrains.bazel.languages.projectview.commenter.ProjectViewCommenter"/>
    <langCodeStyleSettingsProvider
      implementation="org.jetbrains.bazel.languages.projectview.formatting.ProjectViewLanguageCodeStyleSettingsProvider"/>
    <enterHandlerDelegate implementation="org.jetbrains.bazel.languages.projectview.formatting.ProjectViewEnterHandler"/>
    <lang.parserDefinition
      language="ProjectView"
      implementationClass="org.jetbrains.bazel.languages.projectview.parser.ProjectViewParserDefinition"/>

    <formattingService
      implementation="org.jetbrains.bazel.languages.starlark.formatting.StarlarkFormattingService"/>
    <actionOnSave id="StarlarkFormattingActionOnSave"
                  implementation="org.jetbrains.bazel.languages.starlark.formatting.StarlarkFormattingActionOnSave"/>

    <runLineMarkerContributor implementationClass="org.jetbrains.bazel.ui.gutters.StarlarkRunLineMarkerContributor"
                              language="Starlark"/>

    <fileType
      name="BazelQuery"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.BazelQueryFileType"
      fieldName="INSTANCE"
      language="BazelQuery"

      extensions="bazelquery"
    />

    <lang.parserDefinition
      language="BazelQuery"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.parser.BazelQueryParserDefinition"/>

    <lang.syntaxHighlighterFactory
      language="BazelQuery"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.highlighting.BazelQuerySyntaxHighlighterFactory"/>

    <completion.contributor
      language="BazelQuery"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.completion.BazelQueryCompletionContributor"/>


    <fileType
      name="BazelQueryFlags"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.BazelQueryFlagsFileType"
      fieldName="INSTANCE"
      language="BazelQueryFlags"

      extensions="bazelqueryflags"
    />

    <lang.parserDefinition
      language="BazelQueryFlags"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.parser.BazelQueryFlagsParserDefinition"/>

    <lang.syntaxHighlighterFactory
      language="BazelQueryFlags"
      implementationClass="org.jetbrains.bazel.languages.bazelquery.highlighting.BazelQuerySyntaxHighlighterFactory"/>

    <fileType
      name="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.BazelrcFileType"
      fieldName="INSTANCE"
      language="Bazelrc"
      fileNames=".bazelrc"
      extensions="bazelrc"
    />

    <lang.syntaxHighlighterFactory
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.highlighting.BazelrcSyntaxHighlighterFactory"/>

    <lang.parserDefinition
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.parser.BazelrcParserDefinition"/>

    <lang.commenter
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.commenter.BazelrcCommenter"/>

    <lang.quoteHandler
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.matching.BazelrcQuoteHandler"/>

    <annotator
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.annotation.BazelrcFlagAnnotator"/>

    <completion.contributor
      language="Bazelrc"
      implementationClass="org.jetbrains.bazel.languages.bazelrc.completion.BazelrcCompletionContributor"/>

    <projectConfigurable
      parentId="build.tools"
      id="bazel.project.settings"
      displayName="Bazel"
      instance="org.jetbrains.bazel.ui.settings.BazelProjectSettingsConfigurable"
      provider="org.jetbrains.bazel.ui.settings.BazelProjectSettingsConfigurableProvider">
      <configurable
        id="bazel.experimental.project.settings"
        displayName="Experimental Settings"
        instance="org.jetbrains.bazel.ui.settings.BazelExperimentalProjectSettingsConfigurable"
        provider="org.jetbrains.bazel.ui.settings.BazelExperimentalProjectSettingsConfigurableProvider"/>
    </projectConfigurable>

    <applicationConfigurable
      parentId="bazel.project.settings"
      id="bazel.application.settings"
      displayName="Advanced Settings"
      instance="org.jetbrains.bazel.ui.settings.BazelApplicationSettingsConfigurable"
      provider="org.jetbrains.bazel.ui.settings.BazelApplicationSettingsConfigurableProvider"
    />

    <obsoleteStorage file="$WORKSPACE_FILE$" isProjectLevel="true">
      <components>
        <component>TargetUtils</component>
      </components>
    </obsoleteStorage>
    <projectViewNodeDecorator
      implementation="org.jetbrains.bazel.settings.ProjectViewFileNodeDecorator"/>
    <referencesSearch
      implementation="org.jetbrains.bazel.languages.starlark.findusages.StarlarkStringUsageSearcher"/>
    <usageTypeProvider
      implementation="org.jetbrains.bazel.languages.starlark.findusages.StarlarkUsageTypeProvider"/>
    <xdebugger.breakpointType implementation="org.jetbrains.bazel.debug.platform.StarlarkBreakpointType"/>
    <programRunner implementation="org.jetbrains.bazel.debug.configuration.StarlarkDebugRunner"/>
    <search.optionContributor implementation="org.jetbrains.bazel.ui.settings.BazelSearchOptionsContributor"/>
    <searchEverywhereContributor implementation="org.jetbrains.bazel.ui.widgets.LabelSearchEverywhereContributor$Factory"/>
    <searchEverywhere.itemsProviderFactory implementation="org.jetbrains.bazel.searchEverywhere.SeLabelProviderFactory"/>
  </extensions>

  <actions>
    <action class="org.jetbrains.bazel.ui.projectTree.action.RunAllTestsAction" id="BazelRunAllTestsAction">
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>
    <action id="Bazel.ResyncAction" class="org.jetbrains.bazel.action.registered.ResyncAction"
            icon="/icons/resync.svg"/>
    <action id="Bazel.BuildAndResyncAction"
            class="org.jetbrains.bazel.action.registered.BuildAndResyncAction"
            icon="/icons/buildAndResync.svg"/>
    <action id="Bazel.NewBazelPackageAction"
            class="org.jetbrains.bazel.action.registered.NewBazelPackageAction"
            text="New Bazel Package">
      <add-to-group group-id="NewGroup" relative-to-action="NewDir" anchor="after"/>
    </action>

    <group id="Bazel.ActionsToolbar">
      <reference id="Bazel.ResyncAction"/>
      <reference id="Bazel.BuildAndResyncAction"/>
    </group>

    <action class="org.jetbrains.bazel.settings.LoadProjectViewFileAction"
            icon="/icons/bazel.svg">
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>
    <action class="org.jetbrains.bazel.ui.widgets.CopyTargetIdAction"
            icon="/icons/bazel.svg">
      <add-to-group group-id="EditorPopupMenu"/>
      <add-to-group group-id="EditorTabPopupMenu"/>
      <!-- This shortcut doesn't mean anything, it's just not taken by anyone and is easy to type -->
      <keyboard-shortcut first-keystroke="control alt G" second-keystroke="H" keymap="$default"/>
    </action>
    <action class="org.jetbrains.bazel.ui.widgets.BazelJumpToBuildFileAction">
      <add-to-group group-id="EditorPopupMenu"/>
      <add-to-group group-id="EditorTabPopupMenu"/>
      <keyboard-shortcut first-keystroke="control alt G" second-keystroke="J" keymap="$default"/>
    </action>
    <action id="Bazel.ImportExternalProject"
            class="org.jetbrains.bazel.flow.open.actions.LinkBazelProjectFromScriptAction">
      <add-to-group group-id="ProjectViewPopupMenuSettingsGroup" anchor="last"/>
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
    </action>
  </actions>

  <applicationListeners>
    <listener class="org.jetbrains.bazel.workspace.AssignFileToModuleListener"
              topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
    <listener class="org.jetbrains.bazel.workspace.packageMarker.PackageMarkerEntityListener"
              topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
  </applicationListeners>
</idea-plugin>
