// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelquery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelqueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")

class _BazelqueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int EXPR_DQ = 4;
  public static final int EXPR_SQ = 6;
  public static final int WORD_DQ = 8;
  public static final int WORD_SQ = 10;
  public static final int FLAG = 12;
  public static final int VALUE = 14;
  public static final int PRE_VALUE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\14\6\1\16\2\0\1\17\2\0"+
    "\1\20\33\6\1\21\1\6\1\22\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\35\1\52\1\53"+
    "\1\54\3\0\1\6\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\10\1\0\1\17\15\10\1\20\3\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\24\1\26\1\24\1\26"+
    "\1\24\1\27\1\4\4\0\6\10\1\30\13\10\2\0"+
    "\2\23\1\31\7\0\11\10\1\32\2\10\1\33\5\10"+
    "\1\34\1\35\11\23\1\36\1\37\2\0\2\10\1\40"+
    "\7\10\1\40\2\10\13\23\1\41\1\42\7\10\1\13"+
    "\1\10\13\23\1\10\1\15\6\10\13\23\4\10\13\23"+
    "\2\10\6\23\1\43\4\23\1\17\1\10\13\23\1\10"+
    "\13\23\1\10\13\23\1\10\11\23\1\43\1\23\1\10"+
    "\11\23\1\10\7\23\1\10\6\23\1\10\53\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\264\0\u0168\0\264\0\u0195\0\264\0\264\0\u01c2\0\u01ef"+
    "\0\u021c\0\264\0\u0249\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\u0276\0\u02a3\0\264\0\u02d0\0\u02fd\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\264\0\u0519\0\u01c2\0\u0546\0\264\0\u0573\0\u05a0"+
    "\0\264\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\264"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\264\0\u06ae\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0249\0\u0e3d\0\u0e6a\0\u0249"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\264\0\264\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\264\0\264\0\u110d\0\u113a\0\u1167\0\u1194\0\u0249\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\264\0\264\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u0249\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u0249\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u0249\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490"+
    "\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8"+
    "\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8"+
    "\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98"+
    "\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00"+
    "\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68"+
    "\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0"+
    "\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138"+
    "\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0"+
    "\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408"+
    "\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\1\13\1\14\1\15\1\16\6\11\1\15"+
    "\1\11\1\15\1\17\1\11\2\15\1\20\16\15\1\21"+
    "\10\15\1\0\3\22\2\0\1\23\1\0\1\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\1\34\1\23\1\35\1\36\1\23\1\37\1\40\1\41"+
    "\2\23\1\42\1\23\1\43\1\44\5\23\1\45\1\46"+
    "\1\47\1\50\1\51\3\23\1\0\3\12\1\52\1\0"+
    "\1\23\1\53\1\24\1\25\1\0\1\26\1\27\1\30"+
    "\1\23\1\31\1\32\1\54\1\34\1\23\1\35\1\36"+
    "\1\23\1\37\1\40\1\41\2\23\1\42\1\23\1\43"+
    "\1\44\5\23\1\45\1\46\1\47\1\50\1\51\3\23"+
    "\1\0\3\12\1\55\1\0\1\23\1\56\1\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\23\1\31\1\32\1\54"+
    "\1\34\1\23\1\35\1\36\1\23\1\37\1\40\1\41"+
    "\2\23\1\42\1\23\1\43\1\44\5\23\1\45\1\46"+
    "\1\47\1\50\1\51\3\23\55\0\1\57\4\0\2\57"+
    "\1\0\5\57\1\60\37\57\1\61\3\62\1\63\1\61"+
    "\1\64\1\65\6\61\1\64\1\61\1\66\1\67\1\61"+
    "\32\64\1\0\1\70\15\0\1\70\36\0\3\12\15\0"+
    "\1\54\33\0\2\14\2\0\15\14\1\71\33\14\2\0"+
    "\1\12\1\72\75\0\1\73\100\0\1\74\12\0\1\23"+
    "\3\0\1\23\2\0\2\23\1\0\1\23\2\0\32\23"+
    "\6\0\1\32\3\0\2\32\1\0\2\32\1\0\1\32"+
    "\2\0\32\32\2\0\1\22\1\75\57\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\14\23\1\76"+
    "\7\23\1\77\5\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\25\23\1\100\4\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\5\23\1\101\24\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\27\23\1\102\2\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\11\23\1\103\20\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\16\23\1\104\13\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\11\23\1\105\20\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\1\23\1\106\3\23\1\107"+
    "\11\23\1\110\12\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\2\23\1\36\1\23\1\37"+
    "\25\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\1\23\1\111\3\23\1\112\3\23\1\113"+
    "\5\23\1\114\12\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\5\23\1\115\24\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\16\23\1\116\13\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\11\23\1\117\20\23\2\120"+
    "\3\0\2\120\1\0\45\120\2\121\3\0\2\121\1\0"+
    "\45\121\1\57\4\0\2\57\1\0\45\57\15\0\1\122"+
    "\1\123\1\124\3\0\32\123\1\0\3\62\15\0\1\125"+
    "\33\0\2\126\3\0\2\126\1\0\45\126\6\0\1\64"+
    "\3\0\1\64\2\0\2\64\1\0\1\64\2\0\32\64"+
    "\2\127\3\0\2\127\1\0\45\127\6\0\1\66\3\0"+
    "\2\66\1\0\2\66\1\0\1\66\2\0\32\66\2\0"+
    "\1\62\1\130\51\0\3\14\1\131\15\14\1\71\33\14"+
    "\2\0\1\12\126\0\1\132\30\0\1\133\26\0\1\22"+
    "\60\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\14\23\1\134\15\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\24\23\1\135\5\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\11\23\1\136\20\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\20\23\1\137\11\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\3\23\1\140\26\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\14\23\1\141\15\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\24\23\1\142\5\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\16\23\1\143\13\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\2\23\1\144\27\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\24\23\1\145\5\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\1\23\1\146\30\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\15\23\1\147\14\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\24\23\1\150\5\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\2\23\1\151\27\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\15\23\1\152\14\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\23\23\1\153\6\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\11\23\1\154\20\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\23\23\1\155\6\23"+
    "\2\120\3\0\2\120\1\156\45\120\2\121\2\0\1\157"+
    "\2\121\1\0\45\121\16\0\1\123\1\124\3\0\1\123"+
    "\1\160\2\123\1\161\1\162\1\123\1\163\4\123\1\164"+
    "\2\123\1\165\1\166\1\167\3\123\1\170\4\123\16\0"+
    "\1\123\1\124\3\0\32\123\2\126\2\0\1\171\2\126"+
    "\1\0\45\126\2\127\3\0\2\127\1\172\45\127\2\0"+
    "\1\62\54\0\1\14\102\0\1\173\71\0\1\174\15\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\20\23\1\175\1\23\1\176\7\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\22\23\1\177"+
    "\7\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\14\23\1\146\15\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\23\23\1\177"+
    "\6\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\200\24\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\24\23\1\201"+
    "\5\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\202\24\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\4\23\1\177"+
    "\25\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\203\24\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\4\23\1\204"+
    "\25\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\205\24\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\14\23\1\206"+
    "\15\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\207\24\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\24\23\1\137"+
    "\5\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\17\23\1\210\12\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\11\23\1\211"+
    "\20\23\16\0\1\123\1\124\3\0\23\123\1\212\6\123"+
    "\16\0\1\123\1\124\3\0\5\123\1\213\24\123\16\0"+
    "\1\123\1\124\3\0\27\123\1\214\2\123\16\0\1\123"+
    "\1\124\3\0\22\123\1\215\7\123\16\0\1\123\1\124"+
    "\3\0\17\123\1\216\12\123\16\0\1\123\1\124\3\0"+
    "\22\123\1\217\2\123\1\220\4\123\16\0\1\123\1\124"+
    "\3\0\1\123\1\221\20\123\1\222\7\123\16\0\1\123"+
    "\1\124\3\0\25\123\1\223\4\123\16\0\1\123\1\124"+
    "\3\0\16\123\1\224\13\123\37\0\1\225\70\0\1\226"+
    "\7\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\1\23\1\227\30\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\4\23\1\37\25\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\20\23\1\230\11\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\5\23\1\135\24\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\22\23\1\231\7\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\14\23\1\137\15\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\6\23\1\232\23\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\1\233\31\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\11\23\1\234\20\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\20\23\1\235\11\23\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\16\23\1\236\13\23\6\0\1\23\3\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\2\23\1\237\27\23\16\0"+
    "\1\123\1\124\3\0\20\123\1\240\11\123\16\0\1\123"+
    "\1\124\3\0\14\123\1\241\15\123\16\0\1\123\1\124"+
    "\3\0\20\123\1\242\11\123\16\0\1\123\1\124\3\0"+
    "\1\123\1\243\30\123\16\0\1\123\1\124\3\0\1\123"+
    "\1\244\30\123\16\0\1\123\1\124\3\0\4\123\1\245"+
    "\25\123\16\0\1\123\1\124\3\0\24\123\1\246\5\123"+
    "\16\0\1\123\1\124\3\0\3\123\1\247\26\123\16\0"+
    "\1\123\1\124\3\0\17\123\1\250\12\123\16\0\1\123"+
    "\1\124\3\0\5\123\1\251\24\123\16\0\1\123\1\124"+
    "\3\0\11\123\1\252\20\123\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\24\23\1\253\5\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\24\23\1\254\5\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\23\23\1\255\6\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\11\23\1\256\20\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\20\23\1\257\11\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\16\23\1\260\13\23\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\1\23\1\261\30\23"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\14\23\1\262\15\23\16\0\1\123\1\124\3\0"+
    "\5\123\1\263\24\123\16\0\1\123\1\124\3\0\5\123"+
    "\1\264\24\123\16\0\1\123\1\124\3\0\5\123\1\265"+
    "\24\123\16\0\1\123\1\124\3\0\20\123\1\266\11\123"+
    "\16\0\1\123\1\124\3\0\4\123\1\267\25\123\16\0"+
    "\1\123\1\124\3\0\5\123\1\270\24\123\16\0\1\123"+
    "\1\124\3\0\20\123\1\271\11\123\16\0\1\123\1\124"+
    "\3\0\13\123\1\272\16\123\16\0\1\123\1\124\3\0"+
    "\24\123\1\273\5\123\16\0\1\123\1\124\3\0\22\123"+
    "\1\274\7\123\16\0\1\123\1\124\3\0\26\123\1\275"+
    "\3\123\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\10\23\1\137\21\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\5\23\1\276"+
    "\24\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\14\23\1\277\15\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\13\23\1\300"+
    "\16\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\7\23\1\137\22\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\24\23\1\301"+
    "\5\23\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\5\23\1\177\24\23\16\0\1\123\1\124"+
    "\3\0\3\123\1\302\26\123\16\0\1\123\1\124\3\0"+
    "\24\123\1\303\5\123\16\0\1\123\1\124\3\0\22\123"+
    "\1\304\7\123\16\0\1\123\1\124\3\0\10\123\1\305"+
    "\21\123\16\0\1\123\1\124\3\0\11\123\1\306\20\123"+
    "\16\0\1\123\1\124\3\0\22\123\1\307\7\123\16\0"+
    "\1\123\1\124\3\0\25\123\1\310\4\123\16\0\1\123"+
    "\1\124\3\0\1\123\1\311\30\123\16\0\1\123\1\124"+
    "\3\0\17\123\1\312\12\123\16\0\1\123\1\124\3\0"+
    "\30\123\1\313\1\123\16\0\1\123\1\124\3\0\5\123"+
    "\1\314\24\123\6\0\1\23\3\0\1\23\2\0\2\23"+
    "\1\0\1\23\2\0\3\23\1\315\26\23\6\0\1\23"+
    "\3\0\1\23\2\0\2\23\1\0\1\23\2\0\5\23"+
    "\1\137\24\23\6\0\1\23\3\0\1\23\2\0\2\23"+
    "\1\0\1\23\2\0\7\23\1\316\22\23\6\0\1\23"+
    "\3\0\1\23\2\0\2\23\1\0\1\23\2\0\10\23"+
    "\1\177\21\23\16\0\1\123\1\124\3\0\24\123\1\317"+
    "\5\123\16\0\1\123\1\124\3\0\5\123\1\320\24\123"+
    "\16\0\1\123\1\124\3\0\11\123\1\321\20\123\16\0"+
    "\1\322\1\124\3\0\32\123\16\0\1\123\1\124\3\0"+
    "\16\123\1\323\13\123\16\0\1\123\1\124\3\0\1\324"+
    "\31\123\16\0\1\123\1\124\3\0\24\123\1\325\5\123"+
    "\16\0\1\123\1\124\3\0\7\123\1\326\22\123\16\0"+
    "\1\327\1\124\3\0\32\123\16\0\1\123\1\124\3\0"+
    "\1\330\31\123\16\0\1\123\1\124\3\0\22\123\1\331"+
    "\7\123\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\24\23\1\332\5\23\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\1\333\31\23"+
    "\16\0\1\123\1\124\3\0\1\334\31\123\16\0\1\123"+
    "\1\124\3\0\4\123\1\335\25\123\16\0\1\123\1\124"+
    "\3\0\15\123\1\336\14\123\16\0\1\123\1\124\3\0"+
    "\3\123\1\337\12\123\1\340\13\123\16\0\1\123\1\124"+
    "\3\0\7\123\1\341\22\123\16\0\1\123\1\124\3\0"+
    "\17\123\1\342\12\123\1\0\1\124\14\0\1\123\1\124"+
    "\3\0\1\330\31\123\16\0\1\123\1\124\3\0\5\123"+
    "\1\343\24\123\16\0\1\123\1\124\3\0\17\123\1\344"+
    "\12\123\16\0\1\123\1\124\3\0\6\123\1\345\23\123"+
    "\16\0\1\123\1\124\3\0\23\123\1\346\6\123\6\0"+
    "\1\23\3\0\1\23\2\0\2\23\1\0\1\23\2\0"+
    "\4\23\1\347\25\23\16\0\1\123\1\124\3\0\4\123"+
    "\1\350\25\123\16\0\1\123\1\124\3\0\1\351\31\123"+
    "\16\0\1\123\1\124\3\0\5\123\1\352\24\123\16\0"+
    "\1\123\1\124\3\0\17\123\1\353\12\123\16\0\1\123"+
    "\1\124\3\0\17\123\1\354\12\123\16\0\1\123\1\124"+
    "\3\0\1\355\31\123\16\0\1\123\1\124\3\0\25\123"+
    "\1\356\4\123\16\0\1\123\1\124\3\0\1\357\31\123"+
    "\16\0\1\123\1\124\3\0\25\123\1\360\4\123\16\0"+
    "\1\123\1\124\3\0\11\123\1\361\20\123\16\0\1\123"+
    "\1\124\3\0\5\123\1\362\24\123\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\11\23\1\363"+
    "\20\23\16\0\1\123\1\124\3\0\5\123\1\364\24\123"+
    "\16\0\1\123\1\124\3\0\20\123\1\365\11\123\16\0"+
    "\1\123\1\124\3\0\16\123\1\366\13\123\16\0\1\123"+
    "\1\124\3\0\16\123\1\367\13\123\16\0\1\123\1\124"+
    "\3\0\4\123\1\370\25\123\16\0\1\123\1\124\3\0"+
    "\20\123\1\371\11\123\16\0\1\123\1\124\3\0\24\123"+
    "\1\372\5\123\16\0\1\123\1\124\3\0\20\123\1\373"+
    "\11\123\16\0\1\123\1\124\3\0\24\123\1\374\5\123"+
    "\16\0\1\123\1\124\3\0\14\123\1\375\15\123\16\0"+
    "\1\123\1\124\3\0\1\376\31\123\6\0\1\23\3\0"+
    "\1\23\2\0\2\23\1\0\1\23\2\0\22\23\1\377"+
    "\7\23\16\0\1\123\1\124\3\0\20\123\1\u0100\11\123"+
    "\16\0\1\123\1\124\3\0\1\123\1\u0101\30\123\16\0"+
    "\1\123\1\124\3\0\24\123\1\u0102\5\123\16\0\1\123"+
    "\1\124\3\0\4\123\1\u0103\25\123\16\0\1\123\1\124"+
    "\3\0\5\123\1\u0104\24\123\16\0\1\123\1\124\3\0"+
    "\10\123\1\u0105\21\123\16\0\1\123\1\124\3\0\20\123"+
    "\1\u0106\11\123\16\0\1\123\1\124\3\0\1\123\1\u0107"+
    "\30\123\16\0\1\123\1\124\3\0\20\123\1\u0108\11\123"+
    "\16\0\1\123\1\124\3\0\5\123\1\u0109\24\123\16\0"+
    "\1\123\1\124\3\0\23\123\1\u010a\6\123\6\0\1\23"+
    "\3\0\1\23\2\0\2\23\1\0\1\23\2\0\5\23"+
    "\1\u010b\24\23\16\0\1\123\1\124\3\0\23\123\1\u0109"+
    "\6\123\16\0\1\123\1\124\3\0\3\123\1\u010c\26\123"+
    "\16\0\1\123\1\124\3\0\1\123\1\u010d\30\123\16\0"+
    "\1\123\1\124\3\0\11\123\1\u010e\20\123\16\0\1\123"+
    "\1\124\3\0\1\u010f\31\123\16\0\1\123\1\124\3\0"+
    "\1\123\1\u0110\30\123\16\0\1\123\1\124\3\0\25\123"+
    "\1\u0111\4\123\16\0\1\123\1\124\3\0\24\123\1\u0112"+
    "\5\123\16\0\1\123\1\124\3\0\25\123\1\u0113\4\123"+
    "\1\0\1\124\14\0\1\123\1\124\3\0\32\123\16\0"+
    "\1\123\1\124\3\0\3\123\1\u0114\26\123\6\0\1\23"+
    "\3\0\1\23\2\0\2\23\1\0\1\23\2\0\3\23"+
    "\1\u0115\26\23\16\0\1\123\1\124\3\0\13\123\1\u0116"+
    "\16\123\16\0\1\123\1\124\3\0\14\123\1\u0117\15\123"+
    "\16\0\1\123\1\124\3\0\24\123\1\u0118\5\123\16\0"+
    "\1\123\1\124\3\0\14\123\1\u0119\15\123\16\0\1\123"+
    "\1\124\3\0\23\123\1\u011a\6\123\16\0\1\123\1\124"+
    "\3\0\24\123\1\u0109\5\123\16\0\1\123\1\124\3\0"+
    "\10\123\1\u0109\21\123\16\0\1\123\1\124\3\0\24\123"+
    "\1\u011b\5\123\16\0\1\123\1\124\3\0\17\123\1\u011c"+
    "\12\123\6\0\1\23\3\0\1\23\2\0\2\23\1\0"+
    "\1\23\2\0\24\23\1\u011d\5\23\16\0\1\123\1\124"+
    "\3\0\1\123\1\u011e\30\123\16\0\1\123\1\124\3\0"+
    "\1\u011f\31\123\16\0\1\123\1\124\3\0\11\123\1\u0120"+
    "\20\123\16\0\1\123\1\124\3\0\11\123\1\u0121\20\123"+
    "\16\0\1\123\1\124\3\0\5\123\1\u0122\24\123\16\0"+
    "\1\123\1\124\3\0\1\u0123\31\123\16\0\1\123\1\124"+
    "\3\0\20\123\1\375\11\123\6\0\1\23\3\0\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\1\u0124\31\23\16\0"+
    "\1\123\1\124\3\0\7\123\1\u0125\22\123\16\0\1\123"+
    "\1\124\3\0\22\123\1\u0126\7\123\16\0\1\123\1\124"+
    "\3\0\17\123\1\u0127\12\123\16\0\1\123\1\124\3\0"+
    "\15\123\1\u0128\14\123\16\0\1\123\1\124\3\0\1\u0129"+
    "\31\123\16\0\1\123\1\124\3\0\22\123\1\u012a\7\123"+
    "\6\0\1\23\3\0\1\23\2\0\2\23\1\0\1\23"+
    "\2\0\22\23\1\176\7\23\16\0\1\123\1\124\3\0"+
    "\5\123\1\u0100\24\123\16\0\1\123\1\124\3\0\5\123"+
    "\1\u012b\24\123\16\0\1\123\1\124\3\0\16\123\1\u012c"+
    "\13\123\16\0\1\123\1\124\3\0\11\123\1\u0111\20\123"+
    "\16\0\1\123\1\124\3\0\24\123\1\u012d\5\123\16\0"+
    "\1\123\1\124\3\0\25\123\1\u012e\4\123\16\0\1\123"+
    "\1\124\3\0\20\123\1\u012f\11\123\16\0\1\123\1\124"+
    "\3\0\1\123\1\u0130\30\123\16\0\1\123\1\124\3\0"+
    "\10\123\1\u0131\21\123\16\0\1\123\1\124\3\0\14\123"+
    "\1\u0132\15\123\16\0\1\123\1\124\3\0\17\123\1\u0133"+
    "\12\123\16\0\1\123\1\124\3\0\14\123\1\u0134\15\123"+
    "\16\0\1\123\1\124\3\0\22\123\1\u0135\7\123\16\0"+
    "\1\123\1\124\3\0\5\123\1\u0136\24\123\16\0\1\123"+
    "\1\124\3\0\23\123\1\u0137\6\123\16\0\1\123\1\124"+
    "\3\0\1\u0138\31\123\16\0\1\123\1\124\3\0\5\123"+
    "\1\u0139\24\123\16\0\1\123\1\124\3\0\1\u013a\31\123"+
    "\16\0\1\123\1\124\3\0\11\123\1\u013b\20\123\16\0"+
    "\1\123\1\124\3\0\5\123\1\u013c\24\123\16\0\1\123"+
    "\1\124\3\0\1\123\1\u013d\30\123\16\0\1\123\1\124"+
    "\3\0\1\123\1\u013e\30\123\16\0\1\123\1\124\3\0"+
    "\24\123\1\u013f\5\123\16\0\1\123\1\124\3\0\4\123"+
    "\1\u0140\25\123\16\0\1\123\1\124\3\0\4\123\1\u0100"+
    "\25\123\16\0\1\123\1\124\3\0\24\123\1\u0141\5\123"+
    "\16\0\1\123\1\124\3\0\17\123\1\u0142\12\123\16\0"+
    "\1\123\1\124\3\0\7\123\1\u0143\22\123\16\0\1\123"+
    "\1\124\3\0\24\123\1\u0144\5\123\16\0\1\123\1\124"+
    "\3\0\22\123\1\u0145\7\123\16\0\1\123\1\124\3\0"+
    "\5\123\1\u0146\24\123\16\0\1\123\1\124\3\0\22\123"+
    "\1\u0100\7\123\16\0\1\123\1\124\3\0\30\123\1\u0147"+
    "\1\123\16\0\1\123\1\124\3\0\23\123\1\u0104\6\123"+
    "\16\0\1\123\1\124\3\0\1\u0148\31\123\16\0\1\123"+
    "\1\124\3\0\22\123\1\u0149\7\123\16\0\1\123\1\124"+
    "\3\0\5\123\1\u014a\24\123\16\0\1\123\1\124\3\0"+
    "\23\123\1\u014b\6\123\16\0\1\123\1\124\3\0\17\123"+
    "\1\u014c\12\123\16\0\1\123\1\124\3\0\14\123\1\u014d"+
    "\15\123\16\0\1\123\1\124\3\0\26\123\1\u014e\3\123"+
    "\16\0\1\123\1\124\3\0\5\123\1\u014f\24\123\16\0"+
    "\1\123\1\124\3\0\4\123\1\313\25\123";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13680];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\3\0\1\11\1\1\1\11\1\1\2\11"+
    "\3\1\1\11\1\1\6\11\1\1\1\0\1\11\15\1"+
    "\1\11\3\0\1\11\2\1\1\11\6\1\1\11\1\1"+
    "\4\0\22\1\2\0\2\1\1\11\7\0\22\1\2\11"+
    "\11\1\2\11\2\0\30\1\2\11\271\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelqueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FLAG);  yypushback(1);
            }
          // fall through
          case 36: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 37: break;
          case 3:
            { yybegin(EXPR_DQ); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 38: break;
          case 4:
            { return BazelqueryTokenTypes.COMMENT;
            }
          // fall through
          case 39: break;
          case 5:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 40: break;
          case 6:
            { yybegin(EXPR_SQ); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 41: break;
          case 7:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 42: break;
          case 8:
            { return BazelqueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 43: break;
          case 9:
            { return BazelqueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 44: break;
          case 10:
            { return BazelqueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 45: break;
          case 11:
            { return BazelqueryTokenTypes.UNION;
            }
          // fall through
          case 46: break;
          case 12:
            { return BazelqueryTokenTypes.COMMA;
            }
          // fall through
          case 47: break;
          case 13:
            { return BazelqueryTokenTypes.EXCEPT;
            }
          // fall through
          case 48: break;
          case 14:
            { return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 49: break;
          case 15:
            { return BazelqueryTokenTypes.INTERSECT;
            }
          // fall through
          case 50: break;
          case 16:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 51: break;
          case 17:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 52: break;
          case 18:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 53: break;
          case 19:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 54: break;
          case 20:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 55: break;
          case 21:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 56: break;
          case 22:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 57: break;
          case 23:
            { yybegin(VALUE); return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 58: break;
          case 24:
            { return BazelqueryTokenTypes.IN;
            }
          // fall through
          case 59: break;
          case 25:
            { yybegin(PRE_VALUE); yypushback(1); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 60: break;
          case 26:
            { return BazelqueryTokenTypes.LET;
            }
          // fall through
          case 61: break;
          case 27:
            { return BazelqueryTokenTypes.SET;
            }
          // fall through
          case 62: break;
          case 28:
            { return BazelqueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 63: break;
          case 29:
            { return BazelqueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 64: break;
          case 30:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 65: break;
          case 31:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 66: break;
          case 32:
            { return BazelqueryTokenTypes.COMMAND;
            }
          // fall through
          case 67: break;
          case 33:
            { return BazelqueryTokenTypes.BAZEL;
            }
          // fall through
          case 68: break;
          case 34:
            { return BazelqueryTokenTypes.QUERY;
            }
          // fall through
          case 69: break;
          case 35:
            { return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
