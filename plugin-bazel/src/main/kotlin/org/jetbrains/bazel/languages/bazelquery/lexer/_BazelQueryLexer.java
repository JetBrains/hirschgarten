// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: BazelQuery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelQueryTokenTypes;

@SuppressWarnings("ALL")
class _BazelQueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  public static final int EXPR = 2;
  public static final int WORD_DQ = 4;
  public static final int WORD_SQ = 6;
  public static final int FLAG = 8;
  public static final int PRE_VALUE = 10;
  public static final int VALUE = 12;
  public static final int VALUE_SQ = 14;
  public static final int VALUE_DQ = 16;
  public static final int SPACE_NEEDED = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in
   * the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non
   * negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
  };

  /** Top-level table for translating characters to character classes */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
      "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Second-level tables for translating characters to character classes */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
      "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"
          + "\1\4\1\0\1\5\2\0\1\6\1\7\1\10\1\11"
          + "\1\12\1\13\1\14\1\5\1\15\12\16\1\17\2\0"
          + "\1\20\1\0\1\21\1\22\1\15\1\5\1\15\1\5"
          + "\16\15\1\5\3\15\1\5\3\15\1\23\1\24\1\25"
          + "\1\26\1\27\1\0\1\30\1\31\1\32\1\33\1\34"
          + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
          + "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"
          + "\1\55\1\56\1\57\1\60\1\41\3\21\1\15\u0381\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\12\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"
          + "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
          + "\1\6\1\4\1\17\15\6\1\20\1\21\1\22\1\23"
          + "\1\24\1\25\1\26\1\27\1\30\1\27\1\4\2\31"
          + "\1\32\1\33\2\0\6\6\1\34\15\6\1\20\1\35"
          + "\3\20\1\21\1\36\3\21\1\23\1\37\1\40\2\0"
          + "\1\41\1\42\11\6\1\43\4\6\1\44\5\6\1\45"
          + "\1\0\1\45\2\20\1\0\1\45\2\20\1\46\1\20"
          + "\1\47\1\0\1\47\2\21\1\0\1\47\3\21\11\37"
          + "\2\6\1\50\1\6\1\51\3\6\1\52\6\6\1\53"
          + "\3\6\2\0\1\45\2\20\1\46\1\20\1\0\1\20"
          + "\1\46\2\20\1\54\2\0\1\47\3\21\1\46\1\0"
          + "\2\21\1\46\1\21\1\55\13\37\11\6\1\56\3\6"
          + "\1\57\1\12\1\6\4\0\1\20\1\46\2\20\1\54"
          + "\1\20\1\54\4\0\2\21\1\46\1\21\1\55\1\21"
          + "\1\55\13\37\3\6\1\14\1\60\1\6\1\61\6\6"
          + "\3\0\1\20\1\54\3\0\1\21\1\55\13\37\11\6"
          + "\1\62\4\0\13\37\1\63\1\64\5\6\1\65\1\66"
          + "\2\0\6\37\1\67\4\37\1\6\1\17\1\70\2\6"
          + "\15\37\1\71\2\6\7\37\1\40\5\37\1\72\1\6"
          + "\14\37\1\6\12\37\1\67\1\37\1\6\6\37\1\67"
          + "\3\37\1\6\7\37\1\6\6\37\1\6\6\37\1\6"
          + "\4\37\1\6\4\37\1\6\4\37\1\6\4\37\1\73"
          + "\25\37";

  private static int[] zzUnpackAction() {
    int[] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates a state to a row index in the transition table */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"
          + "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u01ea\0\u024c\0\u01ea\0\u01ea"
          + "\0\u027d\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u02ae"
          + "\0\u01ea\0\u02df\0\u024c\0\u01ea\0\u0310\0\u0341\0\u0372\0\u03a3"
          + "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"
          + "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u01ea\0\u0651\0\u01ea"
          + "\0\u0682\0\u01ea\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u01ea\0\u01ea"
          + "\0\u024c\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"
          + "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"
          + "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u01ea"
          + "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u01ea\0\u0c71\0\u0ca2\0\u0cd3"
          + "\0\u0d04\0\u0d35\0\u01ea\0\u06e4\0\u0d66\0\u01ea\0\u01ea\0\u0d97"
          + "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"
          + "\0\u027d\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u027d\0\u1014\0\u1045"
          + "\0\u1076\0\u10a7\0\u10d8\0\u01ea\0\u1109\0\u1109\0\u113a\0\u116b"
          + "\0\u119c\0\u119c\0\u11cd\0\u11fe\0\u01ea\0\u122f\0\u01ea\0\u1260"
          + "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u12f3\0\u1324\0\u1355\0\u1386"
          + "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"
          + "\0\u153f\0\u1570\0\u15a1\0\u027d\0\u15d2\0\u027d\0\u1603\0\u1634"
          + "\0\u1665\0\u027d\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"
          + "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18b1\0\u18e2"
          + "\0\u1913\0\u1109\0\u1944\0\u1975\0\u19a6\0\u119c\0\u19d7\0\u1a08"
          + "\0\u01ea\0\u1a39\0\u1a6a\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1260"
          + "\0\u1b2e\0\u1b5f\0\u1b90\0\u12f3\0\u1bc1\0\u01ea\0\u1bf2\0\u1c23"
          + "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"
          + "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"
          + "\0\u1f64\0\u1f95\0\u027d\0\u1fc6\0\u1ff7\0\u2028\0\u027d\0\u027d"
          + "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u18b1\0\u217f"
          + "\0\u21b0\0\u1109\0\u21e1\0\u119c\0\u2212\0\u2243\0\u2274\0\u22a5"
          + "\0\u22d6\0\u2307\0\u1a6a\0\u2338\0\u1260\0\u2369\0\u12f3\0\u239a"
          + "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"
          + "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u027d\0\u027d\0\u2648"
          + "\0\u027d\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f"
          + "\0\u27d0\0\u2801\0\u2832\0\u18b1\0\u2863\0\u2894\0\u28c5\0\u28f6"
          + "\0\u1a6a\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d"
          + "\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5"
          + "\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u027d\0\u2cfb\0\u2d2c"
          + "\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4"
          + "\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u027d\0\u027d\0\u2fda"
          + "\0\u300b\0\u303c\0\u306d\0\u309e\0\u027d\0\u027d\0\u30cf\0\u3100"
          + "\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288"
          + "\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u027d\0\u027d\0\u337d\0\u33ae"
          + "\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536"
          + "\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u027d\0\u365c\0\u368d"
          + "\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u05ef"
          + "\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u027d\0\u390a\0\u393b"
          + "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"
          + "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b"
          + "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"
          + "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"
          + "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"
          + "\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b"
          + "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3"
          + "\0\u4424\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b"
          + "\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703"
          + "\0\u4734\0\u4765\0\u4796\0\u47c7\0\u47f8\0\u027d\0\u4829\0\u485a"
          + "\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2"
          + "\0\u4a13\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a"
          + "\0\u4b9b\0\u4bcc\0\u4bfd";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** The transition table of the DFA */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\13\3\14\4\15\5\13\3\15\2\13\2\15\1\16"
          + "\1\15\1\13\32\15\1\17\3\14\1\20\1\21\1\22"
          + "\1\23\1\24\1\17\1\25\1\26\1\27\1\21\1\30"
          + "\1\21\1\31\1\17\1\32\1\21\1\33\1\21\1\34"
          + "\1\21\1\35\1\36\1\21\1\37\1\40\1\41\2\21"
          + "\1\42\1\21\1\43\1\44\5\21\1\45\1\46\1\47"
          + "\1\50\1\51\3\21\4\15\1\52\62\15\1\53\52\15"
          + "\1\54\3\0\10\54\1\55\44\54\1\0\1\56\16\0"
          + "\1\56\40\0\1\17\3\57\1\60\1\61\1\62\6\17"
          + "\3\61\2\17\1\63\1\61\1\64\1\61\1\17\32\61"
          + "\6\17\1\65\56\17\1\66\54\17\1\67\3\70\55\67"
          + "\62\0\3\14\20\0\1\71\36\0\1\14\1\72\62\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\32\21\5\0\1\21\3\0\1\21\2\0"
          + "\2\21\1\30\1\21\2\0\2\21\1\0\1\21\1\0"
          + "\32\21\5\0\1\32\3\0\2\32\1\0\4\32\2\0"
          + "\2\32\1\0\1\32\1\0\32\32\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\14\21\1\73\7\21\1\74\5\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\25\21\1\75\4\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\5\21\1\76"
          + "\24\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\30\21\1\77\1\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\11\21\1\100\20\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\16\21\1\101\13\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\11\21\1\102"
          + "\20\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\1\21\1\103\3\21\1\104"
          + "\11\21\1\105\12\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\2\21\1\106"
          + "\1\21\1\107\25\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\1\21\1\110"
          + "\3\21\1\111\3\21\1\112\5\21\1\113\12\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\5\21\1\114\24\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\16\21\1\115\13\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\11\21\1\116"
          + "\20\21\2\117\2\0\1\120\1\117\1\0\1\121\13\117"
          + "\1\122\1\123\34\117\2\124\3\0\1\124\1\125\1\126"
          + "\13\124\1\127\1\130\34\124\1\54\3\0\55\54\14\0"
          + "\1\131\2\0\1\132\1\133\6\0\32\132\1\0\3\57"
          + "\20\0\1\134\41\0\1\61\3\0\1\61\2\0\4\61"
          + "\2\0\2\61\1\0\1\61\1\0\32\61\5\0\1\63"
          + "\3\0\2\63\1\0\4\63\2\0\2\63\1\0\1\63"
          + "\1\0\32\63\2\0\1\57\1\135\55\0\2\65\2\0"
          + "\2\65\1\136\15\65\1\0\34\65\2\66\2\0\1\137"
          + "\17\66\1\0\34\66\2\0\1\14\63\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\14\21\1\140\15\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\24\21\1\141"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\11\21\1\142\20\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\20\21\1\143\11\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\3\21\1\144\26\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\14\21\1\145"
          + "\15\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\24\21\1\146\5\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\16\21\1\147\13\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\2\21\1\150\27\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\24\21\1\151"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\1\21\1\152\30\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\25\21\1\153\4\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\5\21\1\154\24\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\15\21\1\155"
          + "\14\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\24\21\1\156\5\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\2\21\1\157\27\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\15\21\1\160\14\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\23\21\1\161"
          + "\6\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\11\21\1\162\20\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\23\21\1\163\6\21\2\117\2\0\1\164"
          + "\1\117\1\0\1\121\13\117\1\122\1\123\34\117\2\121"
          + "\2\165\1\166\1\121\1\165\1\121\1\117\12\121\1\167"
          + "\1\170\34\121\2\122\2\171\1\172\1\122\1\171\1\167"
          + "\14\122\1\173\1\117\33\122\2\174\2\0\1\175\1\176"
          + "\1\0\4\176\6\174\1\176\1\174\4\176\2\174\1\176"
          + "\1\174\1\176\1\174\1\176\7\174\1\176\3\174\3\176"
          + "\1\174\2\176\2\174\2\124\3\0\1\124\1\177\1\126"
          + "\13\124\1\127\1\130\34\124\2\126\3\200\1\126\1\201"
          + "\1\126\1\124\12\126\1\202\1\203\34\126\2\127\3\204"
          + "\1\127\1\205\1\202\14\127\1\206\1\124\33\127\2\207"
          + "\3\0\1\210\1\175\4\210\6\207\1\210\1\207\4\210"
          + "\2\207\1\210\1\207\1\210\1\207\1\210\7\207\1\210"
          + "\3\207\3\210\1\207\2\210\2\207\17\0\1\132\1\133"
          + "\6\0\1\132\1\211\2\132\1\212\1\213\1\132\1\214"
          + "\4\132\1\215\2\132\1\216\1\217\1\220\3\132\1\221"
          + "\4\132\17\0\1\132\1\133\6\0\32\132\2\0\1\57"
          + "\63\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\20\21\1\222\1\21\1\223\7\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\22\21\1\224\7\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\14\21\1\225\15\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\23\21"
          + "\1\226\6\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\5\21\1\227\24\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\24\21\1\230\5\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\5\21\1\231\24\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\4\21"
          + "\1\232\25\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\5\21\1\233\24\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\4\21\1\234\25\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\11\21\1\235\20\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\20\21"
          + "\1\236\11\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\5\21\1\237\24\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\14\21\1\240\15\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\5\21\1\241\24\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\24\21"
          + "\1\242\5\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\17\21\1\243\12\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\11\21\1\244\20\21\7\165\1\0"
          + "\1\245\50\165\2\167\2\246\1\247\1\167\1\246\1\167"
          + "\1\122\13\167\1\250\1\121\33\167\2\251\2\165\1\252"
          + "\1\253\1\165\2\176\2\253\6\251\1\253\1\251\4\253"
          + "\2\251\1\253\1\251\1\253\1\251\1\253\7\251\1\253"
          + "\3\251\3\253\1\251\2\253\2\251\23\171\1\0\1\254"
          + "\1\245\33\171\2\255\2\171\1\256\1\257\1\171\4\257"
          + "\6\255\1\257\1\255\1\257\1\260\2\257\2\255\1\257"
          + "\1\255\1\257\1\255\1\257\7\255\1\257\3\255\3\257"
          + "\1\255\2\257\2\255\2\174\2\0\1\175\1\174\1\0"
          + "\52\174\2\176\2\0\1\261\1\176\1\0\1\253\13\176"
          + "\1\257\1\123\34\176\7\200\1\0\1\262\50\200\2\202"
          + "\3\263\1\202\1\264\1\202\1\127\13\202\1\265\1\126"
          + "\33\202\2\266\3\200\1\267\1\270\2\210\2\267\6\266"
          + "\1\267\1\266\4\267\2\266\1\267\1\266\1\267\1\266"
          + "\1\267\7\266\1\267\3\266\3\267\1\266\2\267\2\266"
          + "\23\204\1\0\1\271\1\262\33\204\2\272\3\204\1\273"
          + "\1\274\4\273\6\272\1\273\1\272\1\273\1\275\2\273"
          + "\2\272\1\273\1\272\1\273\1\272\1\273\7\272\1\273"
          + "\3\272\3\273\1\272\2\273\2\272\2\207\3\0\1\207"
          + "\1\175\52\207\2\210\3\0\1\210\1\276\1\267\13\210"
          + "\1\273\1\130\34\210\17\0\1\132\1\133\6\0\23\132"
          + "\1\277\6\132\17\0\1\132\1\133\6\0\5\132\1\300"
          + "\24\132\17\0\1\132\1\133\6\0\30\132\1\301\1\132"
          + "\17\0\1\132\1\133\6\0\22\132\1\302\7\132\17\0"
          + "\1\132\1\133\6\0\17\132\1\303\12\132\17\0\1\132"
          + "\1\133\6\0\22\132\1\304\2\132\1\305\4\132\17\0"
          + "\1\132\1\133\6\0\1\132\1\306\20\132\1\307\7\132"
          + "\17\0\1\132\1\133\6\0\25\132\1\310\4\132\17\0"
          + "\1\132\1\133\6\0\16\132\1\311\13\132\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\1\21\1\312\30\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\4\21"
          + "\1\313\25\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\4\21\1\314\25\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\20\21\1\315\11\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\5\21\1\316\24\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\22\21"
          + "\1\317\7\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\14\21\1\320\15\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\6\21\1\321\23\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\14\21\1\322\15\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\23\21"
          + "\1\323\6\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\1\324\31\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\11\21\1\325\20\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\20\21\1\326\11\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\23\21\1\327"
          + "\6\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\16\21\1\330\13\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\2\21\1\331\27\21\2\245\2\0\1\261"
          + "\1\245\1\0\1\332\13\245\1\333\1\334\34\245\7\246"
          + "\1\171\1\333\12\246\1\165\1\335\1\332\33\246\2\336"
          + "\2\246\1\337\1\340\1\246\2\257\2\340\6\336\1\340"
          + "\1\336\1\340\1\341\2\340\2\336\1\340\1\336\1\340"
          + "\1\336\1\340\7\336\1\340\3\336\3\340\1\336\2\340"
          + "\2\336\2\251\2\165\1\252\1\251\1\165\1\174\1\176"
          + "\50\251\2\253\2\165\1\342\1\253\1\165\1\253\1\176"
          + "\12\253\1\340\1\170\34\253\24\171\1\254\1\333\33\171"
          + "\2\255\2\171\1\256\1\255\1\171\14\255\1\174\1\343"
          + "\1\176\33\255\2\257\2\171\1\344\1\257\1\171\1\340"
          + "\14\257\1\173\1\176\35\257\2\171\1\344\1\257\1\171"
          + "\1\340\14\257\1\173\34\257\2\262\3\0\1\262\1\276"
          + "\1\345\13\262\1\346\1\347\34\262\7\263\1\204\1\346"
          + "\12\263\1\200\1\350\1\345\33\263\2\351\3\263\1\352"
          + "\1\353\2\273\2\352\6\351\1\352\1\351\1\352\1\354"
          + "\2\352\2\351\1\352\1\351\1\352\1\351\1\352\7\351"
          + "\1\352\3\351\3\352\1\351\2\352\2\351\2\266\3\200"
          + "\1\266\1\270\1\207\1\210\50\266\2\267\3\200\1\267"
          + "\1\355\1\267\1\210\12\267\1\352\1\203\34\267\24\204"
          + "\1\271\1\346\33\204\2\272\3\204\1\272\1\274\14\272"
          + "\1\207\1\356\1\210\33\272\2\273\3\204\1\273\1\357"
          + "\1\352\14\273\1\206\1\210\35\273\3\204\1\273\1\357"
          + "\1\352\14\273\1\206\34\273\17\0\1\132\1\133\6\0"
          + "\20\132\1\360\11\132\17\0\1\132\1\133\6\0\14\132"
          + "\1\361\15\132\17\0\1\132\1\133\6\0\20\132\1\362"
          + "\11\132\17\0\1\132\1\133\6\0\1\132\1\363\30\132"
          + "\17\0\1\132\1\133\6\0\1\132\1\364\30\132\17\0"
          + "\1\132\1\133\6\0\4\132\1\365\25\132\17\0\1\132"
          + "\1\133\6\0\24\132\1\366\5\132\17\0\1\132\1\133"
          + "\6\0\3\132\1\367\26\132\17\0\1\132\1\133\6\0"
          + "\17\132\1\370\12\132\17\0\1\132\1\133\6\0\5\132"
          + "\1\371\24\132\17\0\1\132\1\133\6\0\11\132\1\372"
          + "\20\132\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\24\21\1\373\5\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\5\21\1\374\24\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\6\21\1\375\23\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\24\21\1\376"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\22\21\1\377\7\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\23\21\1\u0100\6\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\23\21\1\u0101\6\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\11\21\1\u0102"
          + "\20\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\4\21\1\u0103\25\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\20\21\1\u0104\11\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\16\21\1\u0105\13\21\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\1\21\1\u0106"
          + "\30\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\14\21\1\u0107\15\21\2\332"
          + "\2\165\1\342\1\332\1\165\1\332\1\245\12\332\1\u0108"
          + "\1\u0109\34\332\2\333\2\171\1\344\1\333\1\171\1\u0108"
          + "\14\333\1\u010a\1\245\33\333\5\0\1\245\1\0\4\245"
          + "\6\0\1\245\1\0\4\245\2\0\1\245\1\0\1\245"
          + "\1\0\1\245\7\0\1\245\3\0\3\245\1\0\2\245"
          + "\2\0\7\246\1\171\1\333\13\246\1\335\1\u0108\33\246"
          + "\2\336\2\246\1\337\1\336\1\246\1\255\1\257\12\336"
          + "\1\251\1\u010b\1\253\33\336\2\340\2\246\1\u010c\1\340"
          + "\1\246\1\340\1\257\13\340\1\250\1\253\35\340\2\246"
          + "\1\u010c\1\340\1\246\1\340\1\257\13\340\1\250\34\340"
          + "\2\255\2\171\1\256\1\255\1\171\15\255\1\343\1\257"
          + "\33\255\2\345\3\200\1\345\1\355\1\345\1\262\12\345"
          + "\1\u010d\1\u010e\34\345\2\346\3\204\1\346\1\357\1\u010d"
          + "\14\346\1\u010f\1\262\33\346\5\0\1\262\1\0\4\262"
          + "\6\0\1\262\1\0\4\262\2\0\1\262\1\0\1\262"
          + "\1\0\1\262\7\0\1\262\3\0\3\262\1\0\2\262"
          + "\2\0\7\263\1\204\1\346\13\263\1\350\1\u010d\33\263"
          + "\2\351\3\263\1\351\1\353\1\272\1\273\12\351\1\266"
          + "\1\u0110\1\267\33\351\2\352\3\263\1\352\1\u0111\1\352"
          + "\1\273\13\352\1\265\1\267\35\352\3\263\1\352\1\u0111"
          + "\1\352\1\273\13\352\1\265\34\352\2\272\3\204\1\272"
          + "\1\274\15\272\1\356\1\273\33\272\17\0\1\132\1\133"
          + "\6\0\5\132\1\u0112\24\132\17\0\1\132\1\133\6\0"
          + "\5\132\1\u0113\24\132\17\0\1\132\1\133\6\0\5\132"
          + "\1\u0114\24\132\17\0\1\132\1\133\6\0\20\132\1\u0115"
          + "\11\132\17\0\1\132\1\133\6\0\4\132\1\u0116\25\132"
          + "\17\0\1\132\1\133\6\0\5\132\1\u0117\24\132\17\0"
          + "\1\132\1\133\6\0\20\132\1\u0118\11\132\17\0\1\132"
          + "\1\133\6\0\13\132\1\u0119\16\132\17\0\1\132\1\133"
          + "\6\0\24\132\1\u011a\5\132\17\0\1\132\1\133\6\0"
          + "\22\132\1\u011b\7\132\17\0\1\132\1\133\6\0\26\132"
          + "\1\u011c\3\132\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\10\21\1\u011d\21\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\20\21\1\u011e\11\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\11\21\1\u011f\20\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\5\21"
          + "\1\u0120\24\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\14\21\1\u0121\15\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\6\21\1\u0122\23\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\13\21\1\u0123\16\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\7\21"
          + "\1\u0124\22\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\24\21\1\u0125\5\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\5\21\1\u0126\24\21\2\u0108\2\246"
          + "\1\u010c\1\u0108\1\246\1\u0108\1\333\13\u0108\1\u0127\1\332"
          + "\33\u0108\5\165\1\332\1\165\2\245\2\332\6\165\1\332"
          + "\1\165\4\332\2\165\1\332\1\165\1\332\1\165\1\332"
          + "\7\165\1\332\3\165\3\332\1\165\2\332\2\165\5\171"
          + "\1\333\1\171\4\333\6\171\1\333\1\171\1\333\1\u0128"
          + "\2\333\2\171\1\333\1\171\1\333\1\171\1\333\7\171"
          + "\1\333\3\171\3\333\1\171\2\333\2\171\2\336\2\246"
          + "\1\337\1\336\1\246\1\255\1\257\13\336\1\u010b\1\340"
          + "\33\336\2\u010d\3\263\1\u010d\1\u0111\1\u010d\1\346\13\u010d"
          + "\1\u0129\1\345\33\u010d\5\200\1\345\1\200\2\262\2\345"
          + "\6\200\1\345\1\200\4\345\2\200\1\345\1\200\1\345"
          + "\1\200\1\345\7\200\1\345\3\200\3\345\1\200\2\345"
          + "\2\200\5\204\1\346\1\204\4\346\6\204\1\346\1\204"
          + "\1\346\1\u012a\2\346\2\204\1\346\1\204\1\346\1\204"
          + "\1\346\7\204\1\346\3\204\3\346\1\204\2\346\2\204"
          + "\2\351\3\263\1\351\1\353\1\272\1\273\13\351\1\u0110"
          + "\1\352\33\351\17\0\1\132\1\133\6\0\3\132\1\u012b"
          + "\26\132\17\0\1\132\1\133\6\0\24\132\1\u012c\5\132"
          + "\17\0\1\132\1\133\6\0\22\132\1\u012d\7\132\17\0"
          + "\1\132\1\133\6\0\10\132\1\u012e\21\132\17\0\1\132"
          + "\1\133\6\0\11\132\1\u012f\20\132\17\0\1\132\1\133"
          + "\6\0\22\132\1\u0130\7\132\17\0\1\132\1\133\6\0"
          + "\25\132\1\u0131\4\132\17\0\1\132\1\133\6\0\1\132"
          + "\1\u0132\30\132\17\0\1\132\1\133\6\0\17\132\1\u0133"
          + "\12\132\17\0\1\132\1\133\6\0\31\132\1\u0134\17\0"
          + "\1\132\1\133\6\0\5\132\1\u0135\24\132\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\23\21\1\u0136\6\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\23\21"
          + "\1\u0137\6\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\14\21\1\u0138\15\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\3\21\1\u0139\26\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\5\21\1\u013a\24\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\11\21"
          + "\1\u013b\20\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\7\21\1\u013c\22\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\23\21\1\u013d\6\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\10\21\1\u013e\21\21\5\246\1\u0108\1\246\2\333"
          + "\2\u0108\6\246\1\u0108\1\246\1\u0108\1\u013f\2\u0108\2\246"
          + "\1\u0108\1\246\1\u0108\1\246\1\u0108\7\246\1\u0108\3\246"
          + "\3\u0108\1\246\2\u0108\2\246\2\333\2\171\1\344\1\333"
          + "\1\171\1\u0108\14\333\1\u010a\34\333\5\263\1\u010d\1\263"
          + "\2\346\2\u010d\6\263\1\u010d\1\263\1\u010d\1\u0140\2\u010d"
          + "\2\263\1\u010d\1\263\1\u010d\1\263\1\u010d\7\263\1\u010d"
          + "\3\263\3\u010d\1\263\2\u010d\2\263\2\346\3\204\1\346"
          + "\1\357\1\u010d\14\346\1\u010f\34\346\17\0\1\132\1\133"
          + "\6\0\24\132\1\u0141\5\132\17\0\1\132\1\133\6\0"
          + "\5\132\1\u0142\24\132\17\0\1\132\1\133\6\0\11\132"
          + "\1\u0143\20\132\17\0\1\u0144\1\133\6\0\32\132\17\0"
          + "\1\132\1\133\6\0\16\132\1\u0145\13\132\17\0\1\132"
          + "\1\133\6\0\1\u0146\31\132\17\0\1\132\1\133\6\0"
          + "\24\132\1\u0147\5\132\17\0\1\132\1\133\6\0\7\132"
          + "\1\u0148\22\132\17\0\1\u0149\1\133\6\0\32\132\17\0"
          + "\1\132\1\133\6\0\1\u014a\31\132\17\0\1\132\1\133"
          + "\6\0\22\132\1\u014b\7\132\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\5\21"
          + "\1\u014c\24\21\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\24\21\1\u014d\5\21"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\23\21\1\u014e\6\21\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\14\21\1\u014f\15\21\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\1\u0150"
          + "\31\21\2\u0108\2\246\1\u010c\1\u0108\1\246\1\u0108\1\333"
          + "\13\u0108\1\u0127\34\u0108\2\u010d\3\263\1\u010d\1\u0111\1\u010d"
          + "\1\346\13\u010d\1\u0129\34\u010d\17\0\1\132\1\133\6\0"
          + "\1\u0151\31\132\17\0\1\132\1\133\6\0\4\132\1\u0152"
          + "\25\132\17\0\1\132\1\133\6\0\15\132\1\u0153\14\132"
          + "\17\0\1\132\1\133\6\0\3\132\1\u0154\12\132\1\u0155"
          + "\13\132\17\0\1\132\1\133\6\0\7\132\1\u0156\22\132"
          + "\17\0\1\132\1\133\6\0\17\132\1\u0157\12\132\1\54"
          + "\1\133\15\54\1\u0158\1\133\6\54\1\u0159\31\u0158\17\0"
          + "\1\132\1\133\6\0\5\132\1\u015a\24\132\17\0\1\132"
          + "\1\133\6\0\17\132\1\u015b\12\132\17\0\1\132\1\133"
          + "\6\0\6\132\1\u015c\23\132\17\0\1\132\1\133\6\0"
          + "\23\132\1\u015d\6\132\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\23\21\1\u015e"
          + "\6\21\5\0\1\21\3\0\1\21\2\0\4\21\2\0"
          + "\2\21\1\0\1\21\1\0\5\21\1\u015f\24\21\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\4\21\1\u0160\25\21\17\0\1\132\1\133"
          + "\6\0\4\132\1\u0161\25\132\17\0\1\132\1\133\6\0"
          + "\1\u0162\31\132\17\0\1\132\1\133\6\0\5\132\1\u0163"
          + "\24\132\17\0\1\132\1\133\6\0\17\132\1\u0164\12\132"
          + "\17\0\1\132\1\133\6\0\17\132\1\u0165\12\132\17\0"
          + "\1\132\1\133\6\0\1\u0166\31\132\17\0\1\132\1\133"
          + "\6\0\25\132\1\u0167\4\132\1\54\3\0\13\54\1\u0158"
          + "\1\u0168\6\54\32\u0158\1\54\3\0\13\54\1\u0158\1\u0168"
          + "\6\54\6\u0158\1\u0169\23\u0158\17\0\1\132\1\133\6\0"
          + "\1\u016a\31\132\17\0\1\132\1\133\6\0\25\132\1\u016b"
          + "\4\132\17\0\1\132\1\133\6\0\11\132\1\u016c\20\132"
          + "\17\0\1\132\1\133\6\0\5\132\1\u016d\24\132\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\23\21\1\u016e\6\21\5\0\1\21\3\0"
          + "\1\21\2\0\4\21\2\0\2\21\1\0\1\21\1\0"
          + "\11\21\1\u016f\20\21\17\0\1\132\1\133\6\0\5\132"
          + "\1\u0170\24\132\17\0\1\132\1\133\6\0\20\132\1\u0171"
          + "\11\132\17\0\1\132\1\133\6\0\16\132\1\u0172\13\132"
          + "\17\0\1\132\1\133\6\0\16\132\1\u0173\13\132\17\0"
          + "\1\132\1\133\6\0\4\132\1\u0174\25\132\17\0\1\132"
          + "\1\133\6\0\20\132\1\u0175\11\132\17\0\1\132\1\133"
          + "\6\0\24\132\1\u0176\5\132\1\54\3\0\13\54\1\u0158"
          + "\1\u0168\6\54\11\u0158\1\u0177\20\u0158\17\0\1\132\1\133"
          + "\6\0\20\132\1\u0178\11\132\17\0\1\132\1\133\6\0"
          + "\24\132\1\u0179\5\132\17\0\1\132\1\133\6\0\14\132"
          + "\1\u017a\15\132\17\0\1\132\1\133\6\0\1\u017b\31\132"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\22\21\1\u017c\7\21\17\0\1\132"
          + "\1\133\6\0\20\132\1\u017d\11\132\17\0\1\132\1\133"
          + "\6\0\1\132\1\u017e\30\132\17\0\1\132\1\133\6\0"
          + "\24\132\1\u017f\5\132\17\0\1\132\1\133\6\0\4\132"
          + "\1\u0180\25\132\17\0\1\132\1\133\6\0\5\132\1\u0181"
          + "\24\132\17\0\1\132\1\133\6\0\10\132\1\u0182\21\132"
          + "\17\0\1\132\1\133\6\0\20\132\1\u0183\11\132\1\54"
          + "\3\0\13\54\1\u0158\1\u0168\6\54\14\u0158\1\u0184\15\u0158"
          + "\17\0\1\132\1\133\6\0\1\132\1\u0185\30\132\17\0"
          + "\1\132\1\133\6\0\20\132\1\u0186\11\132\17\0\1\132"
          + "\1\133\6\0\5\132\1\u0187\24\132\17\0\1\132\1\133"
          + "\6\0\23\132\1\u0188\6\132\5\0\1\21\3\0\1\21"
          + "\2\0\4\21\2\0\2\21\1\0\1\21\1\0\5\21"
          + "\1\u0189\24\21\17\0\1\132\1\133\6\0\23\132\1\u0187"
          + "\6\132\17\0\1\132\1\133\6\0\3\132\1\u018a\26\132"
          + "\17\0\1\132\1\133\6\0\1\132\1\u018b\30\132\17\0"
          + "\1\132\1\133\6\0\11\132\1\u018c\20\132\17\0\1\132"
          + "\1\133\6\0\1\u018d\31\132\17\0\1\132\1\133\6\0"
          + "\1\132\1\u018e\30\132\17\0\1\132\1\133\6\0\25\132"
          + "\1\u018f\4\132\1\54\3\0\13\54\1\u0158\1\u0168\6\54"
          + "\5\u0158\1\u0190\24\u0158\17\0\1\132\1\133\6\0\24\132"
          + "\1\u0191\5\132\17\0\1\132\1\133\6\0\25\132\1\u0192"
          + "\4\132\1\54\1\133\15\54\1\u0158\1\133\6\54\32\u0158"
          + "\17\0\1\132\1\133\6\0\3\132\1\u0193\26\132\5\0"
          + "\1\21\3\0\1\21\2\0\4\21\2\0\2\21\1\0"
          + "\1\21\1\0\3\21\1\u0194\26\21\17\0\1\132\1\133"
          + "\6\0\13\132\1\u0195\16\132\17\0\1\132\1\133\6\0"
          + "\14\132\1\u0196\15\132\17\0\1\132\1\133\6\0\24\132"
          + "\1\u0197\5\132\17\0\1\132\1\133\6\0\14\132\1\u0198"
          + "\15\132\17\0\1\132\1\133\6\0\23\132\1\u0199\6\132"
          + "\17\0\1\132\1\133\6\0\24\132\1\u0187\5\132\1\54"
          + "\1\133\15\54\1\u0158\1\u0168\6\54\32\u0158\17\0\1\132"
          + "\1\133\6\0\10\132\1\u0187\21\132\17\0\1\132\1\133"
          + "\6\0\24\132\1\u019a\5\132\17\0\1\132\1\133\6\0"
          + "\17\132\1\u019b\12\132\5\0\1\21\3\0\1\21\2\0"
          + "\4\21\2\0\2\21\1\0\1\21\1\0\24\21\1\u019c"
          + "\5\21\17\0\1\132\1\133\6\0\1\132\1\u019d\30\132"
          + "\17\0\1\132\1\133\6\0\1\u019e\31\132\17\0\1\132"
          + "\1\133\6\0\11\132\1\u019f\20\132\17\0\1\132\1\133"
          + "\6\0\11\132\1\u01a0\20\132\17\0\1\132\1\133\6\0"
          + "\5\132\1\u01a1\24\132\17\0\1\132\1\133\6\0\1\u01a2"
          + "\31\132\17\0\1\132\1\133\6\0\20\132\1\u017a\11\132"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\1\u01a3\31\21\17\0\1\132\1\133"
          + "\6\0\7\132\1\u01a4\22\132\17\0\1\132\1\133\6\0"
          + "\22\132\1\u01a5\7\132\17\0\1\132\1\133\6\0\17\132"
          + "\1\u01a6\12\132\17\0\1\132\1\133\6\0\15\132\1\u01a7"
          + "\14\132\17\0\1\132\1\133\6\0\1\u01a8\31\132\17\0"
          + "\1\132\1\133\6\0\22\132\1\u01a9\7\132\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\22\21\1\u01aa\7\21\17\0\1\132\1\133\6\0"
          + "\5\132\1\u017d\24\132\17\0\1\132\1\133\6\0\5\132"
          + "\1\u01ab\24\132\17\0\1\132\1\133\6\0\16\132\1\u01ac"
          + "\13\132\17\0\1\132\1\133\6\0\11\132\1\u018f\20\132"
          + "\17\0\1\132\1\133\6\0\24\132\1\u01ad\5\132\17\0"
          + "\1\132\1\133\6\0\25\132\1\u01ae\4\132\5\0\1\21"
          + "\3\0\1\21\2\0\4\21\2\0\2\21\1\0\1\21"
          + "\1\0\4\21\1\u01af\25\21\17\0\1\132\1\133\6\0"
          + "\20\132\1\u01b0\11\132\17\0\1\132\1\133\6\0\1\132"
          + "\1\u01b1\30\132\17\0\1\132\1\133\6\0\10\132\1\u01b2"
          + "\21\132\17\0\1\132\1\133\6\0\14\132\1\u01b3\15\132"
          + "\5\0\1\21\3\0\1\21\2\0\4\21\2\0\2\21"
          + "\1\0\1\21\1\0\5\21\1\u01b4\24\21\17\0\1\132"
          + "\1\133\6\0\17\132\1\u01b5\12\132\17\0\1\132\1\133"
          + "\6\0\14\132\1\u01b6\15\132\17\0\1\132\1\133\6\0"
          + "\22\132\1\u01b7\7\132\17\0\1\132\1\133\6\0\5\132"
          + "\1\u01b8\24\132\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\20\21\1\u01b9\11\21"
          + "\17\0\1\132\1\133\6\0\23\132\1\u01ba\6\132\17\0"
          + "\1\132\1\133\6\0\1\u01bb\31\132\17\0\1\132\1\133"
          + "\6\0\5\132\1\u01bc\24\132\17\0\1\132\1\133\6\0"
          + "\1\u01bd\31\132\5\0\1\21\3\0\1\21\2\0\4\21"
          + "\2\0\2\21\1\0\1\21\1\0\23\21\1\u01be\6\21"
          + "\17\0\1\132\1\133\6\0\11\132\1\u01bf\20\132\17\0"
          + "\1\132\1\133\6\0\5\132\1\u01c0\24\132\17\0\1\132"
          + "\1\133\6\0\1\132\1\u01c1\30\132\17\0\1\132\1\133"
          + "\6\0\1\132\1\u01c2\30\132\17\0\1\132\1\133\6\0"
          + "\24\132\1\u01c3\5\132\17\0\1\132\1\133\6\0\4\132"
          + "\1\u01c4\25\132\17\0\1\132\1\133\6\0\4\132\1\u017d"
          + "\25\132\17\0\1\132\1\133\6\0\24\132\1\u01c5\5\132"
          + "\17\0\1\132\1\133\6\0\17\132\1\u01c6\12\132\17\0"
          + "\1\132\1\133\6\0\7\132\1\u01c7\22\132\17\0\1\132"
          + "\1\133\6\0\24\132\1\u01c8\5\132\17\0\1\132\1\133"
          + "\6\0\22\132\1\u01c9\7\132\17\0\1\132\1\133\6\0"
          + "\5\132\1\u01ca\24\132\17\0\1\132\1\133\6\0\22\132"
          + "\1\u017d\7\132\17\0\1\132\1\133\6\0\31\132\1\u01cb"
          + "\17\0\1\132\1\133\6\0\23\132\1\u0181\6\132\17\0"
          + "\1\132\1\133\6\0\1\u01cc\31\132\17\0\1\132\1\133"
          + "\6\0\22\132\1\u01cd\7\132\17\0\1\132\1\133\6\0"
          + "\5\132\1\u01ce\24\132\17\0\1\132\1\133\6\0\23\132"
          + "\1\u01cf\6\132\17\0\1\132\1\133\6\0\17\132\1\u01d0"
          + "\12\132\17\0\1\132\1\133\6\0\14\132\1\u01d1\15\132"
          + "\17\0\1\132\1\133\6\0\26\132\1\u01d2\3\132\17\0"
          + "\1\132\1\133\6\0\5\132\1\u01d3\24\132\17\0\1\132"
          + "\1\133\6\0\4\132\1\u0134\25\132";

  private static int[] zzUnpacktrans() {
    int[] result = new int[19502];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState} */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\12\0\1\11\1\1\1\11\1\1\2\11\1\1\6\11"
          + "\1\1\1\11\2\1\1\11\21\1\1\11\1\1\1\11"
          + "\1\1\1\11\4\1\2\11\2\0\25\1\1\11\4\1"
          + "\1\11\5\1\1\11\2\0\2\11\24\1\1\11\1\0"
          + "\3\1\1\0\3\1\1\11\1\1\1\11\1\0\3\1"
          + "\1\0\40\1\2\0\5\1\1\0\4\1\1\11\2\0"
          + "\5\1\1\0\4\1\1\11\33\1\4\0\7\1\4\0"
          + "\37\1\3\0\2\1\3\0\27\1\4\0\24\1\2\0"
          + "\223\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  _BazelQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /** Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /** Translates raw input code points to DFA table row */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input
        ? ZZ_CMAP_BLOCKS[offset]
        : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false}, iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /** Returns the current lexical state. */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /** Returns the text matched by the current regular expression. */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }

  /**
   * Returns the character at position {@code pos} from the matched text.
   *
   * <p>It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }

  /** Returns the length of the matched text region. */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
   * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
   * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
              yybegin(FLAG);
              yypushback(1);
            }
          // fall through
          case 60:
            break;
          case 2:
            {
              return TokenType.WHITE_SPACE;
            }
          // fall through
          case 61:
            break;
          case 3:
            {
              yybegin(EXPR);
              yypushback(1);
            }
          // fall through
          case 62:
            break;
          case 4:
            {
              yybegin(YYINITIAL);
              yypushback(1);
            }
          // fall through
          case 63:
            break;
          case 5:
            {
              yybegin(WORD_DQ);
              yypushback(1);
            }
          // fall through
          case 64:
            break;
          case 6:
            {
              return BazelQueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 65:
            break;
          case 7:
            {
              yybegin(WORD_SQ);
              yypushback(1);
            }
          // fall through
          case 66:
            break;
          case 8:
            {
              return BazelQueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 67:
            break;
          case 9:
            {
              return BazelQueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 68:
            break;
          case 10:
            {
              return BazelQueryTokenTypes.UNION;
            }
          // fall through
          case 69:
            break;
          case 11:
            {
              return BazelQueryTokenTypes.COMMA;
            }
          // fall through
          case 70:
            break;
          case 12:
            {
              return BazelQueryTokenTypes.EXCEPT;
            }
          // fall through
          case 71:
            break;
          case 13:
            {
              return BazelQueryTokenTypes.INTEGER;
            }
          // fall through
          case 72:
            break;
          case 14:
            {
              return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 73:
            break;
          case 15:
            {
              return BazelQueryTokenTypes.INTERSECT;
            }
          // fall through
          case 74:
            break;
          case 16:
            {
              return BazelQueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 75:
            break;
          case 17:
            {
              return BazelQueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 76:
            break;
          case 18:
            {
              yybegin(YYINITIAL);
              return BazelQueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 77:
            break;
          case 19:
            {
              return BazelQueryTokenTypes.UNFINISHED_FLAG;
            }
          // fall through
          case 78:
            break;
          case 20:
            {
              yybegin(VALUE);
              return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 79:
            break;
          case 21:
            {
              yybegin(YYINITIAL);
              return TokenType.WHITE_SPACE;
            }
          // fall through
          case 80:
            break;
          case 22:
            {
              yybegin(VALUE_DQ);
              yypushback(1);
            }
          // fall through
          case 81:
            break;
          case 23:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 82:
            break;
          case 24:
            {
              yybegin(VALUE_SQ);
              yypushback(1);
            }
          // fall through
          case 83:
            break;
          case 25:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 84:
            break;
          case 26:
            {
              yybegin(YYINITIAL);
              yypushback(1);
              return BazelQueryTokenTypes.MISSING_SPACE;
            }
          // fall through
          case 85:
            break;
          case 27:
            {
              yybegin(YYINITIAL);
              return BazelQueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 86:
            break;
          case 28:
            {
              return BazelQueryTokenTypes.IN;
            }
          // fall through
          case 87:
            break;
          case 29:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 88:
            break;
          case 30:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 89:
            break;
          case 31:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 90:
            break;
          case 32:
            {
              yybegin(PRE_VALUE);
              yypushback(1);
              return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 91:
            break;
          case 33:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 92:
            break;
          case 34:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 93:
            break;
          case 35:
            {
              return BazelQueryTokenTypes.LET;
            }
          // fall through
          case 94:
            break;
          case 36:
            {
              return BazelQueryTokenTypes.SET;
            }
          // fall through
          case 95:
            break;
          case 37:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 96:
            break;
          case 38:
            {
              return BazelQueryTokenTypes.ERR_WORD;
            }
          // fall through
          case 97:
            break;
          case 39:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 98:
            break;
          case 40:
            {
              return BazelQueryTokenTypes.ATTR;
            }
          // fall through
          case 99:
            break;
          case 41:
            {
              return BazelQueryTokenTypes.DEPS;
            }
          // fall through
          case 100:
            break;
          case 42:
            {
              return BazelQueryTokenTypes.KIND;
            }
          // fall through
          case 101:
            break;
          case 43:
            {
              return BazelQueryTokenTypes.SOME;
            }
          // fall through
          case 102:
            break;
          case 44:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.DQ_PATTERN;
            }
          // fall through
          case 103:
            break;
          case 45:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.SQ_PATTERN;
            }
          // fall through
          case 104:
            break;
          case 46:
            {
              return BazelQueryTokenTypes.RDEPS;
            }
          // fall through
          case 105:
            break;
          case 47:
            {
              return BazelQueryTokenTypes.TESTS;
            }
          // fall through
          case 106:
            break;
          case 48:
            {
              return BazelQueryTokenTypes.FILTER;
            }
          // fall through
          case 107:
            break;
          case 49:
            {
              return BazelQueryTokenTypes.LABELS;
            }
          // fall through
          case 108:
            break;
          case 50:
            {
              return BazelQueryTokenTypes.VISIBLE;
            }
          // fall through
          case 109:
            break;
          case 51:
            {
              return BazelQueryTokenTypes.ALLPATHS;
            }
          // fall through
          case 110:
            break;
          case 52:
            {
              return BazelQueryTokenTypes.ALLRDEPS;
            }
          // fall through
          case 111:
            break;
          case 53:
            {
              return BazelQueryTokenTypes.SIBLINGS;
            }
          // fall through
          case 112:
            break;
          case 54:
            {
              return BazelQueryTokenTypes.SOMEPATH;
            }
          // fall through
          case 113:
            break;
          case 55:
            {
              yybegin(PRE_VALUE);
              return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 114:
            break;
          case 56:
            {
              return BazelQueryTokenTypes.LOADFILES;
            }
          // fall through
          case 115:
            break;
          case 57:
            {
              return BazelQueryTokenTypes.BUILDFILES;
            }
          // fall through
          case 116:
            break;
          case 58:
            {
              return BazelQueryTokenTypes.RBUILDFILES;
            }
          // fall through
          case 117:
            break;
          case 59:
            {
              return BazelQueryTokenTypes.SAME_PKG_DIRECT_RDEPS;
            }
          // fall through
          case 118:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
}
