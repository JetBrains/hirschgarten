// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: BazelQuery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelQueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")
class _BazelQueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  public static final int EXPR = 2;
  public static final int WORD_DQ = 4;
  public static final int WORD_SQ = 6;
  public static final int FLAG = 8;
  public static final int PRE_VALUE = 10;
  public static final int VALUE = 12;
  public static final int VALUE_SQ = 14;
  public static final int VALUE_DQ = 16;
  public static final int SPACE_NEEDED = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in
   * the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non
   * negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
  };

  /** Top-level table for translating characters to character classes */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\u10ff\u0100";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Second-level tables for translating characters to character classes */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
      "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"
          + "\1\4\1\0\1\5\2\0\1\6\1\7\1\10\1\11"
          + "\1\12\1\13\1\14\2\5\12\15\1\16\2\0\1\17"
          + "\2\0\1\20\33\5\1\21\1\5\1\22\1\23\1\0"
          + "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"
          + "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"
          + "\1\44\1\45\1\46\1\47\1\50\1\51\1\35\1\52"
          + "\1\53\1\35\3\0\1\5\u0181\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\12\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"
          + "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
          + "\1\6\1\4\1\17\15\6\1\20\1\21\1\22\1\23"
          + "\1\24\1\25\1\26\1\27\1\30\1\27\1\4\2\31"
          + "\1\32\1\33\2\0\6\6\1\34\15\6\1\20\1\35"
          + "\1\21\1\36\1\23\1\37\1\40\2\0\1\41\1\42"
          + "\11\6\1\43\4\6\1\44\5\6\1\45\1\46\11\37"
          + "\2\6\1\47\1\6\1\50\3\6\1\51\6\6\1\52"
          + "\3\6\13\37\11\6\1\53\3\6\1\54\1\12\1\6"
          + "\13\37\3\6\1\14\1\55\1\6\1\56\6\6\13\37"
          + "\11\6\1\57\13\37\1\60\1\61\5\6\1\62\1\63"
          + "\6\37\1\64\4\37\1\6\1\17\1\65\2\6\15\37"
          + "\1\66\2\6\7\37\1\40\5\37\1\67\1\6\14\37"
          + "\1\6\12\37\1\64\1\37\1\6\6\37\1\64\3\37"
          + "\1\6\7\37\1\6\6\37\1\6\6\37\1\6\4\37"
          + "\1\6\4\37\1\6\4\37\1\6\4\37\1\70\25\37";

  private static int[] zzUnpackAction() {
    int[] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates a state to a row index in the transition table */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"
          + "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u01b8\0\u0210\0\u01b8\0\u01b8"
          + "\0\u023c\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u0268"
          + "\0\u01b8\0\u0294\0\u0210\0\u01b8\0\u02c0\0\u02ec\0\u0318\0\u0344"
          + "\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"
          + "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u01b8\0\u05ac\0\u01b8"
          + "\0\u05d8\0\u01b8\0\u0604\0\u0630\0\u065c\0\u0688\0\u01b8\0\u01b8"
          + "\0\u0210\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"
          + "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"
          + "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u01b8"
          + "\0\u0a7c\0\u01b8\0\u0aa8\0\u0ad4\0\u01b8\0\u0630\0\u0b00\0\u01b8"
          + "\0\u01b8\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"
          + "\0\u0c60\0\u0c8c\0\u023c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u023c"
          + "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u01b8\0\u01b8\0\u0e44"
          + "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"
          + "\0\u0fd0\0\u0ffc\0\u023c\0\u1028\0\u023c\0\u1054\0\u1080\0\u10ac"
          + "\0\u023c\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0"
          + "\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340"
          + "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"
          + "\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u023c"
          + "\0\u1600\0\u162c\0\u1658\0\u023c\0\u023c\0\u1684\0\u16b0\0\u16dc"
          + "\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"
          + "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u023c\0\u023c\0\u1918\0\u023c"
          + "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"
          + "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"
          + "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"
          + "\0\u1d64\0\u1d90\0\u023c\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c"
          + "\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u023c\0\u023c"
          + "\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u023c\0\u023c\0\u207c"
          + "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc"
          + "\0\u2208\0\u2234\0\u2260\0\u023c\0\u023c\0\u228c\0\u22b8\0\u22e4"
          + "\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444"
          + "\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u023c\0\u2520\0\u254c\0\u2578"
          + "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u0554\0\u26ac"
          + "\0\u26d8\0\u2704\0\u2730\0\u275c\0\u023c\0\u2788\0\u27b4\0\u27e0"
          + "\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940"
          + "\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0"
          + "\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00"
          + "\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60"
          + "\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0"
          + "\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020"
          + "\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180"
          + "\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4\0\u32e0"
          + "\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u3440"
          + "\0\u346c\0\u3498\0\u34c4\0\u34f0\0\u023c\0\u351c\0\u3548\0\u3574"
          + "\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650\0\u367c\0\u36a8\0\u36d4"
          + "\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u3834"
          + "\0\u3860\0\u388c";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** The transition table of the DFA */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\13\3\14\3\15\6\13\2\15\1\13\1\15\1\16"
          + "\1\13\31\15\1\17\3\14\1\20\1\21\1\22\1\23"
          + "\1\24\1\17\1\25\1\26\1\27\1\30\1\21\1\31"
          + "\1\32\1\33\1\34\1\21\1\35\1\36\1\21\1\37"
          + "\1\40\1\41\2\21\1\42\1\21\1\43\1\44\5\21"
          + "\1\45\1\46\1\47\1\50\1\51\2\21\4\15\1\52"
          + "\55\15\1\53\45\15\1\54\3\0\10\54\1\55\37\54"
          + "\1\0\1\56\15\0\1\56\34\0\1\17\3\57\1\60"
          + "\1\61\1\62\6\17\2\61\1\17\1\63\1\64\1\17"
          + "\31\61\6\17\1\65\51\17\1\66\47\17\1\67\3\70"
          + "\50\67\55\0\3\14\15\0\1\71\34\0\1\14\1\72"
          + "\55\0\1\21\3\0\1\21\2\0\3\21\1\0\1\21"
          + "\2\0\31\21\5\0\1\21\3\0\1\21\2\0\1\21"
          + "\1\30\1\21\1\0\1\21\2\0\31\21\5\0\1\32"
          + "\3\0\2\32\1\0\3\32\1\0\1\32\2\0\31\32"
          + "\5\0\1\21\3\0\1\21\2\0\3\21\1\0\1\21"
          + "\2\0\14\21\1\73\7\21\1\74\4\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\25\21"
          + "\1\75\3\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\5\21\1\76\23\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\27\21"
          + "\1\77\1\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\11\21\1\100\17\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\16\21"
          + "\1\101\12\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\11\21\1\102\17\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\1\21"
          + "\1\103\3\21\1\104\11\21\1\105\11\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\2\21"
          + "\1\106\1\21\1\107\24\21\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\1\21\1\110\3\21"
          + "\1\111\3\21\1\112\5\21\1\113\11\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\114\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\16\21\1\115\12\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\116\17\21\2\117\2\0\1\120\1\117\1\0\45\117"
          + "\2\121\3\0\1\121\1\122\45\121\1\54\3\0\50\54"
          + "\14\0\1\123\1\0\1\124\1\125\3\0\31\124\1\0"
          + "\3\57\15\0\1\126\37\0\1\61\3\0\1\61\2\0"
          + "\3\61\1\0\1\61\2\0\31\61\5\0\1\63\3\0"
          + "\2\63\1\0\3\63\1\0\1\63\2\0\31\63\2\0"
          + "\1\57\1\127\50\0\2\65\2\0\2\65\1\130\45\65"
          + "\2\66\2\0\1\131\47\66\2\0\1\14\56\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\14\21"
          + "\1\132\14\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\24\21\1\133\4\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\134\17\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\20\21\1\135\10\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\3\21"
          + "\1\136\25\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\14\21\1\137\14\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\24\21"
          + "\1\140\4\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\16\21\1\141\12\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\2\21"
          + "\1\142\26\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\24\21\1\143\4\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\1\21"
          + "\1\144\27\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\25\21\1\145\3\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\146\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\15\21\1\147\13\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\24\21"
          + "\1\150\4\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\2\21\1\151\26\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\15\21"
          + "\1\152\13\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\23\21\1\153\5\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\154\17\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\23\21\1\155\5\21\2\117\2\0"
          + "\1\156\1\117\1\0\45\117\2\121\3\0\1\121\1\157"
          + "\45\121\16\0\1\124\1\125\3\0\1\124\1\160\2\124"
          + "\1\161\1\162\1\124\1\163\4\124\1\164\2\124\1\165"
          + "\1\166\1\167\3\124\1\170\3\124\16\0\1\124\1\125"
          + "\3\0\31\124\2\0\1\57\56\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\20\21\1\171\1\21"
          + "\1\172\6\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\22\21\1\173\6\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\14\21"
          + "\1\174\14\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\23\21\1\175\5\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\176\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\24\21\1\177\4\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\200\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\4\21\1\201\24\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\202\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\4\21\1\203\24\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\204\17\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\20\21\1\205\10\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\206\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\14\21\1\207\14\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\5\21"
          + "\1\210\23\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\24\21\1\211\4\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\17\21"
          + "\1\212\11\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\11\21\1\213\17\21\16\0\1\124"
          + "\1\125\3\0\23\124\1\214\5\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\215\23\124\16\0\1\124\1\125\3\0"
          + "\27\124\1\216\1\124\16\0\1\124\1\125\3\0\22\124"
          + "\1\217\6\124\16\0\1\124\1\125\3\0\17\124\1\220"
          + "\11\124\16\0\1\124\1\125\3\0\22\124\1\221\2\124"
          + "\1\222\3\124\16\0\1\124\1\125\3\0\1\124\1\223"
          + "\20\124\1\224\6\124\16\0\1\124\1\125\3\0\25\124"
          + "\1\225\3\124\16\0\1\124\1\125\3\0\16\124\1\226"
          + "\12\124\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\1\21\1\227\27\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\4\21\1\230"
          + "\24\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\4\21\1\231\24\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\20\21\1\232"
          + "\10\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\5\21\1\233\23\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\22\21\1\234"
          + "\6\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\14\21\1\235\14\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\6\21\1\236"
          + "\22\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\14\21\1\237\14\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\23\21\1\240"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\1\241\30\21\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\11\21\1\242\17\21"
          + "\5\0\1\21\3\0\1\21\2\0\3\21\1\0\1\21"
          + "\2\0\20\21\1\243\10\21\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\23\21\1\244\5\21"
          + "\5\0\1\21\3\0\1\21\2\0\3\21\1\0\1\21"
          + "\2\0\16\21\1\245\12\21\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\2\21\1\246\26\21"
          + "\16\0\1\124\1\125\3\0\20\124\1\247\10\124\16\0"
          + "\1\124\1\125\3\0\14\124\1\250\14\124\16\0\1\124"
          + "\1\125\3\0\20\124\1\251\10\124\16\0\1\124\1\125"
          + "\3\0\1\124\1\252\27\124\16\0\1\124\1\125\3\0"
          + "\1\124\1\253\27\124\16\0\1\124\1\125\3\0\4\124"
          + "\1\254\24\124\16\0\1\124\1\125\3\0\24\124\1\255"
          + "\4\124\16\0\1\124\1\125\3\0\3\124\1\256\25\124"
          + "\16\0\1\124\1\125\3\0\17\124\1\257\11\124\16\0"
          + "\1\124\1\125\3\0\5\124\1\260\23\124\16\0\1\124"
          + "\1\125\3\0\11\124\1\261\17\124\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\24\21\1\262"
          + "\4\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\5\21\1\263\23\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\6\21\1\264"
          + "\22\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\24\21\1\265\4\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\22\21\1\266"
          + "\6\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\23\21\1\267\5\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\23\21\1\270"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\11\21\1\271\17\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\4\21\1\272"
          + "\24\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\20\21\1\273\10\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\16\21\1\274"
          + "\12\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\1\21\1\275\27\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\14\21\1\276"
          + "\14\21\16\0\1\124\1\125\3\0\5\124\1\277\23\124"
          + "\16\0\1\124\1\125\3\0\5\124\1\300\23\124\16\0"
          + "\1\124\1\125\3\0\5\124\1\301\23\124\16\0\1\124"
          + "\1\125\3\0\20\124\1\302\10\124\16\0\1\124\1\125"
          + "\3\0\4\124\1\303\24\124\16\0\1\124\1\125\3\0"
          + "\5\124\1\304\23\124\16\0\1\124\1\125\3\0\20\124"
          + "\1\305\10\124\16\0\1\124\1\125\3\0\13\124\1\306"
          + "\15\124\16\0\1\124\1\125\3\0\24\124\1\307\4\124"
          + "\16\0\1\124\1\125\3\0\22\124\1\310\6\124\16\0"
          + "\1\124\1\125\3\0\26\124\1\311\2\124\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\10\21"
          + "\1\312\20\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\20\21\1\313\10\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\314\17\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\5\21\1\315\23\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\14\21"
          + "\1\316\14\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\6\21\1\317\22\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\13\21"
          + "\1\320\15\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\7\21\1\321\21\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\24\21"
          + "\1\322\4\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\5\21\1\323\23\21\16\0\1\124"
          + "\1\125\3\0\3\124\1\324\25\124\16\0\1\124\1\125"
          + "\3\0\24\124\1\325\4\124\16\0\1\124\1\125\3\0"
          + "\22\124\1\326\6\124\16\0\1\124\1\125\3\0\10\124"
          + "\1\327\20\124\16\0\1\124\1\125\3\0\11\124\1\330"
          + "\17\124\16\0\1\124\1\125\3\0\22\124\1\331\6\124"
          + "\16\0\1\124\1\125\3\0\25\124\1\332\3\124\16\0"
          + "\1\124\1\125\3\0\1\124\1\333\27\124\16\0\1\124"
          + "\1\125\3\0\17\124\1\334\11\124\16\0\1\124\1\125"
          + "\3\0\30\124\1\335\16\0\1\124\1\125\3\0\5\124"
          + "\1\336\23\124\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\23\21\1\337\5\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\23\21"
          + "\1\340\5\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\14\21\1\341\14\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\3\21"
          + "\1\342\25\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\5\21\1\343\23\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\11\21"
          + "\1\344\17\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\7\21\1\345\21\21\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\23\21"
          + "\1\346\5\21\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\10\21\1\347\20\21\16\0\1\124"
          + "\1\125\3\0\24\124\1\350\4\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\351\23\124\16\0\1\124\1\125\3\0"
          + "\11\124\1\352\17\124\16\0\1\353\1\125\3\0\31\124"
          + "\16\0\1\124\1\125\3\0\16\124\1\354\12\124\16\0"
          + "\1\124\1\125\3\0\1\355\30\124\16\0\1\124\1\125"
          + "\3\0\24\124\1\356\4\124\16\0\1\124\1\125\3\0"
          + "\7\124\1\357\21\124\16\0\1\360\1\125\3\0\31\124"
          + "\16\0\1\124\1\125\3\0\1\361\30\124\16\0\1\124"
          + "\1\125\3\0\22\124\1\362\6\124\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\5\21\1\363"
          + "\23\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\24\21\1\364\4\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\23\21\1\365"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\14\21\1\366\14\21\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\1\367\30\21"
          + "\16\0\1\124\1\125\3\0\1\370\30\124\16\0\1\124"
          + "\1\125\3\0\4\124\1\371\24\124\16\0\1\124\1\125"
          + "\3\0\15\124\1\372\13\124\16\0\1\124\1\125\3\0"
          + "\3\124\1\373\12\124\1\374\12\124\16\0\1\124\1\125"
          + "\3\0\7\124\1\375\21\124\16\0\1\124\1\125\3\0"
          + "\17\124\1\376\11\124\1\54\1\125\14\54\1\377\1\125"
          + "\3\54\1\u0100\30\377\16\0\1\124\1\125\3\0\5\124"
          + "\1\u0101\23\124\16\0\1\124\1\125\3\0\17\124\1\u0102"
          + "\11\124\16\0\1\124\1\125\3\0\6\124\1\u0103\22\124"
          + "\16\0\1\124\1\125\3\0\23\124\1\u0104\5\124\5\0"
          + "\1\21\3\0\1\21\2\0\3\21\1\0\1\21\2\0"
          + "\23\21\1\u0105\5\21\5\0\1\21\3\0\1\21\2\0"
          + "\3\21\1\0\1\21\2\0\5\21\1\u0106\23\21\5\0"
          + "\1\21\3\0\1\21\2\0\3\21\1\0\1\21\2\0"
          + "\4\21\1\u0107\24\21\16\0\1\124\1\125\3\0\4\124"
          + "\1\u0108\24\124\16\0\1\124\1\125\3\0\1\u0109\30\124"
          + "\16\0\1\124\1\125\3\0\5\124\1\u010a\23\124\16\0"
          + "\1\124\1\125\3\0\17\124\1\u010b\11\124\16\0\1\124"
          + "\1\125\3\0\17\124\1\u010c\11\124\16\0\1\124\1\125"
          + "\3\0\1\u010d\30\124\16\0\1\124\1\125\3\0\25\124"
          + "\1\u010e\3\124\1\54\3\0\12\54\1\377\1\u010f\3\54"
          + "\31\377\1\54\3\0\12\54\1\377\1\u010f\3\54\6\377"
          + "\1\u0110\22\377\16\0\1\124\1\125\3\0\1\u0111\30\124"
          + "\16\0\1\124\1\125\3\0\25\124\1\u0112\3\124\16\0"
          + "\1\124\1\125\3\0\11\124\1\u0113\17\124\16\0\1\124"
          + "\1\125\3\0\5\124\1\u0114\23\124\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\23\21\1\u0115"
          + "\5\21\5\0\1\21\3\0\1\21\2\0\3\21\1\0"
          + "\1\21\2\0\11\21\1\u0116\17\21\16\0\1\124\1\125"
          + "\3\0\5\124\1\u0117\23\124\16\0\1\124\1\125\3\0"
          + "\20\124\1\u0118\10\124\16\0\1\124\1\125\3\0\16\124"
          + "\1\u0119\12\124\16\0\1\124\1\125\3\0\16\124\1\u011a"
          + "\12\124\16\0\1\124\1\125\3\0\4\124\1\u011b\24\124"
          + "\16\0\1\124\1\125\3\0\20\124\1\u011c\10\124\16\0"
          + "\1\124\1\125\3\0\24\124\1\u011d\4\124\1\54\3\0"
          + "\12\54\1\377\1\u010f\3\54\11\377\1\u011e\17\377\16\0"
          + "\1\124\1\125\3\0\20\124\1\u011f\10\124\16\0\1\124"
          + "\1\125\3\0\24\124\1\u0120\4\124\16\0\1\124\1\125"
          + "\3\0\14\124\1\u0121\14\124\16\0\1\124\1\125\3\0"
          + "\1\u0122\30\124\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\22\21\1\u0123\6\21\16\0\1\124"
          + "\1\125\3\0\20\124\1\u0124\10\124\16\0\1\124\1\125"
          + "\3\0\1\124\1\u0125\27\124\16\0\1\124\1\125\3\0"
          + "\24\124\1\u0126\4\124\16\0\1\124\1\125\3\0\4\124"
          + "\1\u0127\24\124\16\0\1\124\1\125\3\0\5\124\1\u0128"
          + "\23\124\16\0\1\124\1\125\3\0\10\124\1\u0129\20\124"
          + "\16\0\1\124\1\125\3\0\20\124\1\u012a\10\124\1\54"
          + "\3\0\12\54\1\377\1\u010f\3\54\14\377\1\u012b\14\377"
          + "\16\0\1\124\1\125\3\0\1\124\1\u012c\27\124\16\0"
          + "\1\124\1\125\3\0\20\124\1\u012d\10\124\16\0\1\124"
          + "\1\125\3\0\5\124\1\u012e\23\124\16\0\1\124\1\125"
          + "\3\0\23\124\1\u012f\5\124\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\5\21\1\u0130\23\21"
          + "\16\0\1\124\1\125\3\0\23\124\1\u012e\5\124\16\0"
          + "\1\124\1\125\3\0\3\124\1\u0131\25\124\16\0\1\124"
          + "\1\125\3\0\1\124\1\u0132\27\124\16\0\1\124\1\125"
          + "\3\0\11\124\1\u0133\17\124\16\0\1\124\1\125\3\0"
          + "\1\u0134\30\124\16\0\1\124\1\125\3\0\1\124\1\u0135"
          + "\27\124\16\0\1\124\1\125\3\0\25\124\1\u0136\3\124"
          + "\1\54\3\0\12\54\1\377\1\u010f\3\54\5\377\1\u0137"
          + "\23\377\16\0\1\124\1\125\3\0\24\124\1\u0138\4\124"
          + "\16\0\1\124\1\125\3\0\25\124\1\u0139\3\124\1\54"
          + "\1\125\14\54\1\377\1\125\3\54\31\377\16\0\1\124"
          + "\1\125\3\0\3\124\1\u013a\25\124\5\0\1\21\3\0"
          + "\1\21\2\0\3\21\1\0\1\21\2\0\3\21\1\u013b"
          + "\25\21\16\0\1\124\1\125\3\0\13\124\1\u013c\15\124"
          + "\16\0\1\124\1\125\3\0\14\124\1\u013d\14\124\16\0"
          + "\1\124\1\125\3\0\24\124\1\u013e\4\124\16\0\1\124"
          + "\1\125\3\0\14\124\1\u013f\14\124\16\0\1\124\1\125"
          + "\3\0\23\124\1\u0140\5\124\16\0\1\124\1\125\3\0"
          + "\24\124\1\u012e\4\124\1\54\1\125\14\54\1\377\1\u010f"
          + "\3\54\31\377\16\0\1\124\1\125\3\0\10\124\1\u012e"
          + "\20\124\16\0\1\124\1\125\3\0\24\124\1\u0141\4\124"
          + "\16\0\1\124\1\125\3\0\17\124\1\u0142\11\124\5\0"
          + "\1\21\3\0\1\21\2\0\3\21\1\0\1\21\2\0"
          + "\24\21\1\u0143\4\21\16\0\1\124\1\125\3\0\1\124"
          + "\1\u0144\27\124\16\0\1\124\1\125\3\0\1\u0145\30\124"
          + "\16\0\1\124\1\125\3\0\11\124\1\u0146\17\124\16\0"
          + "\1\124\1\125\3\0\11\124\1\u0147\17\124\16\0\1\124"
          + "\1\125\3\0\5\124\1\u0148\23\124\16\0\1\124\1\125"
          + "\3\0\1\u0149\30\124\16\0\1\124\1\125\3\0\20\124"
          + "\1\u0121\10\124\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\1\u014a\30\21\16\0\1\124\1\125"
          + "\3\0\7\124\1\u014b\21\124\16\0\1\124\1\125\3\0"
          + "\22\124\1\u014c\6\124\16\0\1\124\1\125\3\0\17\124"
          + "\1\u014d\11\124\16\0\1\124\1\125\3\0\15\124\1\u014e"
          + "\13\124\16\0\1\124\1\125\3\0\1\u014f\30\124\16\0"
          + "\1\124\1\125\3\0\22\124\1\u0150\6\124\5\0\1\21"
          + "\3\0\1\21\2\0\3\21\1\0\1\21\2\0\22\21"
          + "\1\u0151\6\21\16\0\1\124\1\125\3\0\5\124\1\u0124"
          + "\23\124\16\0\1\124\1\125\3\0\5\124\1\u0152\23\124"
          + "\16\0\1\124\1\125\3\0\16\124\1\u0153\12\124\16\0"
          + "\1\124\1\125\3\0\11\124\1\u0136\17\124\16\0\1\124"
          + "\1\125\3\0\24\124\1\u0154\4\124\16\0\1\124\1\125"
          + "\3\0\25\124\1\u0155\3\124\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\4\21\1\u0156\24\21"
          + "\16\0\1\124\1\125\3\0\20\124\1\u0157\10\124\16\0"
          + "\1\124\1\125\3\0\1\124\1\u0158\27\124\16\0\1\124"
          + "\1\125\3\0\10\124\1\u0159\20\124\16\0\1\124\1\125"
          + "\3\0\14\124\1\u015a\14\124\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\5\21\1\u015b\23\21"
          + "\16\0\1\124\1\125\3\0\17\124\1\u015c\11\124\16\0"
          + "\1\124\1\125\3\0\14\124\1\u015d\14\124\16\0\1\124"
          + "\1\125\3\0\22\124\1\u015e\6\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\u015f\23\124\5\0\1\21\3\0\1\21"
          + "\2\0\3\21\1\0\1\21\2\0\20\21\1\u0160\10\21"
          + "\16\0\1\124\1\125\3\0\23\124\1\u0161\5\124\16\0"
          + "\1\124\1\125\3\0\1\u0162\30\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\u0163\23\124\16\0\1\124\1\125\3\0"
          + "\1\u0164\30\124\5\0\1\21\3\0\1\21\2\0\3\21"
          + "\1\0\1\21\2\0\23\21\1\u0165\5\21\16\0\1\124"
          + "\1\125\3\0\11\124\1\u0166\17\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\u0167\23\124\16\0\1\124\1\125\3\0"
          + "\1\124\1\u0168\27\124\16\0\1\124\1\125\3\0\1\124"
          + "\1\u0169\27\124\16\0\1\124\1\125\3\0\24\124\1\u016a"
          + "\4\124\16\0\1\124\1\125\3\0\4\124\1\u016b\24\124"
          + "\16\0\1\124\1\125\3\0\4\124\1\u0124\24\124\16\0"
          + "\1\124\1\125\3\0\24\124\1\u016c\4\124\16\0\1\124"
          + "\1\125\3\0\17\124\1\u016d\11\124\16\0\1\124\1\125"
          + "\3\0\7\124\1\u016e\21\124\16\0\1\124\1\125\3\0"
          + "\24\124\1\u016f\4\124\16\0\1\124\1\125\3\0\22\124"
          + "\1\u0170\6\124\16\0\1\124\1\125\3\0\5\124\1\u0171"
          + "\23\124\16\0\1\124\1\125\3\0\22\124\1\u0124\6\124"
          + "\16\0\1\124\1\125\3\0\30\124\1\u0172\16\0\1\124"
          + "\1\125\3\0\23\124\1\u0128\5\124\16\0\1\124\1\125"
          + "\3\0\1\u0173\30\124\16\0\1\124\1\125\3\0\22\124"
          + "\1\u0174\6\124\16\0\1\124\1\125\3\0\5\124\1\u0175"
          + "\23\124\16\0\1\124\1\125\3\0\23\124\1\u0176\5\124"
          + "\16\0\1\124\1\125\3\0\17\124\1\u0177\11\124\16\0"
          + "\1\124\1\125\3\0\14\124\1\u0178\14\124\16\0\1\124"
          + "\1\125\3\0\26\124\1\u0179\2\124\16\0\1\124\1\125"
          + "\3\0\5\124\1\u017a\23\124\16\0\1\124\1\125\3\0"
          + "\4\124\1\335\24\124";

  private static int[] zzUnpacktrans() {
    int[] result = new int[14520];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState} */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\12\0\1\11\1\1\1\11\1\1\2\11\1\1\6\11"
          + "\1\1\1\11\2\1\1\11\21\1\1\11\1\1\1\11"
          + "\1\1\1\11\4\1\2\11\2\0\25\1\1\11\1\1"
          + "\1\11\2\1\1\11\2\0\2\11\24\1\2\11\u010b\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  _BazelQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /** Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /** Translates raw input code points to DFA table row */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input
        ? ZZ_CMAP_BLOCKS[offset]
        : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false}, iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /** Returns the current lexical state. */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /** Returns the text matched by the current regular expression. */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }

  /**
   * Returns the character at position {@code pos} from the matched text.
   *
   * <p>It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }

  /** Returns the length of the matched text region. */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
   * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
   * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
              yybegin(FLAG);
              yypushback(1);
            }
          // fall through
          case 57:
            break;
          case 2:
            {
              return TokenType.WHITE_SPACE;
            }
          // fall through
          case 58:
            break;
          case 3:
            {
              yybegin(EXPR);
              yypushback(1);
            }
          // fall through
          case 59:
            break;
          case 4:
            {
              yybegin(YYINITIAL);
              yypushback(1);
            }
          // fall through
          case 60:
            break;
          case 5:
            {
              yybegin(WORD_DQ);
              yypushback(1);
            }
          // fall through
          case 61:
            break;
          case 6:
            {
              return BazelQueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 62:
            break;
          case 7:
            {
              yybegin(WORD_SQ);
              yypushback(1);
            }
          // fall through
          case 63:
            break;
          case 8:
            {
              return BazelQueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 64:
            break;
          case 9:
            {
              return BazelQueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 65:
            break;
          case 10:
            {
              return BazelQueryTokenTypes.UNION;
            }
          // fall through
          case 66:
            break;
          case 11:
            {
              return BazelQueryTokenTypes.COMMA;
            }
          // fall through
          case 67:
            break;
          case 12:
            {
              return BazelQueryTokenTypes.EXCEPT;
            }
          // fall through
          case 68:
            break;
          case 13:
            {
              return BazelQueryTokenTypes.INTEGER;
            }
          // fall through
          case 69:
            break;
          case 14:
            {
              return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 70:
            break;
          case 15:
            {
              return BazelQueryTokenTypes.INTERSECT;
            }
          // fall through
          case 71:
            break;
          case 16:
            {
              return BazelQueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 72:
            break;
          case 17:
            {
              return BazelQueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 73:
            break;
          case 18:
            {
              yybegin(YYINITIAL);
              return BazelQueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 74:
            break;
          case 19:
            {
              return BazelQueryTokenTypes.UNFINISHED_FLAG;
            }
          // fall through
          case 75:
            break;
          case 20:
            {
              yybegin(VALUE);
              return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 76:
            break;
          case 21:
            {
              yybegin(YYINITIAL);
              return TokenType.WHITE_SPACE;
            }
          // fall through
          case 77:
            break;
          case 22:
            {
              yybegin(VALUE_DQ);
              yypushback(1);
            }
          // fall through
          case 78:
            break;
          case 23:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 79:
            break;
          case 24:
            {
              yybegin(VALUE_SQ);
              yypushback(1);
            }
          // fall through
          case 80:
            break;
          case 25:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 81:
            break;
          case 26:
            {
              yybegin(YYINITIAL);
              yypushback(1);
              return BazelQueryTokenTypes.MISSING_SPACE;
            }
          // fall through
          case 82:
            break;
          case 27:
            {
              yybegin(YYINITIAL);
              return BazelQueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 83:
            break;
          case 28:
            {
              return BazelQueryTokenTypes.IN;
            }
          // fall through
          case 84:
            break;
          case 29:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 85:
            break;
          case 30:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 86:
            break;
          case 31:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 87:
            break;
          case 32:
            {
              yybegin(PRE_VALUE);
              yypushback(1);
              return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 88:
            break;
          case 33:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 89:
            break;
          case 34:
            {
              yybegin(SPACE_NEEDED);
              return BazelQueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 90:
            break;
          case 35:
            {
              return BazelQueryTokenTypes.LET;
            }
          // fall through
          case 91:
            break;
          case 36:
            {
              return BazelQueryTokenTypes.SET;
            }
          // fall through
          case 92:
            break;
          case 37:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 93:
            break;
          case 38:
            {
              yybegin(EXPR);
              return BazelQueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 94:
            break;
          case 39:
            {
              return BazelQueryTokenTypes.ATTR;
            }
          // fall through
          case 95:
            break;
          case 40:
            {
              return BazelQueryTokenTypes.DEPS;
            }
          // fall through
          case 96:
            break;
          case 41:
            {
              return BazelQueryTokenTypes.KIND;
            }
          // fall through
          case 97:
            break;
          case 42:
            {
              return BazelQueryTokenTypes.SOME;
            }
          // fall through
          case 98:
            break;
          case 43:
            {
              return BazelQueryTokenTypes.RDEPS;
            }
          // fall through
          case 99:
            break;
          case 44:
            {
              return BazelQueryTokenTypes.TESTS;
            }
          // fall through
          case 100:
            break;
          case 45:
            {
              return BazelQueryTokenTypes.FILTER;
            }
          // fall through
          case 101:
            break;
          case 46:
            {
              return BazelQueryTokenTypes.LABELS;
            }
          // fall through
          case 102:
            break;
          case 47:
            {
              return BazelQueryTokenTypes.VISIBLE;
            }
          // fall through
          case 103:
            break;
          case 48:
            {
              return BazelQueryTokenTypes.ALLPATHS;
            }
          // fall through
          case 104:
            break;
          case 49:
            {
              return BazelQueryTokenTypes.ALLRDEPS;
            }
          // fall through
          case 105:
            break;
          case 50:
            {
              return BazelQueryTokenTypes.SIBLINGS;
            }
          // fall through
          case 106:
            break;
          case 51:
            {
              return BazelQueryTokenTypes.SOMEPATH;
            }
          // fall through
          case 107:
            break;
          case 52:
            {
              yybegin(PRE_VALUE);
              return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 108:
            break;
          case 53:
            {
              return BazelQueryTokenTypes.LOADFILES;
            }
          // fall through
          case 109:
            break;
          case 54:
            {
              return BazelQueryTokenTypes.BUILDFILES;
            }
          // fall through
          case 110:
            break;
          case 55:
            {
              return BazelQueryTokenTypes.RBUILDFILES;
            }
          // fall through
          case 111:
            break;
          case 56:
            {
              return BazelQueryTokenTypes.SAME_PKG_DIRECT_RDEPS;
            }
          // fall through
          case 112:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
}
