// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: BazelQuery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelQueryTokenTypes;

@SuppressWarnings("ALL")

class _BazelQueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int WORD_DQ = 4;
  public static final int WORD_SQ = 6;
  public static final int FLAG = 8;
  public static final int PRE_VALUE = 10;
  public static final int VALUE = 12;
  public static final int VALUE_SQ = 14;
  public static final int VALUE_DQ = 16;
  public static final int SPACE_NEEDED = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\4"+
    "\1\5\1\4\1\6\2\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\2\4"+
    "\1\22\1\4\1\23\1\24\1\25\1\16\1\25\1\16"+
    "\16\25\1\16\3\25\1\16\3\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\44\3\23\1\64\44\0"+
    "\1\65\3\0\1\65\u0358\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\15\1\17\1\6\1\4\1\20\15\6\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\4"+
    "\2\32\1\33\1\34\4\0\2\6\1\0\6\6\1\35"+
    "\15\6\2\21\1\36\1\0\6\21\2\22\1\0\1\37"+
    "\6\22\1\24\1\40\1\41\2\0\1\42\1\43\11\6"+
    "\1\44\4\6\1\45\5\6\1\46\2\21\1\47\2\21"+
    "\4\0\1\47\1\0\5\21\1\46\3\21\1\0\1\47"+
    "\1\0\4\21\1\15\1\50\2\22\1\51\2\22\5\0"+
    "\1\51\5\22\1\50\3\22\2\0\1\51\4\22\11\40"+
    "\2\6\1\52\1\6\1\53\3\6\1\54\6\6\1\55"+
    "\3\6\1\46\1\21\2\46\1\47\5\0\2\46\1\21"+
    "\1\0\1\47\1\0\4\21\1\15\2\47\4\0\2\46"+
    "\1\21\1\15\1\21\1\50\1\22\2\50\1\51\5\0"+
    "\2\50\1\22\2\0\1\51\4\22\1\15\1\51\1\0"+
    "\1\51\3\0\2\50\1\22\1\15\1\22\13\40\11\6"+
    "\1\56\3\6\1\57\1\12\1\6\1\46\10\0\1\47"+
    "\4\0\2\46\1\21\1\15\2\21\1\50\11\0\1\51"+
    "\3\0\2\50\1\22\1\15\2\22\13\40\3\6\1\14"+
    "\1\60\1\6\1\61\6\6\12\0\1\21\12\0\1\22"+
    "\13\40\11\6\1\62\12\0\13\40\1\63\1\64\5\6"+
    "\1\65\1\66\2\0\6\40\1\67\4\40\1\6\1\20"+
    "\1\70\2\6\15\40\1\71\2\6\7\40\1\41\5\40"+
    "\1\72\1\6\14\40\1\6\12\40\1\67\1\40\1\6"+
    "\6\40\1\67\3\40\1\6\7\40\1\6\6\40\1\6"+
    "\6\40\1\6\4\40\1\6\4\40\1\6\4\40\1\6"+
    "\4\40\1\73\25\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u021c\0\u0288\0\u021c\0\u021c"+
    "\0\u02be\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u02f4"+
    "\0\u032a\0\u0360\0\u021c\0\u0396\0\u0288\0\u021c\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u021c"+
    "\0\u0762\0\u021c\0\u0798\0\u021c\0\u07ce\0\u0804\0\u083a\0\u021c"+
    "\0\u021c\0\u0288\0\u0870\0\u08a6\0\u0360\0\u08dc\0\u0912\0\u02f4"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u021c\0\u07ce\0\u11b8\0\u021c\0\u021c\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u02be\0\u13d4\0\u140a\0\u1440\0\u1476\0\u02be\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u021c\0\u15ba\0\u15f0\0\u0dec\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u16fe\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u021c"+
    "\0\u021c\0\u1a94\0\u1aca\0\u0fd2\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1bd8\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u02be"+
    "\0\u21c0\0\u02be\0\u21f6\0\u222c\0\u2262\0\u02be\0\u2298\0\u22ce"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\u1734\0\u24b4\0\u1950\0\u0dec\0\u16fe\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u176a\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u1734\0\u25c2\0\u2772\0\u2772"+
    "\0\u27a8\0\u27de\0\u2814\0\u1986\0\u2772\0\u284a\0\u1950\0\u2880"+
    "\0\u1c0e\0\u28b6\0\u1e2a\0\u0fd2\0\u1bd8\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u1c44\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a66"+
    "\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u1c0e\0\u29c4\0\u2b74\0\u2b74"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u1e60\0\u2b74\0\u2c4c\0\u1e2a\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32"+
    "\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2"+
    "\0\u3018\0\u304e\0\u3084\0\u30ba\0\u02be\0\u30f0\0\u3126\0\u315c"+
    "\0\u02be\0\u02be\0\u3192\0\u262e\0\u31c8\0\u31fe\0\u3234\0\u326a"+
    "\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u3378\0\u33ae\0\u33e4"+
    "\0\u341a\0\u2664\0\u3378\0\u3450\0\u262e\0\u3486\0\u34bc\0\u2a30"+
    "\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c"+
    "\0\u36a2\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u2a66\0\u36a2\0\u377a"+
    "\0\u2a30\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4"+
    "\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u02be\0\u02be\0\u3b10\0\u02be\0\u3b46\0\u3b7c\0\u3bb2"+
    "\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2"+
    "\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272"+
    "\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422"+
    "\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u02be\0\u4566\0\u459c"+
    "\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c"+
    "\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc"+
    "\0\u4932\0\u4968\0\u499e\0\u02be\0\u02be\0\u49d4\0\u4a0a\0\u4a40"+
    "\0\u4a76\0\u4aac\0\u02be\0\u02be\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84"+
    "\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34"+
    "\0\u4d6a\0\u4da0\0\u02be\0\u02be\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78"+
    "\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028"+
    "\0\u505e\0\u5094\0\u50ca\0\u02be\0\u5100\0\u5136\0\u516c\0\u51a2"+
    "\0\u51d8\0\u520e\0\u5244\0\u527a\0\u52b0\0\u06f6\0\u52e6\0\u531c"+
    "\0\u5352\0\u5388\0\u53be\0\u02be\0\u53f4\0\u542a\0\u5460\0\u5496"+
    "\0\u54cc\0\u5502\0\u5538\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646"+
    "\0\u567c\0\u56b2\0\u56e8\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6"+
    "\0\u582c\0\u5862\0\u5898\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6"+
    "\0\u59dc\0\u5a12\0\u5a48\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56"+
    "\0\u5b8c\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06"+
    "\0\u5d3c\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066"+
    "\0\u609c\0\u60d2\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216"+
    "\0\u624c\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390\0\u63c6"+
    "\0\u63fc\0\u6432\0\u6468\0\u02be\0\u649e\0\u64d4\0\u650a\0\u6540"+
    "\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e\0\u6684\0\u66ba\0\u66f0"+
    "\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0"+
    "\0\u68d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\3\14\1\13\4\15\5\13\4\15\2\13\3\15"+
    "\1\16\1\15\1\13\33\15\1\13\1\17\3\14\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\17\1\25\1\26"+
    "\1\27\1\21\1\30\1\31\1\32\1\33\1\17\1\34"+
    "\2\21\1\35\1\21\1\36\1\21\1\37\1\40\1\21"+
    "\1\41\1\42\1\43\2\21\1\44\1\21\1\45\1\46"+
    "\5\21\1\47\1\50\1\51\1\52\1\53\4\21\1\17"+
    "\5\15\1\54\67\15\1\55\56\15\1\56\3\0\11\56"+
    "\1\57\50\56\1\0\1\60\20\0\1\60\43\0\1\17"+
    "\3\61\1\17\1\62\1\63\1\64\6\17\4\63\2\17"+
    "\3\63\1\65\1\63\1\17\33\63\10\17\1\66\63\17"+
    "\1\67\60\17\1\70\3\71\62\70\67\0\3\14\23\0"+
    "\1\72\40\0\1\14\1\73\70\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\33\21\20\0\1\21\54\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\31\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\33\21\7\0\1\76\3\0\1\76"+
    "\2\0\2\76\1\0\1\76\3\0\3\76\1\0\1\76"+
    "\1\0\33\76\14\0\1\77\1\0\2\77\1\100\1\77"+
    "\3\0\2\77\4\0\32\77\10\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\14\21\1\101\7\21\1\102\6\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\25\21\1\103\5\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\5\21\1\104"+
    "\25\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\30\21"+
    "\1\105\2\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\11\21\1\106\21\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\16\21\1\107\14\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\11\21\1\110\21\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\1\21\1\111\3\21\1\112\11\21"+
    "\1\113\13\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\2\21\1\114\1\21\1\115\26\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\1\21\1\116\3\21\1\117\3\21"+
    "\1\120\5\21\1\121\13\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\5\21\1\122\25\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\16\21\1\123\14\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\11\21\1\124\21\21\1\0"+
    "\2\125\2\0\1\126\1\127\1\126\1\130\1\131\6\126"+
    "\1\132\1\126\1\133\2\126\1\134\1\126\1\135\1\136"+
    "\35\126\1\125\2\137\2\0\1\140\1\141\1\140\1\142"+
    "\1\143\6\140\1\144\1\140\1\145\2\140\1\146\1\140"+
    "\1\147\1\150\35\140\1\137\1\56\3\0\62\56\15\0"+
    "\1\151\3\0\1\152\1\153\7\0\32\152\3\0\3\61"+
    "\23\0\1\154\44\0\1\63\3\0\1\63\2\0\5\63"+
    "\2\0\3\63\1\0\1\63\1\0\33\63\3\0\1\61"+
    "\1\155\62\0\2\66\2\0\3\66\1\156\17\66\1\0"+
    "\36\66\2\67\2\0\1\67\1\157\21\67\1\0\36\67"+
    "\2\0\1\14\71\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\0\1\21\3\0\3\21\1\0\1\21\1\0\33\21"+
    "\7\0\1\76\3\0\1\76\2\0\2\76\1\75\1\76"+
    "\3\0\3\76\1\0\1\76\1\0\33\76\14\0\1\77"+
    "\1\0\2\77\1\100\1\77\4\0\1\77\4\0\32\77"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\14\21\1\160"+
    "\16\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\24\21"+
    "\1\161\6\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\11\21\1\162\21\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\20\21\1\163\12\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\3\21\1\164\27\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\14\21\1\165\16\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\166\6\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\16\21\1\167\14\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\2\21\1\170"+
    "\30\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\24\21"+
    "\1\171\6\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\1\21\1\172\31\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\25\21\1\173\5\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\5\21\1\174\25\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\15\21\1\175\15\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\176\6\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\2\21\1\177\30\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\15\21\1\200"+
    "\15\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\23\21"+
    "\1\201\7\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\11\21\1\202\21\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\23\21\1\203\7\21\1\0\2\125\2\0\1\125"+
    "\1\204\1\125\1\0\1\205\15\125\1\206\1\136\40\125"+
    "\2\0\1\126\1\207\1\126\1\130\1\131\6\126\1\210"+
    "\1\126\1\133\4\126\1\135\1\136\35\126\1\211\4\0"+
    "\1\130\1\207\11\130\1\212\1\130\1\213\5\130\1\0"+
    "\35\130\1\214\2\205\2\215\1\131\1\216\1\131\1\217"+
    "\1\131\1\126\5\131\1\220\1\131\1\221\4\131\1\222"+
    "\1\223\35\131\1\224\2\125\2\0\1\125\1\204\1\125"+
    "\1\0\1\205\6\125\1\126\6\125\1\206\1\136\40\125"+
    "\2\0\1\211\1\225\1\211\1\214\1\224\6\211\1\125"+
    "\1\211\1\125\4\211\1\226\1\136\36\211\2\125\2\0"+
    "\1\126\1\207\1\126\1\130\1\131\2\126\1\227\1\126"+
    "\2\227\1\230\1\227\1\133\2\126\2\227\1\135\1\136"+
    "\2\126\32\227\1\126\1\211\2\206\2\231\1\135\1\232"+
    "\1\135\1\233\1\222\6\135\1\234\1\135\1\235\5\135"+
    "\1\236\1\126\34\135\1\226\2\237\2\0\1\237\1\240"+
    "\1\125\1\0\4\125\2\237\1\125\4\237\1\125\2\237"+
    "\4\125\2\237\1\125\1\237\1\125\1\237\1\125\7\237"+
    "\1\125\3\237\3\125\1\237\2\125\4\237\2\137\2\0"+
    "\1\137\1\0\1\137\1\241\1\242\15\137\1\243\1\150"+
    "\40\137\2\0\1\140\1\141\1\140\1\244\1\143\6\140"+
    "\1\245\1\140\1\145\4\140\1\147\1\150\35\140\1\246"+
    "\4\0\3\141\1\244\7\141\1\247\1\141\1\250\5\141"+
    "\1\0\35\141\1\251\2\242\2\252\1\143\1\253\1\143"+
    "\1\254\1\143\1\140\5\143\1\255\1\143\1\256\4\143"+
    "\1\257\1\260\35\143\1\261\2\137\2\0\1\137\1\0"+
    "\1\137\1\241\1\242\6\137\1\140\6\137\1\243\1\150"+
    "\40\137\2\0\1\246\1\251\1\246\1\262\1\261\6\246"+
    "\1\137\1\246\1\137\4\246\1\263\1\150\36\246\2\137"+
    "\2\0\1\140\1\141\1\140\1\244\1\143\2\140\1\264"+
    "\1\140\2\264\1\265\1\264\1\145\2\140\2\264\1\147"+
    "\1\150\2\140\32\264\1\140\1\246\2\243\2\266\1\147"+
    "\1\267\1\147\1\270\1\257\6\147\1\271\1\147\1\272"+
    "\5\147\1\273\1\140\34\147\1\263\2\274\2\0\1\274"+
    "\1\0\1\137\1\240\4\137\2\274\1\137\4\274\1\137"+
    "\2\274\4\137\2\274\1\137\1\274\1\137\1\274\1\137"+
    "\7\274\1\137\3\274\3\137\1\274\2\137\4\274\21\0"+
    "\1\152\1\153\7\0\1\152\1\275\2\152\1\276\1\277"+
    "\1\152\1\300\4\152\1\301\2\152\1\302\1\303\1\304"+
    "\3\152\1\305\4\152\23\0\1\152\1\153\7\0\32\152"+
    "\4\0\1\61\71\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\20\21\1\306\1\21\1\307\10\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\22\21\1\310\10\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\14\21\1\311\16\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\23\21\1\312\7\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\5\21\1\313"+
    "\25\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\24\21"+
    "\1\314\6\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\5\21\1\315\25\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\4\21\1\316\26\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\5\21\1\317\25\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\4\21\1\320\26\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\11\21\1\321\21\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\20\21\1\322\12\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\5\21\1\323"+
    "\25\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\14\21"+
    "\1\324\16\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\5\21\1\325\25\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\24\21\1\326\6\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\17\21\1\327\13\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\11\21\1\330\21\21\1\0\2\205"+
    "\2\215\1\205\1\331\1\205\1\215\1\205\1\125\14\205"+
    "\1\332\1\223\36\205\2\206\2\231\1\206\1\333\1\206"+
    "\1\231\1\332\16\206\1\236\1\125\35\206\2\125\2\0"+
    "\1\126\1\334\1\126\1\130\1\131\6\126\1\125\1\126"+
    "\1\125\4\126\1\135\1\136\35\126\1\211\2\125\2\0"+
    "\1\211\1\335\1\211\1\214\1\224\6\211\1\133\1\211"+
    "\1\125\4\211\1\226\1\136\36\211\4\0\13\130\1\0"+
    "\1\130\1\0\5\130\1\0\35\130\1\214\4\0\13\214"+
    "\1\0\1\214\1\0\5\214\1\0\36\214\4\0\1\214"+
    "\1\335\11\214\1\213\1\214\1\0\5\214\1\0\36\214"+
    "\10\215\1\0\1\336\60\215\1\217\1\216\2\217\1\130"+
    "\1\337\5\217\1\340\1\217\1\341\5\217\1\215\35\217"+
    "\1\342\2\205\2\215\1\131\1\343\1\131\1\217\1\131"+
    "\1\126\5\131\1\205\1\131\1\205\4\131\1\222\1\223"+
    "\35\131\1\224\2\205\2\215\1\224\1\344\1\224\1\342"+
    "\1\224\1\211\5\224\1\205\1\224\1\205\4\224\1\345"+
    "\1\223\36\224\2\332\2\346\1\222\1\347\1\222\1\350"+
    "\1\222\1\135\5\222\1\351\1\222\1\352\5\222\1\353"+
    "\1\131\34\222\1\345\2\354\2\215\1\354\1\355\1\205"+
    "\1\215\2\125\2\205\2\354\1\205\4\354\1\205\2\354"+
    "\4\205\2\354\1\205\1\354\1\205\1\354\1\205\7\354"+
    "\1\205\3\354\3\205\1\354\2\205\4\354\2\205\2\215"+
    "\1\224\1\356\1\224\1\342\1\224\1\211\5\224\1\221"+
    "\1\224\1\205\4\224\1\345\1\223\36\224\2\206\2\231"+
    "\1\226\1\357\1\226\1\360\1\345\6\226\1\235\1\226"+
    "\1\206\5\226\1\236\1\211\35\226\2\125\2\0\1\126"+
    "\1\207\1\126\1\130\1\131\2\126\1\227\1\126\2\227"+
    "\1\230\1\227\1\133\3\126\1\227\1\135\1\136\2\126"+
    "\32\227\1\126\1\211\2\125\2\0\1\126\1\334\1\126"+
    "\1\130\1\131\10\126\1\125\4\126\1\135\1\136\35\126"+
    "\1\211\26\231\1\0\1\361\1\336\41\231\1\233\1\232"+
    "\11\233\1\362\1\233\1\363\4\233\1\130\1\361\1\337"+
    "\34\233\1\360\2\206\2\231\1\135\1\364\1\135\1\233"+
    "\1\222\6\135\1\206\1\135\1\206\5\135\1\236\1\126"+
    "\34\135\1\226\2\206\2\231\1\226\1\365\1\226\1\360"+
    "\1\345\6\226\1\206\1\226\1\206\5\226\1\236\1\211"+
    "\35\226\2\366\2\231\1\366\1\367\1\206\1\231\4\206"+
    "\2\366\1\206\4\366\1\206\2\366\1\206\1\370\2\206"+
    "\2\366\1\206\1\366\1\206\1\366\1\206\7\366\1\206"+
    "\3\366\3\206\1\366\2\206\4\366\2\237\2\0\1\237"+
    "\1\240\1\237\1\0\56\237\2\242\2\252\1\242\1\252"+
    "\1\242\1\371\1\242\1\137\14\242\1\372\1\260\36\242"+
    "\2\243\2\266\1\243\1\266\1\243\1\373\1\372\16\243"+
    "\1\273\1\137\35\243\2\137\2\0\1\140\1\141\1\140"+
    "\1\374\1\143\6\140\1\137\1\140\1\137\4\140\1\147"+
    "\1\150\35\140\1\246\2\137\2\0\1\246\1\251\1\246"+
    "\1\375\1\261\6\246\1\145\1\246\1\137\4\246\1\263"+
    "\1\150\36\246\4\0\13\141\1\0\1\141\1\0\5\141"+
    "\1\0\35\141\1\251\4\0\13\251\1\0\1\251\1\0"+
    "\5\251\1\0\36\251\4\0\3\251\1\375\7\251\1\250"+
    "\1\251\1\0\5\251\1\0\36\251\10\252\1\0\1\376"+
    "\60\252\3\253\1\254\1\141\1\377\5\253\1\u0100\1\253"+
    "\1\u0101\5\253\1\252\35\253\1\u0102\2\242\2\252\1\143"+
    "\1\253\1\143\1\u0103\1\143\1\140\5\143\1\242\1\143"+
    "\1\242\4\143\1\257\1\260\35\143\1\261\2\242\2\252"+
    "\1\261\1\u0102\1\261\1\u0104\1\261\1\246\5\261\1\242"+
    "\1\261\1\242\4\261\1\u0105\1\260\36\261\2\372\2\u0106"+
    "\1\257\1\u0107\1\257\1\u0108\1\257\1\147\5\257\1\u0109"+
    "\1\257\1\u010a\5\257\1\u010b\1\143\34\257\1\u0105\2\u010c"+
    "\2\252\1\u010c\1\252\1\242\1\u010d\2\137\2\242\2\u010c"+
    "\1\242\4\u010c\1\242\2\u010c\4\242\2\u010c\1\242\1\u010c"+
    "\1\242\1\u010c\1\242\7\u010c\1\242\3\u010c\3\242\1\u010c"+
    "\2\242\4\u010c\2\242\2\252\1\261\1\u0102\1\261\1\u010e"+
    "\1\261\1\246\5\261\1\256\1\261\1\242\4\261\1\u0105"+
    "\1\260\36\261\2\243\2\266\1\263\1\u010f\1\263\1\u0110"+
    "\1\u0105\6\263\1\272\1\263\1\243\5\263\1\273\1\246"+
    "\35\263\2\137\2\0\1\140\1\141\1\140\1\244\1\143"+
    "\2\140\1\264\1\140\2\264\1\265\1\264\1\145\3\140"+
    "\1\264\1\147\1\150\2\140\32\264\1\140\1\246\2\137"+
    "\2\0\1\140\1\141\1\140\1\374\1\143\10\140\1\137"+
    "\4\140\1\147\1\150\35\140\1\246\26\266\1\0\1\u0111"+
    "\1\376\41\266\3\267\1\270\7\267\1\u0112\1\267\1\u0113"+
    "\4\267\1\141\1\u0111\1\377\34\267\1\u010f\2\243\2\266"+
    "\1\147\1\267\1\147\1\u0114\1\257\6\147\1\243\1\147"+
    "\1\243\5\147\1\273\1\140\34\147\1\263\2\243\2\266"+
    "\1\263\1\u010f\1\263\1\u0115\1\u0105\6\263\1\243\1\263"+
    "\1\243\5\263\1\273\1\246\35\263\2\u0116\2\266\1\u0116"+
    "\1\266\1\243\1\u0117\4\243\2\u0116\1\243\4\u0116\1\243"+
    "\2\u0116\1\243\1\u0118\2\243\2\u0116\1\243\1\u0116\1\243"+
    "\1\u0116\1\243\7\u0116\1\243\3\u0116\3\243\1\u0116\2\243"+
    "\4\u0116\2\274\2\0\1\274\1\0\1\274\1\240\56\274"+
    "\21\0\1\152\1\153\7\0\23\152\1\u0119\6\152\23\0"+
    "\1\152\1\153\7\0\5\152\1\u011a\24\152\23\0\1\152"+
    "\1\153\7\0\30\152\1\u011b\1\152\23\0\1\152\1\153"+
    "\7\0\22\152\1\u011c\7\152\23\0\1\152\1\153\7\0"+
    "\17\152\1\u011d\12\152\23\0\1\152\1\153\7\0\22\152"+
    "\1\u011e\2\152\1\u011f\4\152\23\0\1\152\1\153\7\0"+
    "\1\152\1\u0120\20\152\1\u0121\7\152\23\0\1\152\1\153"+
    "\7\0\25\152\1\u0122\4\152\23\0\1\152\1\153\7\0"+
    "\16\152\1\u0123\13\152\10\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\1\21\1\u0124\31\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\4\21\1\u0125\26\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\4\21\1\u0126\26\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\20\21\1\u0127\12\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\5\21\1\u0128\25\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\22\21\1\u0129"+
    "\10\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\14\21"+
    "\1\u012a\16\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\6\21\1\u012b\24\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\14\21\1\u012c\16\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\23\21\1\u012d\7\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\1\u012e\32\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\11\21\1\u012f\21\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\20\21\1\u0130\12\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\23\21\1\u0131\7\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\16\21\1\u0132"+
    "\14\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\2\21"+
    "\1\u0133\30\21\1\0\2\332\2\346\1\332\1\u0134\1\332"+
    "\1\346\1\332\1\206\15\332\1\353\1\205\35\332\2\336"+
    "\2\0\1\336\1\204\1\336\1\0\1\u0135\15\336\1\u0136"+
    "\1\u0137\40\336\2\0\1\337\1\207\1\337\1\130\1\u0138"+
    "\6\337\1\u0139\1\337\1\u013a\4\337\1\u013b\1\u0137\35\337"+
    "\1\u013c\4\215\4\217\1\130\1\337\5\217\1\215\1\217"+
    "\1\215\5\217\1\215\35\217\1\342\4\215\4\342\1\214"+
    "\1\u013c\5\342\1\215\1\342\1\215\5\342\1\215\36\342"+
    "\4\215\1\342\1\356\2\342\1\214\1\u013c\5\342\1\341"+
    "\1\342\1\215\5\342\1\215\36\342\2\332\2\346\1\345"+
    "\1\u013d\1\345\1\u013e\1\345\1\226\5\345\1\352\1\345"+
    "\1\332\5\345\1\353\1\224\35\345\10\346\1\231\1\u0136"+
    "\14\346\1\215\1\u013f\1\u0135\41\346\1\350\1\347\2\350"+
    "\1\233\1\u013b\5\350\1\u0140\1\350\1\u0141\4\350\1\217"+
    "\1\u013f\1\u0138\34\350\1\u013e\2\332\2\346\1\222\1\u0142"+
    "\1\222\1\350\1\222\1\135\5\222\1\332\1\222\1\332"+
    "\5\222\1\353\1\131\34\222\1\345\2\332\2\346\1\345"+
    "\1\u0143\1\345\1\u013e\1\345\1\226\5\345\1\332\1\345"+
    "\1\332\5\345\1\353\1\224\35\345\2\u0144\2\346\1\u0144"+
    "\1\u0145\1\332\1\346\2\206\2\332\2\u0144\1\332\4\u0144"+
    "\1\332\2\u0144\1\332\1\u0146\2\332\2\u0144\1\332\1\u0144"+
    "\1\332\1\u0144\1\332\7\u0144\1\332\3\u0144\3\332\1\u0144"+
    "\2\332\4\u0144\2\354\2\215\1\354\1\355\1\354\1\215"+
    "\1\237\1\125\54\354\4\231\1\360\1\357\11\360\1\363"+
    "\1\360\1\231\4\360\1\214\1\361\1\u013c\35\360\27\231"+
    "\1\361\1\u0136\41\231\13\233\1\231\1\233\1\231\4\233"+
    "\1\130\1\361\1\337\34\233\1\360\4\231\13\360\1\231"+
    "\1\360\1\231\4\360\1\214\1\361\1\u013c\35\360\2\366"+
    "\2\231\1\366\1\367\1\366\1\231\16\366\1\237\1\u0147"+
    "\1\125\35\366\2\206\2\231\1\206\1\333\1\206\1\231"+
    "\1\332\16\206\1\236\36\206\2\372\2\u0106\1\372\1\u0106"+
    "\1\372\1\u0148\1\372\1\243\15\372\1\u010b\1\242\35\372"+
    "\2\376\2\0\1\376\1\0\1\376\1\241\1\u0149\15\376"+
    "\1\u014a\1\u014b\40\376\2\0\1\377\1\141\1\377\1\244"+
    "\1\u014c\6\377\1\u014d\1\377\1\u014e\4\377\1\u014f\1\u014b"+
    "\35\377\1\u0150\4\252\4\253\1\141\1\377\5\253\1\252"+
    "\1\253\1\252\5\253\1\252\35\253\1\u0102\4\252\4\u0102"+
    "\1\251\1\u0150\5\u0102\1\252\1\u0102\1\252\5\u0102\1\252"+
    "\36\u0102\4\252\3\u0102\1\u010e\1\251\1\u0150\5\u0102\1\u0101"+
    "\1\u0102\1\252\5\u0102\1\252\36\u0102\2\372\2\u0106\1\u0105"+
    "\1\u0151\1\u0105\1\u0152\1\u0105\1\263\5\u0105\1\u010a\1\u0105"+
    "\1\372\5\u0105\1\u010b\1\261\35\u0105\10\u0106\1\266\1\u014a"+
    "\14\u0106\1\252\1\u0153\1\u0149\41\u0106\3\u0107\1\u0108\1\267"+
    "\1\u014f\5\u0107\1\u0154\1\u0107\1\u0155\4\u0107\1\253\1\u0153"+
    "\1\u014c\34\u0107\1\u0151\2\372\2\u0106\1\257\1\u0107\1\257"+
    "\1\u0156\1\257\1\147\5\257\1\372\1\257\1\372\5\257"+
    "\1\u010b\1\143\34\257\1\u0105\2\372\2\u0106\1\u0105\1\u0151"+
    "\1\u0105\1\u0157\1\u0105\1\263\5\u0105\1\372\1\u0105\1\372"+
    "\5\u0105\1\u010b\1\261\35\u0105\2\u0158\2\u0106\1\u0158\1\u0106"+
    "\1\372\1\u0159\2\243\2\372\2\u0158\1\372\4\u0158\1\372"+
    "\2\u0158\1\372\1\u015a\2\372\2\u0158\1\372\1\u0158\1\372"+
    "\1\u0158\1\372\7\u0158\1\372\3\u0158\3\372\1\u0158\2\372"+
    "\4\u0158\2\u010c\2\252\1\u010c\1\252\1\u010c\1\u010d\1\274"+
    "\1\137\54\u010c\4\266\3\u010f\1\u0110\7\u010f\1\u0113\1\u010f"+
    "\1\266\4\u010f\1\251\1\u0111\1\u0150\35\u010f\27\266\1\u0111"+
    "\1\u014a\41\266\13\267\1\266\1\267\1\266\4\267\1\141"+
    "\1\u0111\1\377\34\267\1\u010f\4\266\13\u010f\1\266\1\u010f"+
    "\1\266\4\u010f\1\251\1\u0111\1\u0150\35\u010f\2\u0116\2\266"+
    "\1\u0116\1\266\1\u0116\1\u0117\16\u0116\1\274\1\u015b\1\137"+
    "\35\u0116\2\243\2\266\1\243\1\266\1\243\1\373\1\372"+
    "\16\243\1\273\36\243\21\0\1\152\1\153\7\0\20\152"+
    "\1\u015c\11\152\23\0\1\152\1\153\7\0\14\152\1\u015d"+
    "\15\152\23\0\1\152\1\153\7\0\20\152\1\u015e\11\152"+
    "\23\0\1\152\1\153\7\0\1\152\1\u015f\30\152\23\0"+
    "\1\152\1\153\7\0\1\152\1\u0160\30\152\23\0\1\152"+
    "\1\153\7\0\4\152\1\u0161\25\152\23\0\1\152\1\153"+
    "\7\0\24\152\1\u0162\5\152\23\0\1\152\1\153\7\0"+
    "\3\152\1\u0163\26\152\23\0\1\152\1\153\7\0\17\152"+
    "\1\u0164\12\152\23\0\1\152\1\153\7\0\5\152\1\u0165"+
    "\24\152\23\0\1\152\1\153\7\0\11\152\1\u0166\20\152"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\24\21\1\u0167"+
    "\6\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\5\21"+
    "\1\u0168\25\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\6\21\1\u0169\24\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\24\21\1\u016a\6\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\22\21\1\u016b\10\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\23\21\1\u016c\7\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\23\21\1\u016d\7\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\11\21\1\u016e\21\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\4\21\1\u016f"+
    "\26\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\20\21"+
    "\1\u0170\12\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\16\21\1\u0171\14\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\1\21\1\u0172\31\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\14\21\1\u0173\16\21\1\0\2\u0135\2\215"+
    "\1\u0135\1\331\1\u0135\1\215\1\u0135\1\336\14\u0135\1\u0174"+
    "\1\u0175\36\u0135\2\u0136\2\231\1\u0136\1\333\1\u0136\1\231"+
    "\1\u0174\16\u0136\1\u0176\1\336\35\u0136\6\0\1\336\1\0"+
    "\4\336\2\0\1\336\4\0\1\336\2\0\4\336\2\0"+
    "\1\336\1\0\1\336\1\0\1\336\7\0\1\336\3\0"+
    "\3\336\1\0\2\336\4\0\2\u0135\2\215\1\u0138\1\216"+
    "\1\u0138\1\217\1\u0138\1\337\5\u0138\1\u0177\1\u0138\1\u0178"+
    "\4\u0138\1\u0179\1\u0175\35\u0138\1\u017a\2\336\2\0\1\337"+
    "\1\334\1\337\1\130\1\u0138\6\337\1\336\1\337\1\336"+
    "\4\337\1\u013b\1\u0137\35\337\1\u013c\2\336\2\0\1\u013c"+
    "\1\225\1\u013c\1\214\1\u017a\6\u013c\1\336\1\u013c\1\336"+
    "\4\u013c\1\u017b\1\u0137\36\u013c\2\u0136\2\231\1\u013b\1\232"+
    "\1\u013b\1\233\1\u0179\6\u013b\1\u017c\1\u013b\1\u017d\5\u013b"+
    "\1\u0176\1\337\34\u013b\1\u017b\2\336\2\0\1\u013c\1\335"+
    "\1\u013c\1\214\1\u017a\6\u013c\1\u013a\1\u013c\1\336\4\u013c"+
    "\1\u017b\1\u0137\36\u013c\4\346\1\u013e\1\u013d\2\u013e\1\360"+
    "\1\u017b\5\u013e\1\u0141\1\u013e\1\346\4\u013e\1\342\1\u013f"+
    "\1\u017a\35\u013e\10\346\1\231\1\u0136\15\346\1\u013f\1\u0174"+
    "\41\346\4\350\1\233\1\u013b\5\350\1\346\1\350\1\346"+
    "\4\350\1\217\1\u013f\1\u0138\34\350\1\u013e\4\346\4\u013e"+
    "\1\360\1\u017b\5\u013e\1\346\1\u013e\1\346\4\u013e\1\342"+
    "\1\u013f\1\u017a\35\u013e\2\u0144\2\346\1\u0144\1\u0145\1\u0144"+
    "\1\346\1\366\1\206\14\u0144\1\354\1\u017e\1\205\35\u0144"+
    "\2\332\2\346\1\332\1\u0134\1\332\1\346\1\332\1\206"+
    "\15\332\1\353\36\332\2\366\2\231\1\366\1\367\1\366"+
    "\1\231\17\366\1\u0147\1\206\35\366\2\u0149\2\252\1\u0149"+
    "\1\252\1\u0149\1\371\1\u0149\1\376\14\u0149\1\u017f\1\u0180"+
    "\36\u0149\2\u014a\2\266\1\u014a\1\266\1\u014a\1\373\1\u017f"+
    "\16\u014a\1\u0181\1\376\35\u014a\6\0\1\376\1\0\4\376"+
    "\2\0\1\376\4\0\1\376\2\0\4\376\2\0\1\376"+
    "\1\0\1\376\1\0\1\376\7\0\1\376\3\0\3\376"+
    "\1\0\2\376\4\0\2\u0149\2\252\1\u014c\1\253\1\u014c"+
    "\1\254\1\u014c\1\377\5\u014c\1\u0182\1\u014c\1\u0183\4\u014c"+
    "\1\u0184\1\u0180\35\u014c\1\u0185\2\376\2\0\1\377\1\141"+
    "\1\377\1\374\1\u014c\6\377\1\376\1\377\1\376\4\377"+
    "\1\u014f\1\u014b\35\377\1\u0150\2\376\2\0\1\u0150\1\251"+
    "\1\u0150\1\262\1\u0185\6\u0150\1\376\1\u0150\1\376\4\u0150"+
    "\1\u0186\1\u014b\36\u0150\2\u014a\2\266\1\u014f\1\267\1\u014f"+
    "\1\270\1\u0184\6\u014f\1\u0187\1\u014f\1\u0188\5\u014f\1\u0181"+
    "\1\377\34\u014f\1\u0186\2\376\2\0\1\u0150\1\251\1\u0150"+
    "\1\375\1\u0185\6\u0150\1\u014e\1\u0150\1\376\4\u0150\1\u0186"+
    "\1\u014b\36\u0150\4\u0106\3\u0151\1\u0152\1\u010f\1\u0186\5\u0151"+
    "\1\u0155\1\u0151\1\u0106\4\u0151\1\u0102\1\u0153\1\u0185\35\u0151"+
    "\10\u0106\1\266\1\u014a\15\u0106\1\u0153\1\u017f\41\u0106\4\u0107"+
    "\1\267\1\u014f\5\u0107\1\u0106\1\u0107\1\u0106\4\u0107\1\253"+
    "\1\u0153\1\u014c\34\u0107\1\u0151\4\u0106\4\u0151\1\u010f\1\u0186"+
    "\5\u0151\1\u0106\1\u0151\1\u0106\4\u0151\1\u0102\1\u0153\1\u0185"+
    "\35\u0151\2\u0158\2\u0106\1\u0158\1\u0106\1\u0158\1\u0159\1\u0116"+
    "\1\243\14\u0158\1\u010c\1\u0189\1\242\35\u0158\2\372\2\u0106"+
    "\1\372\1\u0106\1\372\1\u0148\1\372\1\243\15\372\1\u010b"+
    "\36\372\2\u0116\2\266\1\u0116\1\266\1\u0116\1\u0117\17\u0116"+
    "\1\u015b\1\243\35\u0116\21\0\1\152\1\153\7\0\5\152"+
    "\1\u018a\24\152\23\0\1\152\1\153\7\0\5\152\1\u018b"+
    "\24\152\23\0\1\152\1\153\7\0\5\152\1\u018c\24\152"+
    "\23\0\1\152\1\153\7\0\20\152\1\u018d\11\152\23\0"+
    "\1\152\1\153\7\0\4\152\1\u018e\25\152\23\0\1\152"+
    "\1\153\7\0\5\152\1\u018f\24\152\23\0\1\152\1\153"+
    "\7\0\20\152\1\u0190\11\152\23\0\1\152\1\153\7\0"+
    "\13\152\1\u0191\16\152\23\0\1\152\1\153\7\0\24\152"+
    "\1\u0192\5\152\23\0\1\152\1\153\7\0\22\152\1\u0193"+
    "\7\152\23\0\1\152\1\153\7\0\26\152\1\u0194\3\152"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\10\21\1\u0195"+
    "\22\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\20\21"+
    "\1\u0196\12\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\11\21\1\u0197\21\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\5\21\1\u0198\25\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\14\21\1\u0199\16\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\6\21\1\u019a\24\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\13\21\1\u019b\17\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\7\21\1\u019c\23\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\24\21\1\u019d"+
    "\6\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\5\21"+
    "\1\u019e\25\21\1\0\2\u0174\2\346\1\u0174\1\u0134\1\u0174"+
    "\1\346\1\u0174\1\u0136\15\u0174\1\u019f\1\u0135\35\u0174\6\215"+
    "\1\u0135\1\215\2\336\2\u0135\2\215\1\u0135\4\215\1\u0135"+
    "\2\215\4\u0135\2\215\1\u0135\1\215\1\u0135\1\215\1\u0135"+
    "\7\215\1\u0135\3\215\3\u0135\1\215\2\u0135\4\215\6\231"+
    "\1\u0136\1\231\4\u0136\2\231\1\u0136\4\231\1\u0136\2\231"+
    "\1\u0136\1\u01a0\2\u0136\2\231\1\u0136\1\231\1\u0136\1\231"+
    "\1\u0136\7\231\1\u0136\3\231\3\u0136\1\231\2\u0136\4\231"+
    "\2\u0135\2\215\1\u0138\1\343\1\u0138\1\217\1\u0138\1\337"+
    "\5\u0138\1\u0135\1\u0138\1\u0135\4\u0138\1\u0179\1\u0175\35\u0138"+
    "\1\u017a\2\u0135\2\215\1\u017a\1\344\1\u017a\1\342\1\u017a"+
    "\1\u013c\5\u017a\1\u0135\1\u017a\1\u0135\4\u017a\1\u01a1\1\u0175"+
    "\36\u017a\2\u0174\2\346\1\u0179\1\347\1\u0179\1\350\1\u0179"+
    "\1\u013b\5\u0179\1\u01a2\1\u0179\1\u01a3\5\u0179\1\u019f\1\u0138"+
    "\34\u0179\1\u01a1\2\u0135\2\215\1\u017a\1\356\1\u017a\1\342"+
    "\1\u017a\1\u013c\5\u017a\1\u0178\1\u017a\1\u0135\4\u017a\1\u01a1"+
    "\1\u0175\36\u017a\2\u0136\2\231\1\u017b\1\357\1\u017b\1\360"+
    "\1\u01a1\6\u017b\1\u017d\1\u017b\1\u0136\5\u017b\1\u0176\1\u013c"+
    "\35\u017b\2\u0136\2\231\1\u013b\1\364\1\u013b\1\233\1\u0179"+
    "\6\u013b\1\u0136\1\u013b\1\u0136\5\u013b\1\u0176\1\337\34\u013b"+
    "\1\u017b\2\u0136\2\231\1\u017b\1\365\1\u017b\1\360\1\u01a1"+
    "\6\u017b\1\u0136\1\u017b\1\u0136\5\u017b\1\u0176\1\u013c\35\u017b"+
    "\2\u0144\2\346\1\u0144\1\u0145\1\u0144\1\346\1\366\1\206"+
    "\15\u0144\1\u017e\1\332\35\u0144\2\u017f\2\u0106\1\u017f\1\u0106"+
    "\1\u017f\1\u0148\1\u017f\1\u014a\15\u017f\1\u01a4\1\u0149\35\u017f"+
    "\6\252\1\u0149\1\252\2\376\2\u0149\2\252\1\u0149\4\252"+
    "\1\u0149\2\252\4\u0149\2\252\1\u0149\1\252\1\u0149\1\252"+
    "\1\u0149\7\252\1\u0149\3\252\3\u0149\1\252\2\u0149\4\252"+
    "\6\266\1\u014a\1\266\4\u014a\2\266\1\u014a\4\266\1\u014a"+
    "\2\266\1\u014a\1\u01a5\2\u014a\2\266\1\u014a\1\266\1\u014a"+
    "\1\266\1\u014a\7\266\1\u014a\3\266\3\u014a\1\266\2\u014a"+
    "\4\266\2\u0149\2\252\1\u014c\1\253\1\u014c\1\u0103\1\u014c"+
    "\1\377\5\u014c\1\u0149\1\u014c\1\u0149\4\u014c\1\u0184\1\u0180"+
    "\35\u014c\1\u0185\2\u0149\2\252\1\u0185\1\u0102\1\u0185\1\u0104"+
    "\1\u0185\1\u0150\5\u0185\1\u0149\1\u0185\1\u0149\4\u0185\1\u01a6"+
    "\1\u0180\36\u0185\2\u017f\2\u0106\1\u0184\1\u0107\1\u0184\1\u0108"+
    "\1\u0184\1\u014f\5\u0184\1\u01a7\1\u0184\1\u01a8\5\u0184\1\u01a4"+
    "\1\u014c\34\u0184\1\u01a6\2\u0149\2\252\1\u0185\1\u0102\1\u0185"+
    "\1\u010e\1\u0185\1\u0150\5\u0185\1\u0183\1\u0185\1\u0149\4\u0185"+
    "\1\u01a6\1\u0180\36\u0185\2\u014a\2\266\1\u0186\1\u010f\1\u0186"+
    "\1\u0110\1\u01a6\6\u0186\1\u0188\1\u0186\1\u014a\5\u0186\1\u0181"+
    "\1\u0150\35\u0186\2\u014a\2\266\1\u014f\1\267\1\u014f\1\u0114"+
    "\1\u0184\6\u014f\1\u014a\1\u014f\1\u014a\5\u014f\1\u0181\1\377"+
    "\34\u014f\1\u0186\2\u014a\2\266\1\u0186\1\u010f\1\u0186\1\u0115"+
    "\1\u01a6\6\u0186\1\u014a\1\u0186\1\u014a\5\u0186\1\u0181\1\u0150"+
    "\35\u0186\2\u0158\2\u0106\1\u0158\1\u0106\1\u0158\1\u0159\1\u0116"+
    "\1\243\15\u0158\1\u0189\1\372\35\u0158\21\0\1\152\1\153"+
    "\7\0\3\152\1\u01a9\26\152\23\0\1\152\1\153\7\0"+
    "\24\152\1\u01aa\5\152\23\0\1\152\1\153\7\0\22\152"+
    "\1\u01ab\7\152\23\0\1\152\1\153\7\0\10\152\1\u01ac"+
    "\21\152\23\0\1\152\1\153\7\0\11\152\1\u01ad\20\152"+
    "\23\0\1\152\1\153\7\0\22\152\1\u01ae\7\152\23\0"+
    "\1\152\1\153\7\0\25\152\1\u01af\4\152\23\0\1\152"+
    "\1\153\7\0\1\152\1\u01b0\30\152\23\0\1\152\1\153"+
    "\7\0\17\152\1\u01b1\12\152\23\0\1\152\1\153\7\0"+
    "\31\152\1\u01b2\23\0\1\152\1\153\7\0\5\152\1\u01b3"+
    "\24\152\10\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\23\21"+
    "\1\u01b4\7\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\23\21\1\u01b5\7\21\7\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\14\21\1\u01b6\16\21\7\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\3\21\1\u01b7\27\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\5\21\1\u01b8\25\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\11\21\1\u01b9\21\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\7\21\1\u01ba\23\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\23\21\1\u01bb"+
    "\7\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\10\21"+
    "\1\u01bc\22\21\1\0\6\346\1\u0174\1\346\2\u0136\2\u0174"+
    "\2\346\1\u0174\4\346\1\u0174\2\346\1\u0174\1\u01bd\2\u0174"+
    "\2\346\1\u0174\1\346\1\u0174\1\346\1\u0174\7\346\1\u0174"+
    "\3\346\3\u0174\1\346\2\u0174\4\346\2\u0136\2\231\1\u0136"+
    "\1\333\1\u0136\1\231\1\u0174\16\u0136\1\u0176\36\u0136\2\u0174"+
    "\2\346\1\u01a1\1\u013d\1\u01a1\1\u013e\1\u01a1\1\u017b\5\u01a1"+
    "\1\u01a3\1\u01a1\1\u0174\5\u01a1\1\u019f\1\u017a\35\u01a1\2\u0174"+
    "\2\346\1\u0179\1\u0142\1\u0179\1\350\1\u0179\1\u013b\5\u0179"+
    "\1\u0174\1\u0179\1\u0174\5\u0179\1\u019f\1\u0138\34\u0179\1\u01a1"+
    "\2\u0174\2\346\1\u01a1\1\u0143\1\u01a1\1\u013e\1\u01a1\1\u017b"+
    "\5\u01a1\1\u0174\1\u01a1\1\u0174\5\u01a1\1\u019f\1\u017a\35\u01a1"+
    "\6\u0106\1\u017f\1\u0106\2\u014a\2\u017f\2\u0106\1\u017f\4\u0106"+
    "\1\u017f\2\u0106\1\u017f\1\u01be\2\u017f\2\u0106\1\u017f\1\u0106"+
    "\1\u017f\1\u0106\1\u017f\7\u0106\1\u017f\3\u0106\3\u017f\1\u0106"+
    "\2\u017f\4\u0106\2\u014a\2\266\1\u014a\1\266\1\u014a\1\373"+
    "\1\u017f\16\u014a\1\u0181\36\u014a\2\u017f\2\u0106\1\u01a6\1\u0151"+
    "\1\u01a6\1\u0152\1\u01a6\1\u0186\5\u01a6\1\u01a8\1\u01a6\1\u017f"+
    "\5\u01a6\1\u01a4\1\u0185\35\u01a6\2\u017f\2\u0106\1\u0184\1\u0107"+
    "\1\u0184\1\u0156\1\u0184\1\u014f\5\u0184\1\u017f\1\u0184\1\u017f"+
    "\5\u0184\1\u01a4\1\u014c\34\u0184\1\u01a6\2\u017f\2\u0106\1\u01a6"+
    "\1\u0151\1\u01a6\1\u0157\1\u01a6\1\u0186\5\u01a6\1\u017f\1\u01a6"+
    "\1\u017f\5\u01a6\1\u01a4\1\u0185\35\u01a6\21\0\1\152\1\153"+
    "\7\0\24\152\1\u01bf\5\152\23\0\1\152\1\153\7\0"+
    "\5\152\1\u01c0\24\152\23\0\1\152\1\153\7\0\11\152"+
    "\1\u01c1\20\152\23\0\1\u01c2\1\153\7\0\32\152\23\0"+
    "\1\152\1\153\7\0\16\152\1\u01c3\13\152\23\0\1\152"+
    "\1\153\7\0\1\u01c4\31\152\23\0\1\152\1\153\7\0"+
    "\24\152\1\u01c5\5\152\23\0\1\152\1\153\7\0\7\152"+
    "\1\u01c6\22\152\23\0\1\u01c7\1\153\7\0\32\152\23\0"+
    "\1\152\1\153\7\0\1\u01c8\31\152\23\0\1\152\1\153"+
    "\7\0\22\152\1\u01c9\7\152\10\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\5\21\1\u01ca\25\21\7\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\24\21\1\u01cb\6\21\7\0\1\21"+
    "\3\0\1\21\2\0\2\21\1\74\1\21\1\75\2\0"+
    "\3\21\1\0\1\21\1\0\23\21\1\u01cc\7\21\7\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\14\21\1\u01cd\16\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\1\u01ce\32\21"+
    "\1\0\2\u0174\2\346\1\u0174\1\u0134\1\u0174\1\346\1\u0174"+
    "\1\u0136\15\u0174\1\u019f\36\u0174\2\u017f\2\u0106\1\u017f\1\u0106"+
    "\1\u017f\1\u0148\1\u017f\1\u014a\15\u017f\1\u01a4\36\u017f\21\0"+
    "\1\152\1\153\7\0\1\u01cf\31\152\23\0\1\152\1\153"+
    "\7\0\4\152\1\u01d0\25\152\23\0\1\152\1\153\7\0"+
    "\15\152\1\u01d1\14\152\23\0\1\152\1\153\7\0\3\152"+
    "\1\u01d2\12\152\1\u01d3\13\152\23\0\1\152\1\153\7\0"+
    "\7\152\1\u01d4\22\152\23\0\1\152\1\153\7\0\17\152"+
    "\1\u01d5\12\152\2\0\1\56\1\153\17\56\1\u01d6\1\153"+
    "\7\56\1\u01d7\31\u01d6\2\56\21\0\1\152\1\153\7\0"+
    "\5\152\1\u01d8\24\152\23\0\1\152\1\153\7\0\17\152"+
    "\1\u01d9\12\152\23\0\1\152\1\153\7\0\6\152\1\u01da"+
    "\23\152\23\0\1\152\1\153\7\0\23\152\1\u01db\6\152"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\23\21\1\u01dc"+
    "\7\21\7\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\5\21"+
    "\1\u01dd\25\21\7\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\4\21\1\u01de\26\21\22\0\1\152\1\153\7\0\4\152"+
    "\1\u01df\25\152\23\0\1\152\1\153\7\0\1\u01e0\31\152"+
    "\23\0\1\152\1\153\7\0\5\152\1\u01e1\24\152\23\0"+
    "\1\152\1\153\7\0\17\152\1\u01e2\12\152\23\0\1\152"+
    "\1\153\7\0\17\152\1\u01e3\12\152\23\0\1\152\1\153"+
    "\7\0\1\u01e4\31\152\23\0\1\152\1\153\7\0\25\152"+
    "\1\u01e5\4\152\2\0\1\56\3\0\15\56\1\u01d6\1\u01e6"+
    "\7\56\32\u01d6\3\56\3\0\15\56\1\u01d6\1\u01e6\7\56"+
    "\6\u01d6\1\u01e7\23\u01d6\2\56\21\0\1\152\1\153\7\0"+
    "\1\u01e8\31\152\23\0\1\152\1\153\7\0\25\152\1\u01e9"+
    "\4\152\23\0\1\152\1\153\7\0\11\152\1\u01ea\20\152"+
    "\23\0\1\152\1\153\7\0\5\152\1\u01eb\24\152\10\0"+
    "\1\21\3\0\1\21\2\0\2\21\1\74\1\21\1\75"+
    "\2\0\3\21\1\0\1\21\1\0\23\21\1\u01ec\7\21"+
    "\7\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\11\21\1\u01ed"+
    "\21\21\22\0\1\152\1\153\7\0\5\152\1\u01ee\24\152"+
    "\23\0\1\152\1\153\7\0\20\152\1\u01ef\11\152\23\0"+
    "\1\152\1\153\7\0\16\152\1\u01f0\13\152\23\0\1\152"+
    "\1\153\7\0\16\152\1\u01f1\13\152\23\0\1\152\1\153"+
    "\7\0\4\152\1\u01f2\25\152\23\0\1\152\1\153\7\0"+
    "\20\152\1\u01f3\11\152\23\0\1\152\1\153\7\0\24\152"+
    "\1\u01f4\5\152\2\0\1\56\3\0\15\56\1\u01d6\1\u01e6"+
    "\7\56\11\u01d6\1\u01f5\20\u01d6\2\56\21\0\1\152\1\153"+
    "\7\0\20\152\1\u01f6\11\152\23\0\1\152\1\153\7\0"+
    "\24\152\1\u01f7\5\152\23\0\1\152\1\153\7\0\14\152"+
    "\1\u01f8\15\152\23\0\1\152\1\153\7\0\1\u01f9\31\152"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\22\21\1\u01fa"+
    "\10\21\22\0\1\152\1\153\7\0\20\152\1\u01fb\11\152"+
    "\23\0\1\152\1\153\7\0\1\152\1\u01fc\30\152\23\0"+
    "\1\152\1\153\7\0\24\152\1\u01fd\5\152\23\0\1\152"+
    "\1\153\7\0\4\152\1\u01fe\25\152\23\0\1\152\1\153"+
    "\7\0\5\152\1\u01ff\24\152\23\0\1\152\1\153\7\0"+
    "\10\152\1\u0200\21\152\23\0\1\152\1\153\7\0\20\152"+
    "\1\u0201\11\152\2\0\1\56\3\0\15\56\1\u01d6\1\u01e6"+
    "\7\56\14\u01d6\1\u0202\15\u01d6\2\56\21\0\1\152\1\153"+
    "\7\0\1\152\1\u0203\30\152\23\0\1\152\1\153\7\0"+
    "\20\152\1\u0204\11\152\23\0\1\152\1\153\7\0\5\152"+
    "\1\u0205\24\152\23\0\1\152\1\153\7\0\23\152\1\u0206"+
    "\6\152\10\0\1\21\3\0\1\21\2\0\2\21\1\74"+
    "\1\21\1\75\2\0\3\21\1\0\1\21\1\0\5\21"+
    "\1\u0207\25\21\22\0\1\152\1\153\7\0\23\152\1\u0205"+
    "\6\152\23\0\1\152\1\153\7\0\3\152\1\u0208\26\152"+
    "\23\0\1\152\1\153\7\0\1\152\1\u0209\30\152\23\0"+
    "\1\152\1\153\7\0\11\152\1\u020a\20\152\23\0\1\152"+
    "\1\153\7\0\1\u020b\31\152\23\0\1\152\1\153\7\0"+
    "\1\152\1\u020c\30\152\23\0\1\152\1\153\7\0\25\152"+
    "\1\u020d\4\152\2\0\1\56\3\0\15\56\1\u01d6\1\u01e6"+
    "\7\56\5\u01d6\1\u020e\24\u01d6\2\56\21\0\1\152\1\153"+
    "\7\0\24\152\1\u020f\5\152\23\0\1\152\1\153\7\0"+
    "\25\152\1\u0210\4\152\2\0\1\56\1\153\17\56\1\u01d6"+
    "\1\153\7\56\32\u01d6\2\56\21\0\1\152\1\153\7\0"+
    "\3\152\1\u0211\26\152\10\0\1\21\3\0\1\21\2\0"+
    "\2\21\1\74\1\21\1\75\2\0\3\21\1\0\1\21"+
    "\1\0\3\21\1\u0212\27\21\22\0\1\152\1\153\7\0"+
    "\13\152\1\u0213\16\152\23\0\1\152\1\153\7\0\14\152"+
    "\1\u0214\15\152\23\0\1\152\1\153\7\0\24\152\1\u0215"+
    "\5\152\23\0\1\152\1\153\7\0\14\152\1\u0216\15\152"+
    "\23\0\1\152\1\153\7\0\23\152\1\u0217\6\152\23\0"+
    "\1\152\1\153\7\0\24\152\1\u0205\5\152\2\0\1\56"+
    "\1\153\17\56\1\u01d6\1\u01e6\7\56\32\u01d6\2\56\21\0"+
    "\1\152\1\153\7\0\10\152\1\u0205\21\152\23\0\1\152"+
    "\1\153\7\0\24\152\1\u0218\5\152\23\0\1\152\1\153"+
    "\7\0\17\152\1\u0219\12\152\10\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\24\21\1\u021a\6\21\22\0\1\152\1\153"+
    "\7\0\1\152\1\u021b\30\152\23\0\1\152\1\153\7\0"+
    "\1\u021c\31\152\23\0\1\152\1\153\7\0\11\152\1\u021d"+
    "\20\152\23\0\1\152\1\153\7\0\11\152\1\u021e\20\152"+
    "\23\0\1\152\1\153\7\0\5\152\1\u021f\24\152\23\0"+
    "\1\152\1\153\7\0\1\u0220\31\152\23\0\1\152\1\153"+
    "\7\0\20\152\1\u01f8\11\152\10\0\1\21\3\0\1\21"+
    "\2\0\2\21\1\74\1\21\1\75\2\0\3\21\1\0"+
    "\1\21\1\0\1\u0221\32\21\22\0\1\152\1\153\7\0"+
    "\7\152\1\u0222\22\152\23\0\1\152\1\153\7\0\22\152"+
    "\1\u0223\7\152\23\0\1\152\1\153\7\0\17\152\1\u0224"+
    "\12\152\23\0\1\152\1\153\7\0\15\152\1\u0225\14\152"+
    "\23\0\1\152\1\153\7\0\1\u0226\31\152\23\0\1\152"+
    "\1\153\7\0\22\152\1\u0227\7\152\10\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\22\21\1\u0228\10\21\22\0\1\152"+
    "\1\153\7\0\5\152\1\u01fb\24\152\23\0\1\152\1\153"+
    "\7\0\5\152\1\u0229\24\152\23\0\1\152\1\153\7\0"+
    "\16\152\1\u022a\13\152\23\0\1\152\1\153\7\0\11\152"+
    "\1\u020d\20\152\23\0\1\152\1\153\7\0\24\152\1\u022b"+
    "\5\152\23\0\1\152\1\153\7\0\25\152\1\u022c\4\152"+
    "\10\0\1\21\3\0\1\21\2\0\2\21\1\74\1\21"+
    "\1\75\2\0\3\21\1\0\1\21\1\0\4\21\1\u022d"+
    "\26\21\22\0\1\152\1\153\7\0\20\152\1\u022e\11\152"+
    "\23\0\1\152\1\153\7\0\1\152\1\u022f\30\152\23\0"+
    "\1\152\1\153\7\0\10\152\1\u0230\21\152\23\0\1\152"+
    "\1\153\7\0\14\152\1\u0231\15\152\10\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\5\21\1\u0232\25\21\22\0\1\152"+
    "\1\153\7\0\17\152\1\u0233\12\152\23\0\1\152\1\153"+
    "\7\0\14\152\1\u0234\15\152\23\0\1\152\1\153\7\0"+
    "\22\152\1\u0235\7\152\23\0\1\152\1\153\7\0\5\152"+
    "\1\u0236\24\152\10\0\1\21\3\0\1\21\2\0\2\21"+
    "\1\74\1\21\1\75\2\0\3\21\1\0\1\21\1\0"+
    "\20\21\1\u0237\12\21\22\0\1\152\1\153\7\0\23\152"+
    "\1\u0238\6\152\23\0\1\152\1\153\7\0\1\u0239\31\152"+
    "\23\0\1\152\1\153\7\0\5\152\1\u023a\24\152\23\0"+
    "\1\152\1\153\7\0\1\u023b\31\152\10\0\1\21\3\0"+
    "\1\21\2\0\2\21\1\74\1\21\1\75\2\0\3\21"+
    "\1\0\1\21\1\0\23\21\1\u023c\7\21\22\0\1\152"+
    "\1\153\7\0\11\152\1\u023d\20\152\23\0\1\152\1\153"+
    "\7\0\5\152\1\u023e\24\152\23\0\1\152\1\153\7\0"+
    "\1\152\1\u023f\30\152\23\0\1\152\1\153\7\0\1\152"+
    "\1\u0240\30\152\23\0\1\152\1\153\7\0\24\152\1\u0241"+
    "\5\152\23\0\1\152\1\153\7\0\4\152\1\u0242\25\152"+
    "\23\0\1\152\1\153\7\0\4\152\1\u01fb\25\152\23\0"+
    "\1\152\1\153\7\0\24\152\1\u0243\5\152\23\0\1\152"+
    "\1\153\7\0\17\152\1\u0244\12\152\23\0\1\152\1\153"+
    "\7\0\7\152\1\u0245\22\152\23\0\1\152\1\153\7\0"+
    "\24\152\1\u0246\5\152\23\0\1\152\1\153\7\0\22\152"+
    "\1\u0247\7\152\23\0\1\152\1\153\7\0\5\152\1\u0248"+
    "\24\152\23\0\1\152\1\153\7\0\22\152\1\u01fb\7\152"+
    "\23\0\1\152\1\153\7\0\31\152\1\u0249\23\0\1\152"+
    "\1\153\7\0\23\152\1\u01ff\6\152\23\0\1\152\1\153"+
    "\7\0\1\u024a\31\152\23\0\1\152\1\153\7\0\22\152"+
    "\1\u024b\7\152\23\0\1\152\1\153\7\0\5\152\1\u024c"+
    "\24\152\23\0\1\152\1\153\7\0\23\152\1\u024d\6\152"+
    "\23\0\1\152\1\153\7\0\17\152\1\u024e\12\152\23\0"+
    "\1\152\1\153\7\0\14\152\1\u024f\15\152\23\0\1\152"+
    "\1\153\7\0\26\152\1\u0250\3\152\23\0\1\152\1\153"+
    "\7\0\5\152\1\u0251\24\152\23\0\1\152\1\153\7\0"+
    "\4\152\1\u01b2\25\152\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26892];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\1\1\2\11\1\1\6\11"+
    "\3\1\1\11\2\1\1\11\21\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\4\0\2\1\1\0\27\1"+
    "\1\0\10\1\1\0\11\1\1\11\2\0\2\11\24\1"+
    "\1\11\5\1\4\0\1\1\1\0\11\1\1\0\1\1"+
    "\1\0\4\1\2\11\5\1\5\0\12\1\2\0\46\1"+
    "\5\0\3\1\1\0\1\1\1\0\7\1\4\0\12\1"+
    "\5\0\3\1\2\0\7\1\1\0\1\1\3\0\41\1"+
    "\10\0\1\1\4\0\7\1\11\0\1\1\3\0\36\1"+
    "\12\0\1\1\12\0\26\1\12\0\24\1\2\0\223\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FLAG);  yypushback(1);
            }
          // fall through
          case 60: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 61: break;
          case 3:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 62: break;
          case 4:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 63: break;
          case 5:
            { yybegin(WORD_DQ); yypushback(1);
            }
          // fall through
          case 64: break;
          case 6:
            { return BazelQueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 65: break;
          case 7:
            { yybegin(WORD_SQ); yypushback(1);
            }
          // fall through
          case 66: break;
          case 8:
            { return BazelQueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 67: break;
          case 9:
            { return BazelQueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 68: break;
          case 10:
            { return BazelQueryTokenTypes.UNION;
            }
          // fall through
          case 69: break;
          case 11:
            { return BazelQueryTokenTypes.COMMA;
            }
          // fall through
          case 70: break;
          case 12:
            { return BazelQueryTokenTypes.EXCEPT;
            }
          // fall through
          case 71: break;
          case 13:
            { return BazelQueryTokenTypes.ERR_WORD;
            }
          // fall through
          case 72: break;
          case 14:
            { return BazelQueryTokenTypes.INTEGER;
            }
          // fall through
          case 73: break;
          case 15:
            { return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 74: break;
          case 16:
            { return BazelQueryTokenTypes.INTERSECT;
            }
          // fall through
          case 75: break;
          case 17:
            { return BazelQueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 76: break;
          case 18:
            { return BazelQueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 77: break;
          case 19:
            { yybegin(YYINITIAL); return BazelQueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 78: break;
          case 20:
            { return BazelQueryTokenTypes.UNFINISHED_FLAG;
            }
          // fall through
          case 79: break;
          case 21:
            { yybegin(VALUE); return BazelQueryTokenTypes.EQUALS;
            }
          // fall through
          case 80: break;
          case 22:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 23:
            { yybegin(VALUE_DQ); yypushback(1);
            }
          // fall through
          case 82: break;
          case 24:
            { yybegin(SPACE_NEEDED); return BazelQueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 83: break;
          case 25:
            { yybegin(VALUE_SQ); yypushback(1);
            }
          // fall through
          case 84: break;
          case 26:
            { yybegin(SPACE_NEEDED); return BazelQueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 85: break;
          case 27:
            { yybegin(YYINITIAL); yypushback(1); return BazelQueryTokenTypes.MISSING_SPACE;
            }
          // fall through
          case 86: break;
          case 28:
            { yybegin(YYINITIAL); return BazelQueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 29:
            { return BazelQueryTokenTypes.IN;
            }
          // fall through
          case 88: break;
          case 30:
            { yybegin(EXPR); return BazelQueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 89: break;
          case 31:
            { yybegin(EXPR); return BazelQueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 90: break;
          case 32:
            { yybegin(SPACE_NEEDED); return BazelQueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 91: break;
          case 33:
            { yybegin(PRE_VALUE); yypushback(1); return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 92: break;
          case 34:
            { yybegin(SPACE_NEEDED); return BazelQueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 93: break;
          case 35:
            { yybegin(SPACE_NEEDED); return BazelQueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 94: break;
          case 36:
            { return BazelQueryTokenTypes.LET;
            }
          // fall through
          case 95: break;
          case 37:
            { return BazelQueryTokenTypes.SET;
            }
          // fall through
          case 96: break;
          case 38:
            { yybegin(EXPR); return BazelQueryTokenTypes.DQ_PATTERN;
            }
          // fall through
          case 97: break;
          case 39:
            { yybegin(EXPR); return BazelQueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 98: break;
          case 40:
            { yybegin(EXPR); return BazelQueryTokenTypes.SQ_PATTERN;
            }
          // fall through
          case 99: break;
          case 41:
            { yybegin(EXPR); return BazelQueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 100: break;
          case 42:
            { return BazelQueryTokenTypes.ATTR;
            }
          // fall through
          case 101: break;
          case 43:
            { return BazelQueryTokenTypes.DEPS;
            }
          // fall through
          case 102: break;
          case 44:
            { return BazelQueryTokenTypes.KIND;
            }
          // fall through
          case 103: break;
          case 45:
            { return BazelQueryTokenTypes.SOME;
            }
          // fall through
          case 104: break;
          case 46:
            { return BazelQueryTokenTypes.RDEPS;
            }
          // fall through
          case 105: break;
          case 47:
            { return BazelQueryTokenTypes.TESTS;
            }
          // fall through
          case 106: break;
          case 48:
            { return BazelQueryTokenTypes.FILTER;
            }
          // fall through
          case 107: break;
          case 49:
            { return BazelQueryTokenTypes.LABELS;
            }
          // fall through
          case 108: break;
          case 50:
            { return BazelQueryTokenTypes.VISIBLE;
            }
          // fall through
          case 109: break;
          case 51:
            { return BazelQueryTokenTypes.ALLPATHS;
            }
          // fall through
          case 110: break;
          case 52:
            { return BazelQueryTokenTypes.ALLRDEPS;
            }
          // fall through
          case 111: break;
          case 53:
            { return BazelQueryTokenTypes.SIBLINGS;
            }
          // fall through
          case 112: break;
          case 54:
            { return BazelQueryTokenTypes.SOMEPATH;
            }
          // fall through
          case 113: break;
          case 55:
            { yybegin(PRE_VALUE); return BazelQueryTokenTypes.FLAG;
            }
          // fall through
          case 114: break;
          case 56:
            { return BazelQueryTokenTypes.LOADFILES;
            }
          // fall through
          case 115: break;
          case 57:
            { return BazelQueryTokenTypes.BUILDFILES;
            }
          // fall through
          case 116: break;
          case 58:
            { return BazelQueryTokenTypes.RBUILDFILES;
            }
          // fall through
          case 117: break;
          case 59:
            { return BazelQueryTokenTypes.SAME_PKG_DIRECT_RDEPS;
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
