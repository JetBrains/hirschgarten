// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Starlark.flex

package org.jetbrains.bazel.languages.starlark.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.starlark.elements.StarlarkTokenTypes;


class _StarlarkLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\7\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\2\0\4\33"+
    "\1\34\1\35\7\36\1\37\1\40\4\36\1\41\3\36"+
    "\1\42\2\36\1\43\1\44\1\45\1\46\1\36\1\0"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\36\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\36\1\66\1\67\1\70\1\71\1\36\1\72\1\73"+
    "\1\74\1\36\1\75\1\76\1\77\1\100\53\0\1\36"+
    "\12\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36"+
    "\1\0\1\36\21\0\165\36\1\0\2\36\2\0\4\36"+
    "\1\0\1\36\6\0\1\36\1\0\3\36\1\0\1\36"+
    "\1\0\24\36\1\0\123\36\1\0\213\36\1\0\255\36"+
    "\1\0\46\36\2\0\1\36\6\0\51\36\10\0\55\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\1\36"+
    "\10\0\33\36\4\0\4\36\35\0\13\36\5\0\100\36"+
    "\12\101\4\0\146\36\1\0\10\36\2\0\12\36\1\0"+
    "\6\36\12\101\3\36\2\0\1\36\20\0\73\36\2\0"+
    "\145\36\16\0\12\101\54\36\4\0\1\36\2\0\1\36"+
    "\2\0\56\36\22\0\34\36\4\0\13\36\65\0\25\36"+
    "\1\0\10\36\25\0\17\36\1\0\201\36\2\0\12\101"+
    "\1\0\23\36\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\1\36\3\0\4\36\2\0\11\36"+
    "\2\0\2\36\2\0\4\36\10\0\1\36\4\0\2\36"+
    "\1\0\5\36\2\0\12\101\2\36\12\0\1\36\1\0"+
    "\1\36\2\0\3\36\1\0\6\36\4\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\2\36\1\0"+
    "\2\36\2\0\1\36\1\0\5\36\4\0\2\36\2\0"+
    "\3\36\3\0\1\36\7\0\4\36\1\0\1\36\7\0"+
    "\12\101\6\36\13\0\3\36\1\0\11\36\1\0\3\36"+
    "\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36"+
    "\2\0\12\36\1\0\3\36\1\0\3\36\2\0\1\36"+
    "\17\0\4\36\2\0\12\101\11\0\7\36\1\0\3\36"+
    "\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\2\36\1\0\5\36\2\0\11\36\2\0\2\36"+
    "\2\0\3\36\10\0\2\36\4\0\2\36\1\0\5\36"+
    "\2\0\12\101\1\0\1\36\20\0\2\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36"+
    "\1\0\2\36\3\0\2\36\3\0\3\36\3\0\14\36"+
    "\4\0\5\36\3\0\3\36\1\0\4\36\2\0\1\36"+
    "\6\0\1\36\16\0\12\101\20\0\15\36\1\0\3\36"+
    "\1\0\27\36\1\0\20\36\3\0\10\36\1\0\3\36"+
    "\1\0\4\36\7\0\2\36\1\0\3\36\5\0\4\36"+
    "\2\0\12\101\20\0\4\36\1\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\12\36\1\0\5\36\2\0\11\36"+
    "\1\0\3\36\1\0\4\36\7\0\2\36\7\0\1\36"+
    "\1\0\4\36\2\0\12\101\1\0\2\36\15\0\4\36"+
    "\1\0\10\36\1\0\3\36\1\0\63\36\1\0\3\36"+
    "\1\0\5\36\5\0\4\36\7\0\5\36\2\0\12\101"+
    "\12\0\6\36\2\0\2\36\1\0\22\36\3\0\30\36"+
    "\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\36"+
    "\4\0\6\36\1\0\1\36\1\0\10\36\6\0\12\101"+
    "\2\0\2\36\15\0\72\36\5\0\17\36\1\0\12\101"+
    "\47\0\2\36\1\0\1\36\1\0\5\36\1\0\30\36"+
    "\1\0\1\36\1\0\27\36\2\0\5\36\1\0\1\36"+
    "\1\0\6\36\2\0\12\101\2\0\4\36\40\0\1\36"+
    "\27\0\2\36\6\0\12\101\13\0\1\36\1\0\1\36"+
    "\1\0\1\36\4\0\12\36\1\0\44\36\4\0\24\36"+
    "\1\0\22\36\1\0\44\36\11\0\1\36\71\0\100\36"+
    "\12\101\6\0\100\36\12\101\4\36\2\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\53\36\1\0\115\36\1\0"+
    "\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0"+
    "\51\36\1\0\4\36\2\0\41\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\17\36\1\0"+
    "\71\36\1\0\4\36\2\0\103\36\2\0\3\36\40\0"+
    "\20\36\20\0\126\36\2\0\6\36\3\0\u016c\36\2\0"+
    "\21\36\1\0\32\36\5\0\113\36\3\0\13\36\7\0"+
    "\15\36\1\0\7\36\13\0\25\36\13\0\24\36\14\0"+
    "\15\36\1\0\3\36\1\0\2\36\14\0\124\36\3\0"+
    "\1\36\4\0\2\36\2\0\12\101\41\0\3\36\2\0"+
    "\12\101\6\0\131\36\7\0\53\36\5\0\106\36\12\0"+
    "\37\36\1\0\14\36\4\0\14\36\12\0\12\101\36\36"+
    "\2\0\5\36\13\0\54\36\4\0\32\36\6\0\12\101"+
    "\46\0\34\36\4\0\77\36\1\0\35\36\2\0\1\36"+
    "\12\101\6\0\12\101\15\0\1\36\10\0\17\36\101\0"+
    "\114\36\4\0\12\101\21\0\11\36\14\0\60\36\12\101"+
    "\72\36\14\0\70\36\10\0\12\101\3\0\3\36\12\101"+
    "\44\36\2\0\11\36\7\0\53\36\2\0\3\36\20\0"+
    "\3\36\1\0\47\36\5\0\372\36\1\0\33\36\2\0"+
    "\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0"+
    "\65\36\1\0\7\36\1\0\1\36\3\0\3\36\1\0"+
    "\7\36\3\0\4\36\2\0\6\36\4\0\15\36\5\0"+
    "\3\36\1\0\7\36\102\0\2\36\23\0\1\36\34\0"+
    "\1\36\15\0\1\36\20\0\15\36\63\0\41\36\21\0"+
    "\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0"+
    "\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0"+
    "\1\36\21\0\51\36\u022d\0\64\36\26\0\57\36\1\0"+
    "\57\36\1\0\205\36\6\0\11\36\14\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\70\36\7\0\1\36\17\0"+
    "\30\36\11\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\40\36\57\0\1\36\325\0\3\36\31\0"+
    "\17\36\1\0\5\36\2\0\5\36\4\0\126\36\2\0"+
    "\2\36\2\0\3\36\1\0\132\36\1\0\4\36\5\0"+
    "\53\36\1\0\136\36\21\0\33\36\65\0\306\36\112\0"+
    "\360\36\20\0\215\36\103\0\56\36\2\0\15\36\3\0"+
    "\20\36\12\101\2\36\24\0\63\36\1\0\12\36\1\0"+
    "\163\36\45\0\11\36\2\0\147\36\2\0\65\36\2\0"+
    "\5\36\60\0\61\36\30\0\64\36\14\0\106\36\12\0"+
    "\12\101\6\0\30\36\3\0\1\36\1\0\3\36\12\101"+
    "\44\36\2\0\44\36\14\0\35\36\3\0\101\36\16\0"+
    "\1\36\12\101\6\0\20\36\12\101\5\36\1\0\67\36"+
    "\11\0\16\36\2\0\12\101\6\0\27\36\3\0\111\36"+
    "\30\0\3\36\2\0\20\36\2\0\5\36\12\0\6\36"+
    "\2\0\6\36\2\0\6\36\11\0\7\36\1\0\7\36"+
    "\1\0\53\36\1\0\14\36\10\0\173\36\1\0\2\36"+
    "\2\0\12\101\6\0\244\36\14\0\27\36\4\0\61\36"+
    "\4\0\156\36\2\0\152\36\46\0\7\36\14\0\5\36"+
    "\5\0\14\36\1\0\15\36\1\0\5\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\154\36\41\0\153\36"+
    "\22\0\100\36\2\0\66\36\50\0\14\36\4\0\20\36"+
    "\20\0\20\36\3\0\2\36\30\0\3\36\40\0\5\36"+
    "\1\0\207\36\23\0\12\101\7\0\32\36\4\0\1\36"+
    "\1\0\32\36\13\0\131\36\3\0\6\36\2\0\6\36"+
    "\2\0\6\36\2\0\3\36\43\0\14\36\1\0\32\36"+
    "\1\0\23\36\1\0\2\36\1\0\17\36\2\0\16\36"+
    "\42\0\173\36\105\0\65\36\210\0\1\36\202\0\35\36"+
    "\3\0\61\36\17\0\1\36\37\0\40\36\15\0\36\36"+
    "\5\0\53\36\5\0\36\36\2\0\44\36\4\0\10\36"+
    "\1\0\5\36\52\0\236\36\2\0\12\101\6\0\44\36"+
    "\4\0\44\36\4\0\50\36\10\0\64\36\234\0\67\36"+
    "\11\0\26\36\12\0\10\36\230\0\6\36\2\0\1\36"+
    "\1\0\54\36\1\0\2\36\3\0\1\36\2\0\27\36"+
    "\12\0\27\36\11\0\37\36\101\0\23\36\1\0\2\36"+
    "\12\0\26\36\12\0\32\36\106\0\70\36\6\0\2\36"+
    "\100\0\4\36\1\0\2\36\5\0\10\36\1\0\3\36"+
    "\1\0\35\36\2\0\3\36\4\0\1\36\40\0\35\36"+
    "\3\0\35\36\43\0\10\36\1\0\36\36\31\0\66\36"+
    "\12\0\26\36\12\0\23\36\15\0\22\36\156\0\111\36"+
    "\67\0\63\36\15\0\63\36\15\0\50\36\10\0\12\101"+
    "\306\0\35\36\12\0\1\36\10\0\41\36\217\0\27\36"+
    "\11\0\107\36\37\0\12\101\17\0\74\36\25\0\31\36"+
    "\7\0\12\101\6\0\65\36\1\0\12\101\4\0\3\36"+
    "\11\0\44\36\2\0\1\36\11\0\105\36\4\0\4\36"+
    "\3\0\12\101\1\36\1\0\1\36\43\0\22\36\1\0"+
    "\45\36\6\0\1\36\101\0\7\36\1\0\1\36\1\0"+
    "\4\36\1\0\17\36\1\0\12\36\7\0\73\36\5\0"+
    "\12\101\6\0\4\36\1\0\10\36\2\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\5\36\1\0"+
    "\12\36\2\0\2\36\2\0\3\36\2\0\1\36\6\0"+
    "\1\36\5\0\7\36\2\0\7\36\3\0\5\36\213\0"+
    "\113\36\5\0\12\101\4\0\2\36\40\0\106\36\1\0"+
    "\1\36\10\0\12\101\246\0\66\36\2\0\11\36\27\0"+
    "\6\36\42\0\101\36\3\0\1\36\13\0\12\101\46\0"+
    "\71\36\7\0\12\101\66\0\33\36\2\0\17\36\4\0"+
    "\12\101\306\0\73\36\145\0\100\36\12\101\25\0\1\36"+
    "\240\0\10\36\2\0\56\36\2\0\10\36\1\0\2\36"+
    "\33\0\77\36\10\0\1\36\10\0\112\36\3\0\1\36"+
    "\42\0\71\36\7\0\11\36\1\0\55\36\1\0\11\36"+
    "\17\0\12\101\30\0\36\36\2\0\26\36\1\0\16\36"+
    "\111\0\7\36\1\0\2\36\1\0\54\36\3\0\1\36"+
    "\1\0\2\36\1\0\11\36\10\0\12\101\6\0\6\36"+
    "\1\0\2\36\1\0\45\36\1\0\2\36\1\0\6\36"+
    "\7\0\12\101\u0136\0\27\36\11\0\232\36\146\0\157\36"+
    "\21\0\304\36\274\0\57\36\321\0\107\36\271\0\71\36"+
    "\7\0\37\36\1\0\12\101\146\0\36\36\2\0\5\36"+
    "\13\0\67\36\11\0\4\36\14\0\12\101\11\0\25\36"+
    "\5\0\23\36\260\0\100\36\200\0\113\36\4\0\71\36"+
    "\7\0\21\36\100\0\2\36\1\0\1\36\34\0\370\36"+
    "\10\0\363\36\15\0\37\36\61\0\3\36\21\0\4\36"+
    "\10\0\u018c\36\4\0\153\36\5\0\15\36\3\0\11\36"+
    "\7\0\12\36\3\0\2\36\306\0\5\36\3\0\6\36"+
    "\10\0\10\36\2\0\7\36\36\0\4\36\224\0\3\36"+
    "\273\0\125\36\1\0\107\36\1\0\2\36\2\0\1\36"+
    "\2\0\2\36\2\0\4\36\1\0\14\36\1\0\1\36"+
    "\1\0\7\36\1\0\101\36\1\0\4\36\2\0\10\36"+
    "\1\0\7\36\1\0\34\36\1\0\4\36\1\0\5\36"+
    "\1\0\1\36\3\0\7\36\1\0\u0154\36\2\0\31\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\10\36\2\0\62\101\67\36\4\0"+
    "\62\36\10\0\1\36\16\0\1\36\26\0\5\36\1\0"+
    "\17\36\120\0\7\36\1\0\21\36\2\0\7\36\1\0"+
    "\2\36\1\0\5\36\325\0\55\36\3\0\16\36\2\0"+
    "\12\101\4\0\1\36\u0171\0\60\36\12\101\6\0\305\36"+
    "\13\0\7\36\51\0\114\36\4\0\12\101\246\0\4\36"+
    "\1\0\33\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\12\36\1\0\4\36\1\0\1\36\1\0\1\36"+
    "\6\0\1\36\4\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\3\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\0\1\36\2\0\4\36\1\0\7\36"+
    "\1\0\4\36\1\0\4\36\1\0\1\36\1\0\12\36"+
    "\1\0\21\36\5\0\3\36\1\0\5\36\1\0\21\36"+
    "\164\0\32\36\6\0\32\36\6\0\32\36\166\0\327\36"+
    "\51\0\65\36\13\0\336\36\2\0\u0182\36\16\0\u0131\36"+
    "\37\0\36\36\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\27\1\30\1\1\1\31\1\32\20\27\1\33"+
    "\1\34\1\35\1\36\1\37\2\5\1\0\1\40\1\41"+
    "\2\5\1\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\4\0\1\51\1\52\1\53\1\54\1\55\3\27"+
    "\1\56\1\57\1\27\1\60\1\27\2\61\12\27\1\62"+
    "\1\27\1\63\1\64\3\27\1\65\10\27\1\66\3\5"+
    "\1\67\1\0\1\46\2\21\1\70\1\71\3\27\1\72"+
    "\3\27\2\61\1\0\2\61\1\0\3\27\1\73\1\74"+
    "\4\27\1\75\6\27\1\76\3\27\1\77\3\27\4\0"+
    "\1\27\1\100\1\101\3\27\3\61\3\27\1\102\1\103"+
    "\2\27\1\104\3\27\1\105\1\27\1\106\3\27\1\107"+
    "\1\27\2\0\1\110\1\27\1\111\1\112\4\0\1\113"+
    "\1\114\7\27\1\115\1\27\1\116\1\117\1\120\2\0"+
    "\1\27\1\121\1\27\1\122\1\123\1\124\1\27\1\125"+
    "\1\27\1\126\1\27\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\102\0\204\0\306\0\u0108"+
    "\0\u014a\0\u018c\0\u01ce\0\102\0\102\0\u0210\0\u0252\0\102"+
    "\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\102\0\102\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\102\0\u05ac"+
    "\0\102\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\102\0\u0a50\0\102\0\102\0\102\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\102\0\102\0\u0b58\0\u0b9a\0\u0bdc\0\102"+
    "\0\102\0\102\0\102\0\u0c1e\0\u0c60\0\102\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\102\0\102\0\102\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\102\0\102\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u04a4\0\u12d2\0\u04a4\0\u04a4\0\u1314"+
    "\0\u1356\0\u1398\0\u04a4\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\102\0\102\0\u15ea\0\u162c\0\102"+
    "\0\u166e\0\u166e\0\u0d26\0\u0d68\0\102\0\102\0\u16b0\0\u16f2"+
    "\0\u1734\0\u04a4\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u04a4\0\u04a4"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u04a4\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u04a4\0\u1d22\0\u1d64\0\u1da6\0\u04a4"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u04a4\0\u04a4\0\u1ff8\0\u203a\0\u207c\0\102\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u04a4\0\u04a4\0\u2208\0\u224a\0\u04a4"+
    "\0\u228c\0\u22ce\0\u2310\0\u04a4\0\u2352\0\u04a4\0\u2394\0\u23d6"+
    "\0\u2418\0\u04a4\0\u245a\0\u249c\0\u24de\0\u04a4\0\u2520\0\u04a4"+
    "\0\u04a4\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u04a4\0\u04a4\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u04a4\0\u2838"+
    "\0\u04a4\0\u04a4\0\u04a4\0\u287a\0\u28bc\0\u28fe\0\u04a4\0\u2940"+
    "\0\u04a4\0\u04a4\0\u04a4\0\u2982\0\u04a4\0\u29c4\0\u04a4\0\u2a06"+
    "\0\u04a4\0\u04a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\33\1\34\1\33\1\35\1\33\1\36"+
    "\1\33\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\33\1\52\1\33\1\53"+
    "\1\33\1\54\1\55\1\56\1\57\1\33\1\60\1\33"+
    "\1\61\1\33\1\62\1\63\1\64\1\65\1\66\1\2"+
    "\133\0\1\67\50\0\2\70\1\0\3\70\1\71\35\70"+
    "\1\72\35\70\2\10\2\0\76\10\31\0\1\73\101\0"+
    "\1\74\50\0\2\75\1\0\7\75\1\76\31\75\1\77"+
    "\35\75\15\0\1\100\13\0\1\101\101\0\1\102\101\0"+
    "\1\103\73\0\3\104\76\0\1\105\6\0\1\106\71\0"+
    "\1\104\1\0\3\107\6\0\1\110\3\0\1\111\1\0"+
    "\1\112\10\0\1\110\10\0\1\111\6\0\1\112\27\0"+
    "\1\104\1\0\3\25\6\0\1\110\16\0\1\110\56\0"+
    "\1\113\1\114\101\0\1\115\101\0\1\116\1\117\72\0"+
    "\3\33\5\0\10\33\4\0\26\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\1\120\25\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\15\33\1\121\10\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\17\33"+
    "\1\122\6\33\4\0\1\33\2\0\1\123\130\0\1\124"+
    "\73\0\3\33\5\0\10\33\4\0\14\33\1\125\3\33"+
    "\1\126\2\33\1\127\2\33\4\0\1\33\6\0\1\130"+
    "\3\0\1\131\10\0\3\33\5\0\10\33\4\0\17\33"+
    "\1\132\6\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\12\33\1\133\2\33\1\134\10\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\4\33\1\135\21\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\12\33"+
    "\1\136\11\33\1\137\1\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\10\33\1\140\4\33\1\141\1\33"+
    "\1\142\6\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\12\33\1\143\13\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\5\33\1\144\5\33\1\145\1\146"+
    "\3\33\1\147\5\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\1\150\14\33\1\151\10\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\15\33\1\152\10\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\17\33"+
    "\1\153\6\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\1\154\25\33\4\0\1\33\6\0\1\7\3\0"+
    "\1\13\10\0\3\33\5\0\10\33\4\0\1\155\1\156"+
    "\2\33\1\157\21\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\17\33\1\160\6\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\7\33\1\161\1\162\15\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\10\33"+
    "\1\163\15\33\4\0\1\33\31\0\1\164\50\0\2\70"+
    "\1\0\3\70\1\165\35\70\1\72\35\70\6\0\1\166"+
    "\73\0\102\70\2\75\1\0\7\75\1\165\31\75\1\77"+
    "\35\75\12\0\1\167\67\0\102\75\23\0\3\104\6\0"+
    "\1\110\16\0\1\110\57\0\1\170\71\0\1\104\1\0"+
    "\3\107\6\0\1\110\16\0\1\110\44\0\1\171\1\0"+
    "\1\171\2\0\3\172\77\0\2\173\100\0\3\174\5\0"+
    "\3\174\11\0\6\174\56\0\1\175\101\0\1\176\73\0"+
    "\3\33\5\0\10\33\4\0\12\33\1\177\13\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\14\33\1\200"+
    "\11\33\4\0\1\33\23\0\3\33\5\0\10\33\4\0"+
    "\22\33\1\201\3\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\3\33\1\202\22\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\20\33\1\203\4\33\1\204"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\1\205"+
    "\25\33\4\0\1\33\2\206\1\0\3\206\1\207\35\206"+
    "\1\210\35\206\2\211\1\0\7\211\1\212\31\211\1\213"+
    "\35\211\6\0\1\130\3\0\1\131\10\0\3\33\5\0"+
    "\10\33\4\0\4\33\1\214\21\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\1\215\25\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\14\33\1\216\11\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\5\33"+
    "\1\217\4\33\1\220\13\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\10\33\1\221\7\33\1\222\5\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\2\33"+
    "\1\223\23\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\14\33\1\224\11\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\17\33\1\225\6\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\15\33\1\226\10\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\15\33"+
    "\1\227\10\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\16\33\1\230\7\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\13\33\1\231\12\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\1\232\25\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\14\33\1\233"+
    "\4\33\1\234\4\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\20\33\1\235\5\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\10\33\1\236\15\33\4\0"+
    "\1\33\6\0\1\130\3\0\1\131\10\0\3\33\5\0"+
    "\10\33\4\0\26\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\21\33\1\237\4\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\25\33\1\240\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\10\33\1\241\15\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\21\33"+
    "\1\242\4\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\4\33\1\243\21\33\4\0\1\33\6\166\1\244"+
    "\35\166\1\245\35\166\12\167\1\246\31\167\1\247\35\167"+
    "\23\0\3\172\77\0\3\33\5\0\10\33\4\0\20\33"+
    "\1\250\5\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\4\33\1\251\21\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\4\33\1\252\21\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\4\33\1\253\21\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\14\33"+
    "\1\254\11\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\10\33\1\255\15\33\4\0\1\33\2\206\1\0"+
    "\3\206\1\256\35\206\1\210\35\206\6\0\1\257\73\0"+
    "\102\206\2\211\1\0\7\211\1\256\31\211\1\213\35\211"+
    "\12\0\1\260\67\0\102\211\23\0\3\33\5\0\10\33"+
    "\4\0\1\261\25\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\20\33\1\262\5\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\21\33\1\263\4\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\5\33\1\264"+
    "\20\33\4\0\1\33\23\0\3\33\5\0\10\33\4\0"+
    "\4\33\1\265\21\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\4\33\1\266\21\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\1\267\25\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\13\33\1\270\12\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\1\33"+
    "\1\271\24\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\15\33\1\272\10\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\1\33\1\273\24\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\3\33\1\274\22\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\12\33"+
    "\1\275\13\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\20\33\1\276\5\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\20\33\1\277\5\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\22\33\1\300\3\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\12\33"+
    "\1\301\13\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\7\33\1\302\16\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\12\33\1\303\13\33\4\0\1\33"+
    "\6\166\1\304\35\166\1\245\137\166\12\167\1\305\31\167"+
    "\1\247\137\167\23\0\3\33\5\0\10\33\4\0\4\33"+
    "\1\306\21\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\17\33\1\307\6\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\2\33\1\310\23\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\21\33\1\311\4\33"+
    "\4\0\1\33\6\257\1\312\35\257\1\313\35\257\12\260"+
    "\1\314\31\260\1\315\35\260\23\0\3\33\5\0\10\33"+
    "\4\0\11\33\1\316\14\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\20\33\1\317\5\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\10\33\1\320\15\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\16\33"+
    "\1\321\7\33\4\0\1\33\23\0\3\33\5\0\10\33"+
    "\4\0\12\33\1\322\13\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\1\323\25\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\17\33\1\324\6\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\3\33\1\325"+
    "\22\33\4\0\1\33\23\0\3\33\5\0\10\33\4\0"+
    "\15\33\1\326\10\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\4\33\1\327\21\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\17\33\1\330\6\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\4\33\1\331"+
    "\21\33\4\0\1\33\23\0\3\33\5\0\10\33\4\0"+
    "\3\33\1\332\22\33\4\0\1\33\6\166\1\165\35\166"+
    "\1\245\35\166\12\167\1\165\31\167\1\247\35\167\23\0"+
    "\3\33\5\0\10\33\4\0\21\33\1\333\4\33\4\0"+
    "\1\33\6\257\1\334\35\257\1\313\137\257\12\260\1\335"+
    "\31\260\1\315\137\260\23\0\3\33\5\0\10\33\4\0"+
    "\14\33\1\336\11\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\21\33\1\337\4\33\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\12\33\1\340\13\33\4\0"+
    "\1\33\23\0\3\33\5\0\10\33\4\0\12\33\1\341"+
    "\13\33\4\0\1\33\23\0\3\33\5\0\10\33\4\0"+
    "\21\33\1\342\4\33\4\0\1\33\23\0\3\33\5\0"+
    "\10\33\4\0\1\343\25\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\2\33\1\344\23\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\14\33\1\345\11\33"+
    "\4\0\1\33\6\257\1\256\35\257\1\313\35\257\12\260"+
    "\1\256\31\260\1\315\35\260\23\0\3\33\5\0\10\33"+
    "\4\0\22\33\1\346\3\33\4\0\1\33\23\0\3\33"+
    "\5\0\10\33\4\0\25\33\1\347\4\0\1\33\23\0"+
    "\3\33\5\0\10\33\4\0\1\350\25\33\4\0\1\33"+
    "\23\0\3\33\5\0\10\33\4\0\4\33\1\351\21\33"+
    "\4\0\1\33\23\0\3\33\5\0\10\33\4\0\12\33"+
    "\1\352\13\33\4\0\1\33";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10824];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\6\1\2\11\2\1\1\11\5\1\2\11"+
    "\7\1\1\11\1\1\1\11\21\1\1\11\1\1\3\11"+
    "\2\1\1\0\2\11\2\1\1\0\4\11\2\1\1\11"+
    "\4\0\1\1\3\11\4\1\2\11\37\1\2\11\2\1"+
    "\1\11\1\0\3\1\2\11\11\1\1\0\2\1\1\0"+
    "\30\1\4\0\6\1\1\11\25\1\2\0\4\1\4\0"+
    "\16\1\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _StarlarkLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 89: break;
          case 2:
            { return StarlarkTokenTypes.TAB;
            }
          // fall through
          case 90: break;
          case 3:
            { return StarlarkTokenTypes.LINE_BREAK;
            }
          // fall through
          case 91: break;
          case 4:
            { return StarlarkTokenTypes.SPACE;
            }
          // fall through
          case 92: break;
          case 5:
            { return StarlarkTokenTypes.STRING;
            }
          // fall through
          case 93: break;
          case 6:
            { return StarlarkTokenTypes.COMMENT;
            }
          // fall through
          case 94: break;
          case 7:
            { return StarlarkTokenTypes.PERC;
            }
          // fall through
          case 95: break;
          case 8:
            { return StarlarkTokenTypes.AND;
            }
          // fall through
          case 96: break;
          case 9:
            { return StarlarkTokenTypes.LPAR;
            }
          // fall through
          case 97: break;
          case 10:
            { return StarlarkTokenTypes.RPAR;
            }
          // fall through
          case 98: break;
          case 11:
            { return StarlarkTokenTypes.MULT;
            }
          // fall through
          case 99: break;
          case 12:
            { return StarlarkTokenTypes.PLUS;
            }
          // fall through
          case 100: break;
          case 13:
            { return StarlarkTokenTypes.COMMA;
            }
          // fall through
          case 101: break;
          case 14:
            { return StarlarkTokenTypes.MINUS;
            }
          // fall through
          case 102: break;
          case 15:
            { return StarlarkTokenTypes.DOT;
            }
          // fall through
          case 103: break;
          case 16:
            { return StarlarkTokenTypes.DIV;
            }
          // fall through
          case 104: break;
          case 17:
            { return StarlarkTokenTypes.INT;
            }
          // fall through
          case 105: break;
          case 18:
            { return StarlarkTokenTypes.COLON;
            }
          // fall through
          case 106: break;
          case 19:
            { return StarlarkTokenTypes.SEMICOLON;
            }
          // fall through
          case 107: break;
          case 20:
            { return StarlarkTokenTypes.LT;
            }
          // fall through
          case 108: break;
          case 21:
            { return StarlarkTokenTypes.EQ;
            }
          // fall through
          case 109: break;
          case 22:
            { return StarlarkTokenTypes.GT;
            }
          // fall through
          case 110: break;
          case 23:
            { return StarlarkTokenTypes.IDENTIFIER;
            }
          // fall through
          case 111: break;
          case 24:
            { return StarlarkTokenTypes.LBRACKET;
            }
          // fall through
          case 112: break;
          case 25:
            { return StarlarkTokenTypes.RBRACKET;
            }
          // fall through
          case 113: break;
          case 26:
            { return StarlarkTokenTypes.XOR;
            }
          // fall through
          case 114: break;
          case 27:
            { return StarlarkTokenTypes.LBRACE;
            }
          // fall through
          case 115: break;
          case 28:
            { return StarlarkTokenTypes.OR;
            }
          // fall through
          case 116: break;
          case 29:
            { return StarlarkTokenTypes.RBRACE;
            }
          // fall through
          case 117: break;
          case 30:
            { return StarlarkTokenTypes.TILDE;
            }
          // fall through
          case 118: break;
          case 31:
            { return StarlarkTokenTypes.NE;
            }
          // fall through
          case 119: break;
          case 32:
            { return StarlarkTokenTypes.PERCEQ;
            }
          // fall through
          case 120: break;
          case 33:
            { return StarlarkTokenTypes.ANDEQ;
            }
          // fall through
          case 121: break;
          case 34:
            { return StarlarkTokenTypes.EXP;
            }
          // fall through
          case 122: break;
          case 35:
            { return StarlarkTokenTypes.MULTEQ;
            }
          // fall through
          case 123: break;
          case 36:
            { return StarlarkTokenTypes.PLUSEQ;
            }
          // fall through
          case 124: break;
          case 37:
            { return StarlarkTokenTypes.MINUSEQ;
            }
          // fall through
          case 125: break;
          case 38:
            { return StarlarkTokenTypes.FLOAT;
            }
          // fall through
          case 126: break;
          case 39:
            { return StarlarkTokenTypes.FLOORDIV;
            }
          // fall through
          case 127: break;
          case 40:
            { return StarlarkTokenTypes.DIVEQ;
            }
          // fall through
          case 128: break;
          case 41:
            { return StarlarkTokenTypes.LTLT;
            }
          // fall through
          case 129: break;
          case 42:
            { return StarlarkTokenTypes.LE;
            }
          // fall through
          case 130: break;
          case 43:
            { return StarlarkTokenTypes.EQEQ;
            }
          // fall through
          case 131: break;
          case 44:
            { return StarlarkTokenTypes.GE;
            }
          // fall through
          case 132: break;
          case 45:
            { return StarlarkTokenTypes.GTGT;
            }
          // fall through
          case 133: break;
          case 46:
            { return StarlarkTokenTypes.LINE_CONTINUATION;
            }
          // fall through
          case 134: break;
          case 47:
            { return StarlarkTokenTypes.XOREQ;
            }
          // fall through
          case 135: break;
          case 48:
            { return StarlarkTokenTypes.AS_KEYWORD;
            }
          // fall through
          case 136: break;
          case 49:
            { return StarlarkTokenTypes.BYTES;
            }
          // fall through
          case 137: break;
          case 50:
            { return StarlarkTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 138: break;
          case 51:
            { return StarlarkTokenTypes.IN_KEYWORD;
            }
          // fall through
          case 139: break;
          case 52:
            { return StarlarkTokenTypes.IS_KEYWORD;
            }
          // fall through
          case 140: break;
          case 53:
            { return StarlarkTokenTypes.OR_KEYWORD;
            }
          // fall through
          case 141: break;
          case 54:
            { return StarlarkTokenTypes.OREQ;
            }
          // fall through
          case 142: break;
          case 55:
            { return StarlarkTokenTypes.FLOORDIVEQ;
            }
          // fall through
          case 143: break;
          case 56:
            { return StarlarkTokenTypes.LTLTEQ;
            }
          // fall through
          case 144: break;
          case 57:
            { return StarlarkTokenTypes.GTGTEQ;
            }
          // fall through
          case 145: break;
          case 58:
            { return StarlarkTokenTypes.AND_KEYWORD;
            }
          // fall through
          case 146: break;
          case 59:
            { return StarlarkTokenTypes.DEF_KEYWORD;
            }
          // fall through
          case 147: break;
          case 60:
            { return StarlarkTokenTypes.DEL_KEYWORD;
            }
          // fall through
          case 148: break;
          case 61:
            { return StarlarkTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 149: break;
          case 62:
            { return StarlarkTokenTypes.NOT_KEYWORD;
            }
          // fall through
          case 150: break;
          case 63:
            { return StarlarkTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 151: break;
          case 64:
            { return StarlarkTokenTypes.NONE_KEYWORD;
            }
          // fall through
          case 152: break;
          case 65:
            { return StarlarkTokenTypes.TRUE_KEYWORD;
            }
          // fall through
          case 153: break;
          case 66:
            { return StarlarkTokenTypes.ELIF_KEYWORD;
            }
          // fall through
          case 154: break;
          case 67:
            { return StarlarkTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 155: break;
          case 68:
            { return StarlarkTokenTypes.FROM_KEYWORD;
            }
          // fall through
          case 156: break;
          case 69:
            { return StarlarkTokenTypes.LOAD_KEYWORD;
            }
          // fall through
          case 157: break;
          case 70:
            { return StarlarkTokenTypes.PASS_KEYWORD;
            }
          // fall through
          case 158: break;
          case 71:
            { return StarlarkTokenTypes.WITH_KEYWORD;
            }
          // fall through
          case 159: break;
          case 72:
            { return StarlarkTokenTypes.FALSE_KEYWORD;
            }
          // fall through
          case 160: break;
          case 73:
            { return StarlarkTokenTypes.ASYNC_KEYWORD;
            }
          // fall through
          case 161: break;
          case 74:
            { return StarlarkTokenTypes.AWAIT_KEYWORD;
            }
          // fall through
          case 162: break;
          case 75:
            { return StarlarkTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 163: break;
          case 76:
            { return StarlarkTokenTypes.CLASS_KEYWORD;
            }
          // fall through
          case 164: break;
          case 77:
            { return StarlarkTokenTypes.RAISE_KEYWORD;
            }
          // fall through
          case 165: break;
          case 78:
            { return StarlarkTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 166: break;
          case 79:
            { return StarlarkTokenTypes.YIELD_KEYWORD;
            }
          // fall through
          case 167: break;
          case 80:
            { return StarlarkTokenTypes.ASSERT_KEYWORD;
            }
          // fall through
          case 168: break;
          case 81:
            { return StarlarkTokenTypes.EXCEPT_KEYWORD;
            }
          // fall through
          case 169: break;
          case 82:
            { return StarlarkTokenTypes.GLOBAL_KEYWORD;
            }
          // fall through
          case 170: break;
          case 83:
            { return StarlarkTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 171: break;
          case 84:
            { return StarlarkTokenTypes.LAMBDA_KEYWORD;
            }
          // fall through
          case 172: break;
          case 85:
            { return StarlarkTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 173: break;
          case 86:
            { return StarlarkTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 174: break;
          case 87:
            { return StarlarkTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 175: break;
          case 88:
            { return StarlarkTokenTypes.NONLOCAL_KEYWORD;
            }
          // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
