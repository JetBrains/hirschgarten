// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bazelquery.flex

package org.jetbrains.bazel.languages.bazelquery.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.bazel.languages.bazelquery.elements.BazelqueryTokenTypes;

@SuppressWarnings("UnnecessaryUnicodeEscape")

class _BazelqueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPR = 2;
  public static final int WORD_DQ = 4;
  public static final int WORD_SQ = 6;
  public static final int FLAG = 8;
  public static final int VALUE = 10;
  public static final int PRE_VALUE = 12;
  public static final int VALUE_SQ = 14;
  public static final int VALUE_DQ = 16;
  public static final int SPACE_NEEDED = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\0"+
    "\1\5\1\6\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\7\12\17\1\20\2\0\1\21"+
    "\2\0\1\22\33\7\1\23\1\7\1\24\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\37\1\54"+
    "\1\55\1\56\3\0\1\7\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\1\2\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\7\1\5\1\20\15\7\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\27\1\5"+
    "\1\31\2\32\1\33\1\34\1\0\1\4\3\0\6\7"+
    "\1\35\15\7\1\21\1\36\1\22\1\37\1\24\1\40"+
    "\1\41\2\0\1\42\1\43\3\0\11\7\1\44\4\7"+
    "\1\45\5\7\1\46\1\47\11\40\2\0\2\7\1\50"+
    "\1\7\1\51\3\7\1\52\6\7\1\53\3\7\13\40"+
    "\1\54\1\55\11\7\1\56\3\7\1\57\1\13\1\7"+
    "\13\40\1\60\1\61\3\7\1\15\1\62\1\7\1\63"+
    "\6\7\13\40\11\7\1\64\13\40\1\65\1\66\5\7"+
    "\1\67\1\70\6\40\1\71\4\40\1\7\1\20\1\72"+
    "\2\7\15\40\1\73\2\7\7\40\1\41\5\40\1\74"+
    "\1\7\14\40\1\7\12\40\1\71\1\40\1\7\6\40"+
    "\1\71\3\40\1\7\7\40\1\7\6\40\1\7\6\40"+
    "\1\7\4\40\1\7\4\40\1\7\4\40\1\7\4\40"+
    "\1\75\25\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u01d6\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u01d6\0\u01d6\0\u02f0\0\u01d6\0\u01d6\0\u01d6\0\u01d6"+
    "\0\u01d6\0\u01d6\0\u031f\0\u01d6\0\u034e\0\u0263\0\u01d6\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u01d6\0\u06cb\0\u01d6\0\u06fa\0\u0729\0\u01d6\0\u0758"+
    "\0\u0787\0\u01d6\0\u01d6\0\u0263\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u01d6\0\u0c4d\0\u01d6"+
    "\0\u0c7c\0\u0cab\0\u01d6\0\u0729\0\u0cda\0\u01d6\0\u01d6\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u02f0\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u02f0\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u01d6\0\u01d6"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u02f0\0\u1347\0\u02f0"+
    "\0\u1376\0\u13a5\0\u13d4\0\u02f0\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\u1927\0\u1956\0\u1985\0\u19b4\0\u02f0\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u02f0\0\u02f0\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u01d6\0\u01d6"+
    "\0\u1ca4\0\u1cd3\0\u1d02\0\u02f0\0\u02f0\0\u1d31\0\u02f0\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8"+
    "\0\u21f7\0\u02f0\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311"+
    "\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u02f0\0\u02f0\0\u242b"+
    "\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u02f0\0\u02f0\0\u2516\0\u2545"+
    "\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd"+
    "\0\u26ec\0\u271b\0\u02f0\0\u02f0\0\u274a\0\u2779\0\u27a8\0\u27d7"+
    "\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\u29ad\0\u29dc\0\u02f0\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u063e\0\u2bb2\0\u2be1"+
    "\0\u2c10\0\u2c3f\0\u2c6e\0\u02f0\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a"+
    "\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2"+
    "\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a"+
    "\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192"+
    "\0\u31c1\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a"+
    "\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482"+
    "\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa"+
    "\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772"+
    "\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea"+
    "\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62"+
    "\0\u3a91\0\u3ac0\0\u3aef\0\u02f0\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab"+
    "\0\u3bda\0\u3c09\0\u3c38\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23"+
    "\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b"+
    "\0\u3eca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\4\14\1\15\1\16\2\15\6\13\2\15\1\13"+
    "\1\15\1\17\1\13\2\15\1\20\16\15\1\21\10\15"+
    "\1\22\4\14\1\23\1\22\1\24\1\25\1\26\1\27"+
    "\1\22\1\30\1\31\1\32\1\33\1\24\1\34\1\35"+
    "\1\36\1\37\1\24\1\40\1\41\1\24\1\42\1\43"+
    "\1\44\2\24\1\45\1\24\1\46\1\47\5\24\1\50"+
    "\1\51\1\52\1\53\1\54\3\24\5\15\1\55\61\15"+
    "\1\56\46\15\1\57\4\0\11\57\1\60\40\57\1\22"+
    "\4\61\1\62\1\22\1\63\1\64\6\22\2\63\1\22"+
    "\1\65\1\66\1\22\32\63\1\0\1\67\2\0\1\67"+
    "\14\0\1\67\35\0\10\22\1\70\53\22\1\71\51\22"+
    "\1\72\4\73\52\72\60\0\4\14\16\0\1\74\33\0"+
    "\2\16\2\0\17\16\1\75\33\16\2\0\1\14\1\76"+
    "\101\0\1\77\102\0\1\100\13\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\32\24\7\0\1\24"+
    "\3\0\1\24\2\0\1\24\1\33\1\24\1\0\1\24"+
    "\2\0\32\24\7\0\1\35\3\0\2\35\1\0\3\35"+
    "\1\0\1\35\2\0\32\35\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\14\24\1\101\7\24"+
    "\1\102\5\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\25\24\1\103\4\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\5\24"+
    "\1\104\24\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\27\24\1\105\2\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\11\24"+
    "\1\106\20\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\16\24\1\107\13\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\11\24"+
    "\1\110\20\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\1\24\1\111\3\24\1\112\11\24"+
    "\1\113\12\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\2\24\1\114\1\24\1\115\25\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\1\24\1\116\3\24\1\117\3\24\1\120\5\24"+
    "\1\121\12\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\5\24\1\122\24\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\16\24"+
    "\1\123\13\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\11\24\1\124\20\24\2\125\2\0"+
    "\1\125\1\126\2\125\1\0\46\125\2\127\2\0\1\127"+
    "\1\0\2\127\1\130\46\127\1\57\4\0\52\57\16\0"+
    "\1\131\1\0\1\132\1\133\3\0\32\132\1\0\4\61"+
    "\16\0\1\134\42\0\1\63\3\0\1\63\2\0\3\63"+
    "\1\0\1\63\2\0\32\63\7\0\1\65\3\0\2\65"+
    "\1\0\3\65\1\0\1\65\2\0\32\65\2\0\1\61"+
    "\1\135\53\0\2\70\2\0\4\70\1\136\46\70\2\71"+
    "\2\0\1\71\1\137\51\71\3\16\1\140\17\16\1\75"+
    "\33\16\2\0\1\14\132\0\1\141\32\0\1\142\33\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\14\24\1\143\15\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\24\24\1\144\5\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\11\24\1\145\20\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\20\24\1\146\11\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\3\24\1\147\26\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\14\24\1\150\15\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\24\24\1\151\5\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\16\24\1\152\13\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\2\24\1\153\27\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\24\24\1\154\5\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\1\24\1\155\30\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\25\24\1\156\4\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\5\24\1\157\24\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\15\24\1\160\14\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\24\24\1\161\5\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\2\24\1\162\27\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\15\24\1\163\14\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\23\24\1\164\6\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\11\24\1\165\20\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\23\24\1\166\6\24\2\125"+
    "\2\0\1\125\1\167\2\125\1\0\46\125\2\127\2\0"+
    "\1\127\1\0\2\127\1\170\46\127\20\0\1\132\1\133"+
    "\3\0\1\132\1\171\2\132\1\172\1\173\1\132\1\174"+
    "\4\132\1\175\2\132\1\176\1\177\1\200\3\132\1\201"+
    "\4\132\20\0\1\132\1\133\3\0\32\132\2\0\1\61"+
    "\56\0\1\16\106\0\1\202\73\0\1\203\16\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\20\24"+
    "\1\204\1\24\1\205\7\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\22\24\1\206\7\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\14\24\1\207\15\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\23\24\1\210\6\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\211\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\24\24\1\212\5\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\213\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\4\24\1\214\25\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\215\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\4\24\1\216\25\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\11\24\1\217\20\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\20\24\1\220\11\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\221\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\14\24\1\222\15\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\223\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\24\24\1\224\5\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\17\24\1\225\12\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\11\24\1\226\20\24"+
    "\20\0\1\132\1\133\3\0\23\132\1\227\6\132\20\0"+
    "\1\132\1\133\3\0\5\132\1\230\24\132\20\0\1\132"+
    "\1\133\3\0\27\132\1\231\2\132\20\0\1\132\1\133"+
    "\3\0\22\132\1\232\7\132\20\0\1\132\1\133\3\0"+
    "\17\132\1\233\12\132\20\0\1\132\1\133\3\0\22\132"+
    "\1\234\2\132\1\235\4\132\20\0\1\132\1\133\3\0"+
    "\1\132\1\236\20\132\1\237\7\132\20\0\1\132\1\133"+
    "\3\0\25\132\1\240\4\132\20\0\1\132\1\133\3\0"+
    "\16\132\1\241\13\132\41\0\1\242\72\0\1\243\10\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\1\24\1\244\30\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\4\24\1\245\25\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\4\24\1\246\25\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\20\24\1\247\11\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\5\24\1\250\24\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\22\24\1\251\7\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\14\24\1\252\15\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\6\24\1\253\23\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\14\24\1\254\15\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\23\24\1\255\6\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\1\256\31\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\11\24\1\257\20\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\20\24"+
    "\1\260\11\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\23\24\1\261\6\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\16\24"+
    "\1\262\13\24\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\2\24\1\263\27\24\20\0\1\132"+
    "\1\133\3\0\20\132\1\264\11\132\20\0\1\132\1\133"+
    "\3\0\14\132\1\265\15\132\20\0\1\132\1\133\3\0"+
    "\20\132\1\266\11\132\20\0\1\132\1\133\3\0\1\132"+
    "\1\267\30\132\20\0\1\132\1\133\3\0\1\132\1\270"+
    "\30\132\20\0\1\132\1\133\3\0\4\132\1\271\25\132"+
    "\20\0\1\132\1\133\3\0\24\132\1\272\5\132\20\0"+
    "\1\132\1\133\3\0\3\132\1\273\26\132\20\0\1\132"+
    "\1\133\3\0\17\132\1\274\12\132\20\0\1\132\1\133"+
    "\3\0\5\132\1\275\24\132\20\0\1\132\1\133\3\0"+
    "\11\132\1\276\20\132\4\0\1\277\56\0\1\300\61\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\24\24\1\301\5\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\5\24\1\302\24\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\6\24\1\303\23\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\24\24\1\304\5\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\22\24\1\305\7\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\23\24\1\306\6\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\23\24\1\307\6\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\11\24\1\310\20\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\4\24\1\311\25\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\20\24\1\312\11\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\16\24\1\313\13\24\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\1\24\1\314\30\24\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\14\24\1\315\15\24\20\0\1\132\1\133\3\0\5\132"+
    "\1\316\24\132\20\0\1\132\1\133\3\0\5\132\1\317"+
    "\24\132\20\0\1\132\1\133\3\0\5\132\1\320\24\132"+
    "\20\0\1\132\1\133\3\0\20\132\1\321\11\132\20\0"+
    "\1\132\1\133\3\0\4\132\1\322\25\132\20\0\1\132"+
    "\1\133\3\0\5\132\1\323\24\132\20\0\1\132\1\133"+
    "\3\0\20\132\1\324\11\132\20\0\1\132\1\133\3\0"+
    "\13\132\1\325\16\132\20\0\1\132\1\133\3\0\24\132"+
    "\1\326\5\132\20\0\1\132\1\133\3\0\22\132\1\327"+
    "\7\132\20\0\1\132\1\133\3\0\26\132\1\330\3\132"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\10\24\1\331\21\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\20\24\1\332\11\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\11\24\1\333\20\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\5\24\1\334\24\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\14\24\1\335\15\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\6\24\1\336\23\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\13\24\1\337\16\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\7\24\1\340\22\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\24\24\1\341\5\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\5\24\1\342\24\24"+
    "\20\0\1\132\1\133\3\0\3\132\1\343\26\132\20\0"+
    "\1\132\1\133\3\0\24\132\1\344\5\132\20\0\1\132"+
    "\1\133\3\0\22\132\1\345\7\132\20\0\1\132\1\133"+
    "\3\0\10\132\1\346\21\132\20\0\1\132\1\133\3\0"+
    "\11\132\1\347\20\132\20\0\1\132\1\133\3\0\22\132"+
    "\1\350\7\132\20\0\1\132\1\133\3\0\25\132\1\351"+
    "\4\132\20\0\1\132\1\133\3\0\1\132\1\352\30\132"+
    "\20\0\1\132\1\133\3\0\17\132\1\353\12\132\20\0"+
    "\1\132\1\133\3\0\30\132\1\354\1\132\20\0\1\132"+
    "\1\133\3\0\5\132\1\355\24\132\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\23\24\1\356"+
    "\6\24\7\0\1\24\3\0\1\24\2\0\3\24\1\0"+
    "\1\24\2\0\23\24\1\357\6\24\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\14\24\1\360"+
    "\15\24\7\0\1\24\3\0\1\24\2\0\3\24\1\0"+
    "\1\24\2\0\3\24\1\361\26\24\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\5\24\1\362"+
    "\24\24\7\0\1\24\3\0\1\24\2\0\3\24\1\0"+
    "\1\24\2\0\11\24\1\363\20\24\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\7\24\1\364"+
    "\22\24\7\0\1\24\3\0\1\24\2\0\3\24\1\0"+
    "\1\24\2\0\23\24\1\365\6\24\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\10\24\1\366"+
    "\21\24\20\0\1\132\1\133\3\0\24\132\1\367\5\132"+
    "\20\0\1\132\1\133\3\0\5\132\1\370\24\132\20\0"+
    "\1\132\1\133\3\0\11\132\1\371\20\132\20\0\1\372"+
    "\1\133\3\0\32\132\20\0\1\132\1\133\3\0\16\132"+
    "\1\373\13\132\20\0\1\132\1\133\3\0\1\374\31\132"+
    "\20\0\1\132\1\133\3\0\24\132\1\375\5\132\20\0"+
    "\1\132\1\133\3\0\7\132\1\376\22\132\20\0\1\377"+
    "\1\133\3\0\32\132\20\0\1\132\1\133\3\0\1\u0100"+
    "\31\132\20\0\1\132\1\133\3\0\22\132\1\u0101\7\132"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\u0102\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\24\24\1\u0103\5\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\23\24\1\u0104\6\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\14\24\1\u0105\15\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\1\u0106\31\24\20\0\1\132\1\133\3\0\1\u0107"+
    "\31\132\20\0\1\132\1\133\3\0\4\132\1\u0108\25\132"+
    "\20\0\1\132\1\133\3\0\15\132\1\u0109\14\132\20\0"+
    "\1\132\1\133\3\0\3\132\1\u010a\12\132\1\u010b\13\132"+
    "\20\0\1\132\1\133\3\0\7\132\1\u010c\22\132\20\0"+
    "\1\132\1\133\3\0\17\132\1\u010d\12\132\1\57\1\133"+
    "\2\57\1\133\13\57\1\u010e\1\133\3\57\1\u010f\31\u010e"+
    "\20\0\1\132\1\133\3\0\5\132\1\u0110\24\132\20\0"+
    "\1\132\1\133\3\0\17\132\1\u0111\12\132\20\0\1\132"+
    "\1\133\3\0\6\132\1\u0112\23\132\20\0\1\132\1\133"+
    "\3\0\23\132\1\u0113\6\132\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\23\24\1\u0114\6\24"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\5\24\1\u0115\24\24\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\4\24\1\u0116\25\24"+
    "\20\0\1\132\1\133\3\0\4\132\1\u0117\25\132\20\0"+
    "\1\132\1\133\3\0\1\u0118\31\132\20\0\1\132\1\133"+
    "\3\0\5\132\1\u0119\24\132\20\0\1\132\1\133\3\0"+
    "\17\132\1\u011a\12\132\20\0\1\132\1\133\3\0\17\132"+
    "\1\u011b\12\132\20\0\1\132\1\133\3\0\1\u011c\31\132"+
    "\20\0\1\132\1\133\3\0\25\132\1\u011d\4\132\1\57"+
    "\4\0\13\57\1\u010e\1\u011e\3\57\32\u010e\1\57\4\0"+
    "\13\57\1\u010e\1\u011e\3\57\6\u010e\1\u011f\23\u010e\20\0"+
    "\1\132\1\133\3\0\1\u0120\31\132\20\0\1\132\1\133"+
    "\3\0\25\132\1\u0121\4\132\20\0\1\132\1\133\3\0"+
    "\11\132\1\u0122\20\132\20\0\1\132\1\133\3\0\5\132"+
    "\1\u0123\24\132\7\0\1\24\3\0\1\24\2\0\3\24"+
    "\1\0\1\24\2\0\23\24\1\u0124\6\24\7\0\1\24"+
    "\3\0\1\24\2\0\3\24\1\0\1\24\2\0\11\24"+
    "\1\u0125\20\24\20\0\1\132\1\133\3\0\5\132\1\u0126"+
    "\24\132\20\0\1\132\1\133\3\0\20\132\1\u0127\11\132"+
    "\20\0\1\132\1\133\3\0\16\132\1\u0128\13\132\20\0"+
    "\1\132\1\133\3\0\16\132\1\u0129\13\132\20\0\1\132"+
    "\1\133\3\0\4\132\1\u012a\25\132\20\0\1\132\1\133"+
    "\3\0\20\132\1\u012b\11\132\20\0\1\132\1\133\3\0"+
    "\24\132\1\u012c\5\132\1\57\4\0\13\57\1\u010e\1\u011e"+
    "\3\57\11\u010e\1\u012d\20\u010e\20\0\1\132\1\133\3\0"+
    "\20\132\1\u012e\11\132\20\0\1\132\1\133\3\0\24\132"+
    "\1\u012f\5\132\20\0\1\132\1\133\3\0\14\132\1\u0130"+
    "\15\132\20\0\1\132\1\133\3\0\1\u0131\31\132\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\22\24\1\u0132\7\24\20\0\1\132\1\133\3\0\20\132"+
    "\1\u0133\11\132\20\0\1\132\1\133\3\0\1\132\1\u0134"+
    "\30\132\20\0\1\132\1\133\3\0\24\132\1\u0135\5\132"+
    "\20\0\1\132\1\133\3\0\4\132\1\u0136\25\132\20\0"+
    "\1\132\1\133\3\0\5\132\1\u0137\24\132\20\0\1\132"+
    "\1\133\3\0\10\132\1\u0138\21\132\20\0\1\132\1\133"+
    "\3\0\20\132\1\u0139\11\132\1\57\4\0\13\57\1\u010e"+
    "\1\u011e\3\57\14\u010e\1\u013a\15\u010e\20\0\1\132\1\133"+
    "\3\0\1\132\1\u013b\30\132\20\0\1\132\1\133\3\0"+
    "\20\132\1\u013c\11\132\20\0\1\132\1\133\3\0\5\132"+
    "\1\u013d\24\132\20\0\1\132\1\133\3\0\23\132\1\u013e"+
    "\6\132\7\0\1\24\3\0\1\24\2\0\3\24\1\0"+
    "\1\24\2\0\5\24\1\u013f\24\24\20\0\1\132\1\133"+
    "\3\0\23\132\1\u013d\6\132\20\0\1\132\1\133\3\0"+
    "\3\132\1\u0140\26\132\20\0\1\132\1\133\3\0\1\132"+
    "\1\u0141\30\132\20\0\1\132\1\133\3\0\11\132\1\u0142"+
    "\20\132\20\0\1\132\1\133\3\0\1\u0143\31\132\20\0"+
    "\1\132\1\133\3\0\1\132\1\u0144\30\132\20\0\1\132"+
    "\1\133\3\0\25\132\1\u0145\4\132\1\57\4\0\13\57"+
    "\1\u010e\1\u011e\3\57\5\u010e\1\u0146\24\u010e\20\0\1\132"+
    "\1\133\3\0\24\132\1\u0147\5\132\20\0\1\132\1\133"+
    "\3\0\25\132\1\u0148\4\132\1\57\1\133\2\57\1\133"+
    "\13\57\1\u010e\1\133\3\57\32\u010e\20\0\1\132\1\133"+
    "\3\0\3\132\1\u0149\26\132\7\0\1\24\3\0\1\24"+
    "\2\0\3\24\1\0\1\24\2\0\3\24\1\u014a\26\24"+
    "\20\0\1\132\1\133\3\0\13\132\1\u014b\16\132\20\0"+
    "\1\132\1\133\3\0\14\132\1\u014c\15\132\20\0\1\132"+
    "\1\133\3\0\24\132\1\u014d\5\132\20\0\1\132\1\133"+
    "\3\0\14\132\1\u014e\15\132\20\0\1\132\1\133\3\0"+
    "\23\132\1\u014f\6\132\20\0\1\132\1\133\3\0\24\132"+
    "\1\u013d\5\132\1\57\1\133\2\57\1\133\13\57\1\u010e"+
    "\1\u011e\3\57\32\u010e\20\0\1\132\1\133\3\0\10\132"+
    "\1\u013d\21\132\20\0\1\132\1\133\3\0\24\132\1\u0150"+
    "\5\132\20\0\1\132\1\133\3\0\17\132\1\u0151\12\132"+
    "\7\0\1\24\3\0\1\24\2\0\3\24\1\0\1\24"+
    "\2\0\24\24\1\u0152\5\24\20\0\1\132\1\133\3\0"+
    "\1\132\1\u0153\30\132\20\0\1\132\1\133\3\0\1\u0154"+
    "\31\132\20\0\1\132\1\133\3\0\11\132\1\u0155\20\132"+
    "\20\0\1\132\1\133\3\0\11\132\1\u0156\20\132\20\0"+
    "\1\132\1\133\3\0\5\132\1\u0157\24\132\20\0\1\132"+
    "\1\133\3\0\1\u0158\31\132\20\0\1\132\1\133\3\0"+
    "\20\132\1\u0130\11\132\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\1\u0159\31\24\20\0\1\132"+
    "\1\133\3\0\7\132\1\u015a\22\132\20\0\1\132\1\133"+
    "\3\0\22\132\1\u015b\7\132\20\0\1\132\1\133\3\0"+
    "\17\132\1\u015c\12\132\20\0\1\132\1\133\3\0\15\132"+
    "\1\u015d\14\132\20\0\1\132\1\133\3\0\1\u015e\31\132"+
    "\20\0\1\132\1\133\3\0\22\132\1\u015f\7\132\7\0"+
    "\1\24\3\0\1\24\2\0\3\24\1\0\1\24\2\0"+
    "\22\24\1\u0160\7\24\20\0\1\132\1\133\3\0\5\132"+
    "\1\u0133\24\132\20\0\1\132\1\133\3\0\5\132\1\u0161"+
    "\24\132\20\0\1\132\1\133\3\0\16\132\1\u0162\13\132"+
    "\20\0\1\132\1\133\3\0\11\132\1\u0145\20\132\20\0"+
    "\1\132\1\133\3\0\24\132\1\u0163\5\132\20\0\1\132"+
    "\1\133\3\0\25\132\1\u0164\4\132\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\4\24\1\u0165"+
    "\25\24\20\0\1\132\1\133\3\0\20\132\1\u0166\11\132"+
    "\20\0\1\132\1\133\3\0\1\132\1\u0167\30\132\20\0"+
    "\1\132\1\133\3\0\10\132\1\u0168\21\132\20\0\1\132"+
    "\1\133\3\0\14\132\1\u0169\15\132\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\5\24\1\u016a"+
    "\24\24\20\0\1\132\1\133\3\0\17\132\1\u016b\12\132"+
    "\20\0\1\132\1\133\3\0\14\132\1\u016c\15\132\20\0"+
    "\1\132\1\133\3\0\22\132\1\u016d\7\132\20\0\1\132"+
    "\1\133\3\0\5\132\1\u016e\24\132\7\0\1\24\3\0"+
    "\1\24\2\0\3\24\1\0\1\24\2\0\20\24\1\u016f"+
    "\11\24\20\0\1\132\1\133\3\0\23\132\1\u0170\6\132"+
    "\20\0\1\132\1\133\3\0\1\u0171\31\132\20\0\1\132"+
    "\1\133\3\0\5\132\1\u0172\24\132\20\0\1\132\1\133"+
    "\3\0\1\u0173\31\132\7\0\1\24\3\0\1\24\2\0"+
    "\3\24\1\0\1\24\2\0\23\24\1\u0174\6\24\20\0"+
    "\1\132\1\133\3\0\11\132\1\u0175\20\132\20\0\1\132"+
    "\1\133\3\0\5\132\1\u0176\24\132\20\0\1\132\1\133"+
    "\3\0\1\132\1\u0177\30\132\20\0\1\132\1\133\3\0"+
    "\1\132\1\u0178\30\132\20\0\1\132\1\133\3\0\24\132"+
    "\1\u0179\5\132\20\0\1\132\1\133\3\0\4\132\1\u017a"+
    "\25\132\20\0\1\132\1\133\3\0\4\132\1\u0133\25\132"+
    "\20\0\1\132\1\133\3\0\24\132\1\u017b\5\132\20\0"+
    "\1\132\1\133\3\0\17\132\1\u017c\12\132\20\0\1\132"+
    "\1\133\3\0\7\132\1\u017d\22\132\20\0\1\132\1\133"+
    "\3\0\24\132\1\u017e\5\132\20\0\1\132\1\133\3\0"+
    "\22\132\1\u017f\7\132\20\0\1\132\1\133\3\0\5\132"+
    "\1\u0180\24\132\20\0\1\132\1\133\3\0\22\132\1\u0133"+
    "\7\132\20\0\1\132\1\133\3\0\30\132\1\u0181\1\132"+
    "\20\0\1\132\1\133\3\0\23\132\1\u0137\6\132\20\0"+
    "\1\132\1\133\3\0\1\u0182\31\132\20\0\1\132\1\133"+
    "\3\0\22\132\1\u0183\7\132\20\0\1\132\1\133\3\0"+
    "\5\132\1\u0184\24\132\20\0\1\132\1\133\3\0\23\132"+
    "\1\u0185\6\132\20\0\1\132\1\133\3\0\17\132\1\u0186"+
    "\12\132\20\0\1\132\1\133\3\0\14\132\1\u0187\15\132"+
    "\20\0\1\132\1\133\3\0\26\132\1\u0188\3\132\20\0"+
    "\1\132\1\133\3\0\5\132\1\u0189\24\132\20\0\1\132"+
    "\1\133\3\0\4\132\1\354\25\132";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16121];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\4\1\2\11\1\1\6\11"+
    "\1\1\1\11\2\1\1\11\22\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\2\11\1\0\1\1\3\0\25\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\0\2\11\3\0"+
    "\24\1\2\11\11\1\2\0\73\1\2\11\311\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BazelqueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(FLAG);  yypushback(1);
            }
          // fall through
          case 62: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 63: break;
          case 3:
            { yybegin(EXPR); yypushback(1);
            }
          // fall through
          case 64: break;
          case 4:
            { return BazelqueryTokenTypes.COMMENT;
            }
          // fall through
          case 65: break;
          case 5:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 66: break;
          case 6:
            { yybegin(WORD_DQ); yypushback(1);
            }
          // fall through
          case 67: break;
          case 7:
            { return BazelqueryTokenTypes.UNQUOTED_WORD;
            }
          // fall through
          case 68: break;
          case 8:
            { yybegin(WORD_SQ); yypushback(1);
            }
          // fall through
          case 69: break;
          case 9:
            { return BazelqueryTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 70: break;
          case 10:
            { return BazelqueryTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 71: break;
          case 11:
            { return BazelqueryTokenTypes.UNION;
            }
          // fall through
          case 72: break;
          case 12:
            { return BazelqueryTokenTypes.COMMA;
            }
          // fall through
          case 73: break;
          case 13:
            { return BazelqueryTokenTypes.EXCEPT;
            }
          // fall through
          case 74: break;
          case 14:
            { return BazelqueryTokenTypes.INTEGER;
            }
          // fall through
          case 75: break;
          case 15:
            { return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 76: break;
          case 16:
            { return BazelqueryTokenTypes.INTERSECT;
            }
          // fall through
          case 77: break;
          case 17:
            { return BazelqueryTokenTypes.DQ_UNFINISHED;
            }
          // fall through
          case 78: break;
          case 18:
            { return BazelqueryTokenTypes.SQ_UNFINISHED;
            }
          // fall through
          case 79: break;
          case 19:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.UNEXPECTED;
            }
          // fall through
          case 80: break;
          case 20:
            { return BazelqueryTokenTypes.UNFINISHED_FLAG;
            }
          // fall through
          case 81: break;
          case 21:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 82: break;
          case 22:
            { yybegin(VALUE_DQ); yypushback(1);
            }
          // fall through
          case 83: break;
          case 23:
            { yybegin(SPACE_NEEDED); return BazelqueryTokenTypes.UNQUOTED_VAL;
            }
          // fall through
          case 84: break;
          case 24:
            { yybegin(VALUE_SQ); yypushback(1);
            }
          // fall through
          case 85: break;
          case 25:
            { yybegin(VALUE); return BazelqueryTokenTypes.EQUALS;
            }
          // fall through
          case 86: break;
          case 26:
            { yybegin(SPACE_NEEDED); return BazelqueryTokenTypes.UNFINISHED_VAL;
            }
          // fall through
          case 87: break;
          case 27:
            { yybegin(YYINITIAL); yypushback(1); return BazelqueryTokenTypes.MISSING_SPACE;
            }
          // fall through
          case 88: break;
          case 28:
            { yybegin(YYINITIAL); return BazelqueryTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 89: break;
          case 29:
            { return BazelqueryTokenTypes.IN;
            }
          // fall through
          case 90: break;
          case 30:
            { yybegin(EXPR); return BazelqueryTokenTypes.DQ_EMPTY;
            }
          // fall through
          case 91: break;
          case 31:
            { yybegin(EXPR); return BazelqueryTokenTypes.SQ_EMPTY;
            }
          // fall through
          case 92: break;
          case 32:
            { yybegin(SPACE_NEEDED); return BazelqueryTokenTypes.FLAG_NO_VAL;
            }
          // fall through
          case 93: break;
          case 33:
            { yybegin(PRE_VALUE); yypushback(1); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 94: break;
          case 34:
            { yybegin(SPACE_NEEDED); return BazelqueryTokenTypes.SQ_VAL;
            }
          // fall through
          case 95: break;
          case 35:
            { yybegin(SPACE_NEEDED); return BazelqueryTokenTypes.DQ_VAL;
            }
          // fall through
          case 96: break;
          case 36:
            { return BazelqueryTokenTypes.LET;
            }
          // fall through
          case 97: break;
          case 37:
            { return BazelqueryTokenTypes.SET;
            }
          // fall through
          case 98: break;
          case 38:
            { yybegin(EXPR); return BazelqueryTokenTypes.DQ_WORD;
            }
          // fall through
          case 99: break;
          case 39:
            { yybegin(EXPR); return BazelqueryTokenTypes.SQ_WORD;
            }
          // fall through
          case 100: break;
          case 40:
            { return BazelqueryTokenTypes.ATTR;
            }
          // fall through
          case 101: break;
          case 41:
            { return BazelqueryTokenTypes.DEPS;
            }
          // fall through
          case 102: break;
          case 42:
            { return BazelqueryTokenTypes.KIND;
            }
          // fall through
          case 103: break;
          case 43:
            { return BazelqueryTokenTypes.SOME;
            }
          // fall through
          case 104: break;
          case 44:
            { return BazelqueryTokenTypes.BAZEL_NO_SPACE;
            }
          // fall through
          case 105: break;
          case 45:
            { return BazelqueryTokenTypes.QUERY_NO_SPACE;
            }
          // fall through
          case 106: break;
          case 46:
            { return BazelqueryTokenTypes.RDEPS;
            }
          // fall through
          case 107: break;
          case 47:
            { return BazelqueryTokenTypes.TESTS;
            }
          // fall through
          case 108: break;
          case 48:
            { return BazelqueryTokenTypes.BAZEL;
            }
          // fall through
          case 109: break;
          case 49:
            { return BazelqueryTokenTypes.QUERY;
            }
          // fall through
          case 110: break;
          case 50:
            { return BazelqueryTokenTypes.FILTER;
            }
          // fall through
          case 111: break;
          case 51:
            { return BazelqueryTokenTypes.LABELS;
            }
          // fall through
          case 112: break;
          case 52:
            { return BazelqueryTokenTypes.VISIBLE;
            }
          // fall through
          case 113: break;
          case 53:
            { return BazelqueryTokenTypes.ALLPATHS;
            }
          // fall through
          case 114: break;
          case 54:
            { return BazelqueryTokenTypes.ALLRDEPS;
            }
          // fall through
          case 115: break;
          case 55:
            { return BazelqueryTokenTypes.SIBLINGS;
            }
          // fall through
          case 116: break;
          case 56:
            { return BazelqueryTokenTypes.SOMEPATH;
            }
          // fall through
          case 117: break;
          case 57:
            { yybegin(PRE_VALUE); return BazelqueryTokenTypes.FLAG;
            }
          // fall through
          case 118: break;
          case 58:
            { return BazelqueryTokenTypes.LOADFILES;
            }
          // fall through
          case 119: break;
          case 59:
            { return BazelqueryTokenTypes.BUILDFILES;
            }
          // fall through
          case 120: break;
          case 60:
            { return BazelqueryTokenTypes.RBUILDFILES;
            }
          // fall through
          case 121: break;
          case 61:
            { return BazelqueryTokenTypes.SAME_PKG_DIRECT_RDEPS;
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
