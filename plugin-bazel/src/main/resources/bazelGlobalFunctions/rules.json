[
  {
    "name": "cc_binary",
    "doc": "\u003cp\u003eIt produces an executable binary.\u003c/p\u003e\n\n\u003cbr/\u003eThe \u003ccode\u003ename\u003c/code\u003e of the target should be the same as the name of the\nsource file that is the main entry point of the application (minus the extension).\nFor example, if your entry point is in \u003ccode\u003emain.cc\u003c/code\u003e, then your name should\nbe \u003ccode\u003emain\u003c/code\u003e.\n\n\u003ch4\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.stripped\u003c/code\u003e (only built if explicitly requested): A stripped\n  version of the binary. \u003ccode\u003estrip -g\u003c/code\u003e is run on the binary to remove debug\n  symbols.  Additional strip options can be provided on the command line using\n  \u003ccode\u003e--stripopt\u003d-foo\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.dwp\u003c/code\u003e (only built if explicitly requested): If\n  Fission is enabled: a debug\n  information package file suitable for debugging remotely deployed binaries. Else: an\n  empty file.\u003c/li\u003e\n\u003c/ul\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of C and C++ files that are processed to create the library target.\nThese are C/C++ source and header files, either non-generated (normal source\ncode) or generated.\n\u003cp\u003eAll \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.c\u003c/code\u003e, and \u003ccode\u003e.cpp\u003c/code\u003e files will\n   be compiled. These might be generated files: if a named file is in\n   the \u003ccode\u003eouts\u003c/code\u003e of some other rule, this \u003ccode\u003ecc_library\u003c/code\u003e\n   will automatically depend on that other rule.\n\u003c/p\u003e\n\u003cp\u003ePure assembler files (.s, .asm) are not preprocessed and are typically built using\nthe assembler. Preprocessed assembly files (.S) are preprocessed and are typically built\nusing the C/C++ compiler.\n\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003e.h\u003c/code\u003e file will not be compiled, but will be available for\n   inclusion by sources in this rule. Both \u003ccode\u003e.cc\u003c/code\u003e and\n   \u003ccode\u003e.h\u003c/code\u003e files can directly include headers listed in\n   these \u003ccode\u003esrcs\u003c/code\u003e or in the \u003ccode\u003ehdrs\u003c/code\u003e of this rule or any\n   rule listed in the \u003ccode\u003edeps\u003c/code\u003e argument.\n\u003c/p\u003e\n\u003cp\u003eAll \u003ccode\u003e#include\u003c/code\u003ed files must be mentioned in the\n   \u003ccode\u003ehdrs\u003c/code\u003e attribute of this or referenced \u003ccode\u003ecc_library\u003c/code\u003e\n   rules, or they should be listed in \u003ccode\u003esrcs\u003c/code\u003e if they are private\n   to this library. See \"Header inclusion checking\" for\n   a more detailed description.\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.so\u003c/code\u003e, \u003ccode\u003e.lo\u003c/code\u003e, and \u003ccode\u003e.a\u003c/code\u003e files are\n   pre-compiled files. Your library might have these as\n   \u003ccode\u003esrcs\u003c/code\u003e if it uses third-party code for which we don\u0027t\n   have source code.\n\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003esrcs\u003c/code\u003e attribute includes the label of another rule,\n   \u003ccode\u003ecc_library\u003c/code\u003e will use the output files of that rule as source files to\n   compile. This is useful for one-off generation of source code (for more than occasional\n   use, it\u0027s better to implement a Starlark rule class and use the \u003ccode\u003ecc_common\u003c/code\u003e\n   API)\n\u003c/p\u003e\n\u003cp\u003e\n  Permitted \u003ccode\u003esrcs\u003c/code\u003e file types:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eC and C++ source files: \u003ccode\u003e.c\u003c/code\u003e, \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.cpp\u003c/code\u003e,\n  \u003ccode\u003e.cxx\u003c/code\u003e, \u003ccode\u003e.c++\u003c/code\u003e, \u003ccode\u003e.C\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC and C++ header files: \u003ccode\u003e.h\u003c/code\u003e, \u003ccode\u003e.hh\u003c/code\u003e, \u003ccode\u003e.hpp\u003c/code\u003e,\n  \u003ccode\u003e.hxx\u003c/code\u003e, \u003ccode\u003e.inc\u003c/code\u003e, \u003ccode\u003e.inl\u003c/code\u003e, \u003ccode\u003e.H\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAssembler with C preprocessor: \u003ccode\u003e.S\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eArchive: \u003ccode\u003e.a\u003c/code\u003e, \u003ccode\u003e.pic.a\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\"Always link\" library: \u003ccode\u003e.lo\u003c/code\u003e, \u003ccode\u003e.pic.lo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eShared library, versioned or unversioned: \u003ccode\u003e.so\u003c/code\u003e,\n  \u003ccode\u003e.so.\u003ci\u003eversion\u003c/i\u003e\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eObject file: \u003ccode\u003e.o\u003c/code\u003e, \u003ccode\u003e.pic.o\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  ... and any rules that produce those files (e.g. \u003ccode\u003ecc_embed_data\u003c/code\u003e).\n  Different extensions denote different programming languages in\n  accordance with gcc convention.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_interfaces",
        "doc": "The list of files are regarded as C++20 Modules Interface.\n\n\u003cp\u003e\nC++ Standard has no restriction about module interface file extension\n\u003cul\u003e\n\u003cli\u003eClang use cppm \u003c/li\u003e\n\u003cli\u003eGCC can use any source file extension \u003c/li\u003e\n\u003cli\u003eMSVC use ixx \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003eThe use is guarded by the flag\n\u003ccode\u003e--experimental_cpp_modules\u003c/code\u003e.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\n\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is the name of a generated file, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on the generating\n   rule.\n\u003c/p\u003e\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is a rule name, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on that rule,\n   and that rule\u0027s \u003ccode\u003eouts\u003c/code\u003e are automatically added to\n   this \u003ccode\u003ecc_library\u003c/code\u003e\u0027s data files.\n\u003c/p\u003e\n\u003cp\u003eYour C++ code can access these data files like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\n  const std::string path \u003d devtools_build::GetDataDependencyFilepath(\n      \"my/test/data/file\");\n\u003c/code\u003e\u003c/pre\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of include dirs to be added to the compile line.\nSubject to \"Make variable\" substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n\u003ccode\u003e-isystem path_to_package/include_entry\u003c/code\u003e.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to COPTS instead.\n\u003cp\u003e\nThe added \u003ccode\u003einclude\u003c/code\u003e paths will include generated files as well as\nfiles in the source tree.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n\u003ccode\u003elocal_defines\u003c/code\u003e instead.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "local_defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line for this target,\nbut not to its dependents.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "Add these options to the C/C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003e\n  Each string in this attribute is added in the given order to \u003ccode\u003eCOPTS\u003c/code\u003e before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of \u003ccode\u003ethird_party\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  If the package declares the feature\n  \u003ccode\u003eno_copts_tokenization\u003c/code\u003e, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "conlyopts",
        "doc": "Add these options to the C compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "Add these options to the C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs_check",
        "doc": "Deprecated, no-op.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "additional_linker_inputs",
        "doc": "Pass these files to the C++ linker command.\n\u003cp\u003e\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "win_def_file",
        "doc": "The Windows DEF file to be passed to linker.\n\u003cp\u003eThis attribute should only be used when Windows is the target platform.\nIt can be used to \nexport symbols during linking a shared library.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries to be linked in to the binary target.\n\u003cp\u003eThese can be \u003ccode\u003ecc_library\u003c/code\u003e or \u003ccode\u003eobjc_library\u003c/code\u003e\ntargets.\u003c/p\u003e\n\nIt is also allowed to\nput linker scripts (.lds) into deps, and reference them in\nlinkopts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "reexport_deps",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkopts",
        "doc": "Add these flags to the C++ linker command.\nSubject to \"Make\" variable substitution,\n\nBourne shell tokenization and\nlabel expansion.\nEach string in this attribute is added to \u003ccode\u003eLINKOPTS\u003c/code\u003e before\nlinking the binary target.\n\u003cp\u003e\n    Each element of this list that does not start with \u003ccode\u003e$\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e is\n    assumed to be the label of a target in \u003ccode\u003edeps\u003c/code\u003e. The\n    list of files generated by that target is appended to the linker\n    options.  An error is reported if the label is invalid, or is\n    not declared in \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "nocopts",
        "doc": "Remove matching options from the C++ compilation command.\nSubject to \"Make\" variable substitution.\nThe value of this attribute is interpreted as a regular expression.\nAny preexisting \u003ccode\u003eCOPTS\u003c/code\u003e that match this regular expression\n(including values explicitly specified in the rule\u0027s copts attribute)\nwill be removed from \u003ccode\u003eCOPTS\u003c/code\u003e for purposes of compiling this rule.\nThis attribute should not be needed or used\noutside of \u003ccode\u003ethird_party\u003c/code\u003e.  The values are not preprocessed\nin any way other than the \"Make\" variable substitution.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkstatic",
        "doc": "For \u003ccode\u003ecc_binary\u003c/code\u003e and\n\u003ccode\u003ecc_test\u003c/code\u003e: link the binary in static\nmode. For \u003ccode\u003ecc_library.link_static\u003c/code\u003e: see below.\n\u003cp\u003eBy default this option is on for \u003ccode\u003ecc_binary\u003c/code\u003e and off for the rest.\u003c/p\u003e\n\u003cp\u003e\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  \u003ccode\u003e.a\u003c/code\u003e\u0027s instead of \u003ccode\u003e.so\u003c/code\u003e\u0027s for user libraries whenever possible.\n  System libraries such as libc (but \u003ci\u003enot\u003c/i\u003e the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only \u003ci\u003emostly\u003c/i\u003e static.\n\u003c/p\u003e\n\u003cp\u003e\nThere are really three different ways to link an executable:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"\u003ccode\u003egcc -static foo.o libbar.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003efully_static_link\u003c/code\u003e in the\n  \u003ccode\u003efeatures\u003c/code\u003e attribute.\u003c/li\u003e\n\u003cli\u003e STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"\u003ccode\u003egcc foo.o libfoo.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"\u003ccode\u003egcc foo.o libfoo.so libbaz.so -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf the \u003ccode\u003elinkstatic\u003c/code\u003e attribute or \u003ccode\u003efully_static_link\u003c/code\u003e in\n\u003ccode\u003efeatures\u003c/code\u003e is used outside of \u003ccode\u003e//third_party\u003c/code\u003e\nplease include a comment near the rule to explain why.\n\u003c/p\u003e\n\u003cp\u003e\nThe \u003ccode\u003elinkstatic\u003c/code\u003e attribute has a different meaning if used on a\n\u003ccode\u003ecc_library()\u003c/code\u003e rule.\nFor a C++ library, \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e indicates that only\nstatic linking is allowed, so no \u003ccode\u003e.so\u003c/code\u003e will be produced. linkstatic\u003dFalse does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n\u003c/p\u003e\n\u003cp\u003e\nThere should be very little code built with \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e in production.\nIf \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e, then the build tool will create symlinks to\ndepended-upon shared libraries in the \u003ccode\u003e*.runfiles\u003c/code\u003e area.\n\u003c/p\u003e",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "malloc",
        "doc": "Override the default dependency on malloc.\n\u003cp\u003e\n  By default, C++ binaries are linked against \u003ccode\u003e//tools/cpp:malloc\u003c/code\u003e,\n  which is an empty library so the binary ends up using libc malloc.\n  This label must refer to a \u003ccode\u003ecc_library\u003c/code\u003e. If compilation is for a non-C++\n  rule, this option has no effect. The value of this attribute is ignored if\n  \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e is specified.\n\u003c/p\u003e",
        "defaultValue": "\"@bazel_tools//tools/cpp:malloc\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "link_extra_lib",
        "doc": "Control linking of extra libraries.\n\u003cp\u003e\n    By default, C++ binaries are linked against \u003ccode\u003e//tools/cpp:link_extra_lib\u003c/code\u003e,\n    which by default depends on the label flag \u003ccode\u003e//tools/cpp:link_extra_libs\u003c/code\u003e.\n    Without setting the flag, this library is empty by default. Setting the label flag\n    allows linking optional dependencies, such as overrides for weak symbols, interceptors\n    for shared library functions, or special runtime libraries (for malloc replacements,\n    prefer \u003ccode\u003emalloc\u003c/code\u003e or \u003ccode\u003e--custom_malloc\u003c/code\u003e). Setting this attribute to\n    \u003ccode\u003eNone\u003c/code\u003e disables this behaviour.\n\u003c/p\u003e",
        "defaultValue": "\"@bazel_tools//tools/cpp:link_extra_lib\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "defaultValue": "-1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkshared",
        "doc": "Create a shared library.\nTo enable this attribute, include \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e in your rule. By default\nthis option is off.\n\u003cp\u003e\n  The presence of this flag means that linking occurs with the \u003ccode\u003e-shared\u003c/code\u003e flag\n  to \u003ccode\u003egcc\u003c/code\u003e, and the resulting shared library is suitable for loading into for\n  example a Java program. However, for build purposes it will never be linked into the\n  dependent binary, as it is assumed that shared libraries built with a\n  cc_binary rule are only loaded manually by other programs, so\n  it should not be considered a substitute for the cc_library\n  rule. For sake of scalability we recommend avoiding this approach altogether and\n  simply letting \u003ccode\u003ejava_library\u003c/code\u003e depend on \u003ccode\u003ecc_library\u003c/code\u003e rules\n  instead.\n\u003c/p\u003e\n\u003cp\u003e\n  If you specify both \u003ccode\u003elinkopts\u003d[\u0027-static\u0027]\u003c/code\u003e and \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e,\n  you get a single completely self-contained unit. If you specify both\n  \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e and \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e, you get a single, mostly\n  self-contained unit.\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "distribs",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "dynamic_deps",
        "doc": "These are other \u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies the current target depends on.\n\n\u003cp\u003e\nThe \u003ccode\u003ecc_shared_library\u003c/code\u003e implementation will use the list of\n\u003ccode\u003edynamic_deps\u003c/code\u003e (transitively, i.e. also the \u003ccode\u003edynamic_deps\u003c/code\u003e of the\ncurrent target\u0027s \u003ccode\u003edynamic_deps\u003c/code\u003e) to decide which \u003ccode\u003ecc_libraries\u003c/code\u003e in\nthe transitive \u003ccode\u003edeps\u003c/code\u003e should not be linked in because they are already provided\nby a different \u003ccode\u003ecc_shared_library\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_import",
    "doc": "\u003cp\u003e\n\u003ccode\u003ecc_import\u003c/code\u003e rules allows users to import precompiled C/C++ libraries.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe following are the typical use cases: \u003cbr/\u003e\n\n1. Linking a static library\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  static_library \u003d \"libmylib.a\",\n  # If alwayslink is turned on,\n  # libmylib.a will be forcely linked into any binary that depends on it.\n  # alwayslink \u003d 1,\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n2. Linking a shared library (Unix)\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  shared_library \u003d \"libmylib.so\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n3. Linking a shared library with interface library\n\n\u003cp\u003eOn Unix:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  # libmylib.ifso is an interface library for libmylib.so which will be passed to linker\n  interface_library \u003d \"libmylib.ifso\",\n  # libmylib.so will be available for runtime\n  shared_library \u003d \"libmylib.so\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOn Windows:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library \u003d \"mylib.lib\",\n  # mylib.dll will be available for runtime\n  shared_library \u003d \"mylib.dll\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n4. Linking a shared library with \u003ccode\u003esystem_provided\u003dTrue\u003c/code\u003e\n\n\u003cp\u003eOn Unix:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  interface_library \u003d \"libmylib.ifso\", # Or we can also use libmylib.so as its own interface library\n  # libmylib.so is provided by system environment, for example it can be found in LD_LIBRARY_PATH.\n  # This indicates that Bazel is not responsible for making libmylib.so available.\n  system_provided \u003d 1,\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOn Windows:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library \u003d \"mylib.lib\",\n  # mylib.dll is provided by system environment, for example it can be found in PATH.\n  # This indicates that Bazel is not responsible for making mylib.dll available.\n  system_provided \u003d 1,\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n5. Linking to static or shared library\n\n\u003cp\u003eOn Unix:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  static_library \u003d \"libmylib.a\",\n  shared_library \u003d \"libmylib.so\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOn Windows:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"mylib\",\n  hdrs \u003d [\"mylib.h\"],\n  static_library \u003d \"libmylib.lib\", # A normal static library\n  interface_library \u003d \"mylib.lib\", # An import library for mylib.dll\n  shared_library \u003d \"mylib.dll\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe remaining is the same on Unix and Windows:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\n# first will link to libmylib.a (or libmylib.lib)\ncc_binary(\n  name \u003d \"first\",\n  srcs \u003d [\"first.cc\"],\n  deps \u003d [\":mylib\"],\n  linkstatic \u003d 1, # default value\n)\n\n# second will link to libmylib.so (or libmylib.lib)\ncc_binary(\n  name \u003d \"second\",\n  srcs \u003d [\"second.cc\"],\n  deps \u003d [\":mylib\"],\n  linkstatic \u003d 0,\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n\u003ccode\u003ecc_import\u003c/code\u003e supports an include attribute. For example:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_import(\n  name \u003d \"curl_lib\",\n  hdrs \u003d glob([\"vendor/curl/include/curl/*.h\"]),\n  includes \u003d [\"vendor/curl/include\"],\n  shared_library \u003d \"vendor/curl/lib/.libs/libcurl.dylib\",\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "hdrs",
        "doc": "The list of header files published by\nthis precompiled library to be directly included by sources in dependent rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "static_library",
        "doc": "A single precompiled static library.\n\u003cp\u003e Permitted file types:\n  \u003ccode\u003e.a\u003c/code\u003e,\n  \u003ccode\u003e.pic.a\u003c/code\u003e\n  or \u003ccode\u003e.lib\u003c/code\u003e\n\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pic_static_library",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "shared_library",
        "doc": "A single precompiled shared library. Bazel ensures it is available to the\nbinary that depends on it during runtime.\n\u003cp\u003e Permitted file types:\n  \u003ccode\u003e.so\u003c/code\u003e,\n  \u003ccode\u003e.dll\u003c/code\u003e\n  or \u003ccode\u003e.dylib\u003c/code\u003e\n\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interface_library",
        "doc": "A single interface library for linking the shared library.\n\u003cp\u003e Permitted file types:\n  \u003ccode\u003e.ifso\u003c/code\u003e,\n  \u003ccode\u003e.tbd\u003c/code\u003e,\n  \u003ccode\u003e.lib\u003c/code\u003e,\n  \u003ccode\u003e.so\u003c/code\u003e\n  or \u003ccode\u003e.dylib\u003c/code\u003e\n\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pic_objects",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "objects",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "system_provided",
        "doc": "If 1, it indicates the shared library required at runtime is provided by the system. In\nthis case, \u003ccode\u003einterface_library\u003c/code\u003e should be specified and\n\u003ccode\u003eshared_library\u003c/code\u003e should be empty.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "alwayslink",
        "doc": "If 1, any binary that depends (directly or indirectly) on this C++\nprecompiled library will link in all the object files archived in the static library,\neven if some contain no symbols referenced by the binary.\nThis is useful if your code isn\u0027t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.\n\n\u003cp\u003eIf alwayslink doesn\u0027t work with VS 2017 on Windows, that is due to a\nknown issue,\nplease upgrade your VS 2017 to the latest version.\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkopts",
        "doc": "Add these flags to the C++ linker command.\nSubject to \"Make\" variable substitution,\n\nBourne shell tokenization and\nlabel expansion.\nEach string in this attribute is added to \u003ccode\u003eLINKOPTS\u003c/code\u003e before\nlinking the binary target.\n\u003cp\u003e\n  Each element of this list that does not start with \u003ccode\u003e$\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e is\n  assumed to be the label of a target in \u003ccode\u003edeps\u003c/code\u003e. The\n  list of files generated by that target is appended to the linker\n  options.  An error is reported if the label is invalid, or is\n  not declared in \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of include dirs to be added to the compile line.\nSubject to \"Make variable\" substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n\u003ccode\u003e-isystem path_to_package/include_entry\u003c/code\u003e.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to COPTS instead.\n\u003cp\u003e\nThe default \u003ccode\u003einclude\u003c/code\u003e path doesn\u0027t include generated\nfiles. If you need to \u003ccode\u003e#include\u003c/code\u003e a generated header\nfile, list it in the \u003ccode\u003esrcs\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "strip_include_prefix",
        "doc": "The prefix to strip from the paths of the headers of this rule.\n\n\u003cp\u003eWhen set, the headers in the \u003ccode\u003ehdrs\u003c/code\u003e attribute of this rule are accessible\nat their path with this prefix cut off.\n\n\u003cp\u003eIf it\u0027s a relative path, it\u0027s taken as a package-relative one. If it\u0027s an absolute one,\nit\u0027s understood as a repository-relative path.\n\n\u003cp\u003eThe prefix in the \u003ccode\u003einclude_prefix\u003c/code\u003e attribute is added after this prefix is\nstripped.\n\n\u003cp\u003eThis attribute is only legal under \u003ccode\u003ethird_party\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries that the target depends upon.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_library",
    "doc": "\u003cp\u003eUse \u003ccode\u003ecc_library()\u003c/code\u003e for C++-compiled libraries.\n  The result is  either a \u003ccode\u003e.so\u003c/code\u003e, \u003ccode\u003e.lo\u003c/code\u003e,\n  or \u003ccode\u003e.a\u003c/code\u003e, depending on what is needed.\n\u003c/p\u003e\n\n\u003cp\u003e\n  If you build something with static linking that depends on\n  a \u003ccode\u003ecc_library\u003c/code\u003e, the output of a depended-on library rule\n  is the \u003ccode\u003e.a\u003c/code\u003e file. If you specify\n   \u003ccode\u003ealwayslink\u003dTrue\u003c/code\u003e, you get the \u003ccode\u003e.lo\u003c/code\u003e file.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The actual output file name is \u003ccode\u003elib\u003ci\u003efoo\u003c/i\u003e.so\u003c/code\u003e for\n  the shared library, where \u003ci\u003efoo\u003c/i\u003e is the name of the rule.  The\n  other kinds of libraries end with \u003ccode\u003e.lo\u003c/code\u003e and \u003ccode\u003e.a\u003c/code\u003e,\n  respectively.  If you need a specific shared library name, for\n  example, to define a Python module, use a genrule to copy the library\n  to the desired name.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"hdrs\"\u003eHeader inclusion checking\u003c/h4\u003e\n\n\u003cp\u003e\n  All header files that are used in the build must be declared in\n  the \u003ccode\u003ehdrs\u003c/code\u003e or \u003ccode\u003esrcs\u003c/code\u003e of \u003ccode\u003ecc_*\u003c/code\u003e rules.\n  This is enforced.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For \u003ccode\u003ecc_library\u003c/code\u003e rules, headers in \u003ccode\u003ehdrs\u003c/code\u003e comprise the\n  public interface of the library and can be directly included both\n  from the files in \u003ccode\u003ehdrs\u003c/code\u003e and \u003ccode\u003esrcs\u003c/code\u003e of the library\n  itself as well as from files in \u003ccode\u003ehdrs\u003c/code\u003e and \u003ccode\u003esrcs\u003c/code\u003e\n  of \u003ccode\u003ecc_*\u003c/code\u003e rules that list the library in their \u003ccode\u003edeps\u003c/code\u003e.\n  Headers in \u003ccode\u003esrcs\u003c/code\u003e must only be directly included from the files\n  in \u003ccode\u003ehdrs\u003c/code\u003e and \u003ccode\u003esrcs\u003c/code\u003e of the library itself. When\n  deciding whether to put a header into \u003ccode\u003ehdrs\u003c/code\u003e or \u003ccode\u003esrcs\u003c/code\u003e,\n  you should ask whether you want consumers of this library to be able to\n  directly include it. This is roughly the same decision as\n  between \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003eprivate\u003c/code\u003e visibility in programming languages.\n\u003c/p\u003e\n\n\u003cp\u003e\n  \u003ccode\u003ecc_binary\u003c/code\u003e and \u003ccode\u003ecc_test\u003c/code\u003e rules do not have an exported\n  interface, so they also do not have a \u003ccode\u003ehdrs\u003c/code\u003e attribute. All headers\n  that belong to the binary or test directly should be listed in\n  the \u003ccode\u003esrcs\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  To illustrate these rules, look at the following example.\n\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_binary(\n    name \u003d \"foo\",\n    srcs \u003d [\n        \"foo.cc\",\n        \"foo.h\",\n    ],\n    deps \u003d [\":bar\"],\n)\n\ncc_library(\n    name \u003d \"bar\",\n    srcs \u003d [\n        \"bar.cc\",\n        \"bar-impl.h\",\n    ],\n    hdrs \u003d [\"bar.h\"],\n    deps \u003d [\":baz\"],\n)\n\ncc_library(\n    name \u003d \"baz\",\n    srcs \u003d [\n        \"baz.cc\",\n        \"baz-impl.h\",\n    ],\n    hdrs \u003d [\"baz.h\"],\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  The allowed direct inclusions in this example are listed in the table below.\n  For example \u003ccode\u003efoo.cc\u003c/code\u003e is allowed to directly\n  include \u003ccode\u003efoo.h\u003c/code\u003e and \u003ccode\u003ebar.h\u003c/code\u003e, but not \u003ccode\u003ebaz.h\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003ctable class\u003d\"table table-striped table-bordered table-condensed\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\u003cth\u003eIncluding file\u003c/th\u003e\u003cth\u003eAllowed inclusions\u003c/th\u003e\u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\u003ctd\u003efoo.h\u003c/td\u003e\u003ctd\u003ebar.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003efoo.cc\u003c/td\u003e\u003ctd\u003efoo.h bar.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebar.h\u003c/td\u003e\u003ctd\u003ebar-impl.h baz.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebar-impl.h\u003c/td\u003e\u003ctd\u003ebar.h baz.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebar.cc\u003c/td\u003e\u003ctd\u003ebar.h bar-impl.h baz.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebaz.h\u003c/td\u003e\u003ctd\u003ebaz-impl.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebaz-impl.h\u003c/td\u003e\u003ctd\u003ebaz.h\u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003ebaz.cc\u003c/td\u003e\u003ctd\u003ebaz.h baz-impl.h\u003c/td\u003e\u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\n  The inclusion checking rules only apply to \u003cem\u003edirect\u003c/em\u003e\n  inclusions. In the example above \u003ccode\u003efoo.cc\u003c/code\u003e is allowed to\n  include \u003ccode\u003ebar.h\u003c/code\u003e, which may include \u003ccode\u003ebaz.h\u003c/code\u003e, which in\n  turn is allowed to include \u003ccode\u003ebaz-impl.h\u003c/code\u003e. Technically, the\n  compilation of a \u003ccode\u003e.cc\u003c/code\u003e file may transitively include any header\n  file in the \u003ccode\u003ehdrs\u003c/code\u003e or \u003ccode\u003esrcs\u003c/code\u003e in\n  any \u003ccode\u003ecc_library\u003c/code\u003e in the transitive \u003ccode\u003edeps\u003c/code\u003e closure. In\n  this case the compiler may read \u003ccode\u003ebaz.h\u003c/code\u003e and \u003ccode\u003ebaz-impl.h\u003c/code\u003e\n  when compiling \u003ccode\u003efoo.cc\u003c/code\u003e, but \u003ccode\u003efoo.cc\u003c/code\u003e must not\n  contain \u003ccode\u003e#include \"baz.h\"\u003c/code\u003e. For that to be\n  allowed, \u003ccode\u003ebaz\u003c/code\u003e must be added to the \u003ccode\u003edeps\u003c/code\u003e\n  of \u003ccode\u003efoo\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Bazel depends on toolchain support to enforce the inclusion checking rules.\n  The \u003ccode\u003elayering_check\u003c/code\u003e feature has to be supported by the toolchain\n  and requested explicitly, for example via the\n  \u003ccode\u003e--features\u003dlayering_check\u003c/code\u003e command-line flag or the\n  \u003ccode\u003efeatures\u003c/code\u003e parameter of the\n  \u003ccode\u003epackage\u003c/code\u003e function. The toolchains\n  provided by Bazel only support this feature with clang on Unix and macOS.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"cc_library_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cp id\u003d\"alwayslink_lib_example\"\u003e\n   We use the \u003ccode\u003ealwayslink\u003c/code\u003e flag to force the linker to link in\n   this code although the main binary code doesn\u0027t reference it.\n\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_library(\n    name \u003d \"ast_inspector_lib\",\n    srcs \u003d [\"ast_inspector_lib.cc\"],\n    hdrs \u003d [\"ast_inspector_lib.h\"],\n    visibility \u003d [\"//visibility:public\"],\n    deps \u003d [\"//third_party/llvm/llvm/tools/clang:frontend\"],\n    # alwayslink as we want to be able to call things in this library at\n    # debug time, even if they aren\u0027t used anywhere in the code.\n    alwayslink \u003d 1,\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cp\u003eThe following example comes from\n   \u003ccode\u003ethird_party/python2_4_3/BUILD\u003c/code\u003e.\n   Some of the code uses the \u003ccode\u003edl\u003c/code\u003e library (to load\n   another, dynamic library), so this\n   rule specifies the \u003ccode\u003e-ldl\u003c/code\u003e link option to link the\n   \u003ccode\u003edl\u003c/code\u003e library.\n\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_library(\n    name \u003d \"python2_4_3\",\n    linkopts \u003d [\n        \"-ldl\",\n        \"-lutil\",\n    ],\n    deps \u003d [\"//third_party/expat\"],\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe following example comes from \u003ccode\u003ethird_party/kde/BUILD\u003c/code\u003e.\n   We keep pre-built \u003ccode\u003e.so\u003c/code\u003e files in the depot.\n   The header files live in a subdirectory named \u003ccode\u003einclude\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_library(\n    name \u003d \"kde\",\n    srcs \u003d [\n        \"lib/libDCOP.so\",\n        \"lib/libkdesu.so\",\n        \"lib/libkhtml.so\",\n        \"lib/libkparts.so\",\n        \u003cvar\u003e...more .so files...\u003c/var\u003e,\n    ],\n    includes \u003d [\"include\"],\n    deps \u003d [\"//third_party/X11\"],\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe following example comes from \u003ccode\u003ethird_party/gles/BUILD\u003c/code\u003e.\n   Third-party code often needs some \u003ccode\u003edefines\u003c/code\u003e and\n   \u003ccode\u003elinkopts\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_library(\n    name \u003d \"gles\",\n    srcs \u003d [\n        \"GLES/egl.h\",\n        \"GLES/gl.h\",\n        \"ddx.c\",\n        \"egl.c\",\n    ],\n    defines \u003d [\n        \"USE_FLOAT\",\n        \"__GL_FLOAT\",\n        \"__GL_COMMON\",\n    ],\n    linkopts \u003d [\"-ldl\"],  # uses dlopen(), dl library\n    deps \u003d [\n        \"es\",\n        \"//third_party/X11\",\n    ],\n)\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of C and C++ files that are processed to create the library target.\nThese are C/C++ source and header files, either non-generated (normal source\ncode) or generated.\n\u003cp\u003eAll \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.c\u003c/code\u003e, and \u003ccode\u003e.cpp\u003c/code\u003e files will\n   be compiled. These might be generated files: if a named file is in\n   the \u003ccode\u003eouts\u003c/code\u003e of some other rule, this \u003ccode\u003ecc_library\u003c/code\u003e\n   will automatically depend on that other rule.\n\u003c/p\u003e\n\u003cp\u003ePure assembler files (.s, .asm) are not preprocessed and are typically built using\nthe assembler. Preprocessed assembly files (.S) are preprocessed and are typically built\nusing the C/C++ compiler.\n\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003e.h\u003c/code\u003e file will not be compiled, but will be available for\n   inclusion by sources in this rule. Both \u003ccode\u003e.cc\u003c/code\u003e and\n   \u003ccode\u003e.h\u003c/code\u003e files can directly include headers listed in\n   these \u003ccode\u003esrcs\u003c/code\u003e or in the \u003ccode\u003ehdrs\u003c/code\u003e of this rule or any\n   rule listed in the \u003ccode\u003edeps\u003c/code\u003e argument.\n\u003c/p\u003e\n\u003cp\u003eAll \u003ccode\u003e#include\u003c/code\u003ed files must be mentioned in the\n   \u003ccode\u003ehdrs\u003c/code\u003e attribute of this or referenced \u003ccode\u003ecc_library\u003c/code\u003e\n   rules, or they should be listed in \u003ccode\u003esrcs\u003c/code\u003e if they are private\n   to this library. See \"Header inclusion checking\" for\n   a more detailed description.\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.so\u003c/code\u003e, \u003ccode\u003e.lo\u003c/code\u003e, and \u003ccode\u003e.a\u003c/code\u003e files are\n   pre-compiled files. Your library might have these as\n   \u003ccode\u003esrcs\u003c/code\u003e if it uses third-party code for which we don\u0027t\n   have source code.\n\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003esrcs\u003c/code\u003e attribute includes the label of another rule,\n   \u003ccode\u003ecc_library\u003c/code\u003e will use the output files of that rule as source files to\n   compile. This is useful for one-off generation of source code (for more than occasional\n   use, it\u0027s better to implement a Starlark rule class and use the \u003ccode\u003ecc_common\u003c/code\u003e\n   API)\n\u003c/p\u003e\n\u003cp\u003e\n  Permitted \u003ccode\u003esrcs\u003c/code\u003e file types:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eC and C++ source files: \u003ccode\u003e.c\u003c/code\u003e, \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.cpp\u003c/code\u003e,\n  \u003ccode\u003e.cxx\u003c/code\u003e, \u003ccode\u003e.c++\u003c/code\u003e, \u003ccode\u003e.C\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC and C++ header files: \u003ccode\u003e.h\u003c/code\u003e, \u003ccode\u003e.hh\u003c/code\u003e, \u003ccode\u003e.hpp\u003c/code\u003e,\n  \u003ccode\u003e.hxx\u003c/code\u003e, \u003ccode\u003e.inc\u003c/code\u003e, \u003ccode\u003e.inl\u003c/code\u003e, \u003ccode\u003e.H\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAssembler with C preprocessor: \u003ccode\u003e.S\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eArchive: \u003ccode\u003e.a\u003c/code\u003e, \u003ccode\u003e.pic.a\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\"Always link\" library: \u003ccode\u003e.lo\u003c/code\u003e, \u003ccode\u003e.pic.lo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eShared library, versioned or unversioned: \u003ccode\u003e.so\u003c/code\u003e,\n  \u003ccode\u003e.so.\u003ci\u003eversion\u003c/i\u003e\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eObject file: \u003ccode\u003e.o\u003c/code\u003e, \u003ccode\u003e.pic.o\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  ... and any rules that produce those files (e.g. \u003ccode\u003ecc_embed_data\u003c/code\u003e).\n  Different extensions denote different programming languages in\n  accordance with gcc convention.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_interfaces",
        "doc": "The list of files are regarded as C++20 Modules Interface.\n\n\u003cp\u003e\nC++ Standard has no restriction about module interface file extension\n\u003cul\u003e\n\u003cli\u003eClang use cppm \u003c/li\u003e\n\u003cli\u003eGCC can use any source file extension \u003c/li\u003e\n\u003cli\u003eMSVC use ixx \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003eThe use is guarded by the flag\n\u003ccode\u003e--experimental_cpp_modules\u003c/code\u003e.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\n\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is the name of a generated file, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on the generating\n   rule.\n\u003c/p\u003e\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is a rule name, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on that rule,\n   and that rule\u0027s \u003ccode\u003eouts\u003c/code\u003e are automatically added to\n   this \u003ccode\u003ecc_library\u003c/code\u003e\u0027s data files.\n\u003c/p\u003e\n\u003cp\u003eYour C++ code can access these data files like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\n  const std::string path \u003d devtools_build::GetDataDependencyFilepath(\n      \"my/test/data/file\");\n\u003c/code\u003e\u003c/pre\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of include dirs to be added to the compile line.\nSubject to \"Make variable\" substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n\u003ccode\u003e-isystem path_to_package/include_entry\u003c/code\u003e.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to COPTS instead.\n\u003cp\u003e\nThe added \u003ccode\u003einclude\u003c/code\u003e paths will include generated files as well as\nfiles in the source tree.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n\u003ccode\u003elocal_defines\u003c/code\u003e instead.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "local_defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line for this target,\nbut not to its dependents.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "Add these options to the C/C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003e\n  Each string in this attribute is added in the given order to \u003ccode\u003eCOPTS\u003c/code\u003e before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of \u003ccode\u003ethird_party\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  If the package declares the feature\n  \u003ccode\u003eno_copts_tokenization\u003c/code\u003e, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "conlyopts",
        "doc": "Add these options to the C compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "Add these options to the C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs_check",
        "doc": "Deprecated, no-op.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "additional_linker_inputs",
        "doc": "Pass these files to the C++ linker command.\n\u003cp\u003e\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "win_def_file",
        "doc": "The Windows DEF file to be passed to linker.\n\u003cp\u003eThis attribute should only be used when Windows is the target platform.\nIt can be used to \nexport symbols during linking a shared library.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs",
        "doc": "The list of header files published by\nthis library to be directly included by sources in dependent rules.\n\u003cp\u003eThis is the strongly preferred location for declaring header files that\n describe the interface for the library. These headers will be made\n available for inclusion by sources in this rule or in dependent rules.\n Headers not meant to be included by a client of this library should be\n listed in the \u003ccode\u003esrcs\u003c/code\u003e attribute instead, even if they are\n included by a published header. See \"Header inclusion\n checking\" for a more detailed description. \u003c/p\u003e\n\u003cp\u003ePermitted \u003ccode\u003eheaders\u003c/code\u003e file types:\n  \u003ccode\u003e.h\u003c/code\u003e,\n  \u003ccode\u003e.hh\u003c/code\u003e,\n  \u003ccode\u003e.hpp\u003c/code\u003e,\n  \u003ccode\u003e.hxx\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "textual_hdrs",
        "doc": "The list of header files published by\nthis library to be textually included by sources in dependent rules.\n\u003cp\u003eThis is the location for declaring header files that cannot be compiled on their own;\n that is, they always need to be textually included by other source files to build valid\n code.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries that the library target depends upon.\n\n\u003cp\u003eThese can be \u003ccode\u003ecc_library\u003c/code\u003e or \u003ccode\u003eobjc_library\u003c/code\u003e targets.\u003c/p\u003e\n\n\u003cp\u003eSee general comments about \u003ccode\u003edeps\u003c/code\u003e\n  at Typical attributes defined by\n  most build rules.\n\u003c/p\u003e\n\u003cp\u003eThese should be names of C++ library rules.\n   When you build a binary that links this rule\u0027s library,\n   you will also link the libraries in \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eDespite the \"deps\" name, not all of this library\u0027s clients\n   belong here.  Run-time data dependencies belong in \u003ccode\u003edata\u003c/code\u003e.\n   Source files generated by other rules belong in \u003ccode\u003esrcs\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eTo link in a pre-compiled third-party library, add its name to\n   the \u003ccode\u003esrcs\u003c/code\u003e instead.\n\u003c/p\u003e\n\u003cp\u003eTo depend on something without linking it to this library, add its\n   name to the \u003ccode\u003edata\u003c/code\u003e instead.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "implementation_deps",
        "doc": "The list of other libraries that the library target depends on. Unlike with\n\u003ccode\u003edeps\u003c/code\u003e, the headers and include paths of these libraries (and all their\ntransitive deps) are only used for compilation of this library, and not libraries that\ndepend on it. Libraries specified with \u003ccode\u003eimplementation_deps\u003c/code\u003e are still linked in\nbinary targets that depend on this library.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "strip_include_prefix",
        "doc": "The prefix to strip from the paths of the headers of this rule.\n\n\u003cp\u003eWhen set, the headers in the \u003ccode\u003ehdrs\u003c/code\u003e attribute of this rule are accessible\nat their path with this prefix cut off.\n\n\u003cp\u003eIf it\u0027s a relative path, it\u0027s taken as a package-relative one. If it\u0027s an absolute one,\nit\u0027s understood as a repository-relative path.\n\n\u003cp\u003eThe prefix in the \u003ccode\u003einclude_prefix\u003c/code\u003e attribute is added after this prefix is\nstripped.\n\n\u003cp\u003eThis attribute is only legal under \u003ccode\u003ethird_party\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "include_prefix",
        "doc": "The prefix to add to the paths of the headers of this rule.\n\n\u003cp\u003eWhen set, the headers in the \u003ccode\u003ehdrs\u003c/code\u003e attribute of this rule are accessible\nat is the value of this attribute prepended to their repository-relative path.\n\n\u003cp\u003eThe prefix in the \u003ccode\u003estrip_include_prefix\u003c/code\u003e attribute is removed before this\nprefix is added.\n\n\u003cp\u003eThis attribute is only legal under \u003ccode\u003ethird_party\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "additional_compiler_inputs",
        "doc": "Any additional files you might want to pass to the compiler command line, such as sanitizer\nignorelists, for example. Files specified here can then be used in copts with the\n$(location) function.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "alwayslink",
        "doc": "If 1, any binary that depends (directly or indirectly) on this C++\nlibrary will link in all the object files for the files listed in\n\u003ccode\u003esrcs\u003c/code\u003e, even if some contain no symbols referenced by the binary.\nThis is useful if your code isn\u0027t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.\n\n\u003cp\u003eIf alwayslink doesn\u0027t work with VS 2017 on Windows, that is due to a\nknown issue,\nplease upgrade your VS 2017 to the latest version.\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkstatic",
        "doc": "For \u003ccode\u003ecc_binary\u003c/code\u003e and\n\u003ccode\u003ecc_test\u003c/code\u003e: link the binary in static\nmode. For \u003ccode\u003ecc_library.link_static\u003c/code\u003e: see below.\n\u003cp\u003eBy default this option is on for \u003ccode\u003ecc_binary\u003c/code\u003e and off for the rest.\u003c/p\u003e\n\u003cp\u003e\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  \u003ccode\u003e.a\u003c/code\u003e\u0027s instead of \u003ccode\u003e.so\u003c/code\u003e\u0027s for user libraries whenever possible.\n  System libraries such as libc (but \u003ci\u003enot\u003c/i\u003e the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only \u003ci\u003emostly\u003c/i\u003e static.\n\u003c/p\u003e\n\u003cp\u003e\nThere are really three different ways to link an executable:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"\u003ccode\u003egcc -static foo.o libbar.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003efully_static_link\u003c/code\u003e in the\n  \u003ccode\u003efeatures\u003c/code\u003e attribute.\u003c/li\u003e\n\u003cli\u003e STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"\u003ccode\u003egcc foo.o libfoo.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"\u003ccode\u003egcc foo.o libfoo.so libbaz.so -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf the \u003ccode\u003elinkstatic\u003c/code\u003e attribute or \u003ccode\u003efully_static_link\u003c/code\u003e in\n\u003ccode\u003efeatures\u003c/code\u003e is used outside of \u003ccode\u003e//third_party\u003c/code\u003e\nplease include a comment near the rule to explain why.\n\u003c/p\u003e\n\u003cp\u003e\nThe \u003ccode\u003elinkstatic\u003c/code\u003e attribute has a different meaning if used on a\n\u003ccode\u003ecc_library()\u003c/code\u003e rule.\nFor a C++ library, \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e indicates that only\nstatic linking is allowed, so no \u003ccode\u003e.so\u003c/code\u003e will be produced. linkstatic\u003dFalse does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n\u003c/p\u003e\n\u003cp\u003e\nThere should be very little code built with \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e in production.\nIf \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e, then the build tool will create symlinks to\ndepended-upon shared libraries in the \u003ccode\u003e*.runfiles\u003c/code\u003e area.\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkstamp",
        "doc": "Simultaneously compiles and links the specified C++ source file into the final\nbinary. This trickery is required to introduce timestamp\ninformation into binaries; if we compiled the source file to an\nobject file in the usual way, the timestamp would be incorrect.\nA linkstamp compilation may not include any particular set of\ncompiler flags and so should not depend on any particular\nheader, compiler option, or other build variable.\n\u003cem class\u003d\u0027harmful\u0027\u003eThis option should only be needed in the\n\u003ccode\u003ebase\u003c/code\u003e package.\u003c/em\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkopts",
        "doc": "See \u003ccode\u003ecc_binary.linkopts\u003c/code\u003e.\nThe \u003ccode\u003elinkopts\u003c/code\u003e attribute is also applied to any target that\ndepends, directly or indirectly, on this library via \u003ccode\u003edeps\u003c/code\u003e\nattributes (or via other attributes that are treated similarly:\nthe \u003ccode\u003emalloc\u003c/code\u003e\nattribute of \u003ccode\u003ecc_binary\u003c/code\u003e). Dependency\nlinkopts take precedence over dependent linkopts (i.e. dependency linkopts\nappear later in the command line). Linkopts specified in\n\u003ccode\u003e--linkopt\u003c/code\u003e\ntake precedence over rule linkopts.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the \u003ccode\u003elinkopts\u003c/code\u003e attribute only applies\nwhen creating \u003ccode\u003e.so\u003c/code\u003e files or executables, not\nwhen creating \u003ccode\u003e.a\u003c/code\u003e or \u003ccode\u003e.lo\u003c/code\u003e files.\nSo if the \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e attribute is set, the\n\u003ccode\u003elinkopts\u003c/code\u003e attribute has no effect on the creation of\nthis library, only on other targets which depend on this library.\n\u003c/p\u003e\n\u003cp\u003e\nAlso, it is important to note that \"-Wl,-soname\" or \"-Xlinker -soname\"\noptions are not supported and should never be specified in this attribute.\n\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003e.so\u003c/code\u003e files produced by \u003ccode\u003ecc_library\u003c/code\u003e\nrules are not linked against the libraries that they depend\non.  If you\u0027re trying to create a shared library for use\noutside of the main repository, e.g. for manual use\nwith \u003ccode\u003edlopen()\u003c/code\u003e or \u003ccode\u003eLD_PRELOAD\u003c/code\u003e,\nit may be better to use a \u003ccode\u003ecc_binary\u003c/code\u003e rule\nwith the \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e attribute.\nSee \u003ccode\u003ecc_binary.linkshared\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_shared_library",
    "doc": "\u003cp\u003eIt produces a shared library.\u003c/p\u003e\n\n\u003ch4 id\u003d\"cc_shard_library_examples\"\u003eExample\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\ncc_shared_library(\n    name \u003d \"foo_shared\",\n    deps \u003d [\n        \":foo\",\n    ],\n    dynamic_deps \u003d [\n        \":bar_shared\",\n    ],\n    additional_linker_inputs \u003d [\n        \":foo.lds\",\n    ],\n    user_link_flags \u003d [\n        \"-Wl,--version-script\u003d$(location :foo.lds)\",\n    ],\n)\ncc_library(\n    name \u003d \"foo\",\n    srcs \u003d [\"foo.cc\"],\n    hdrs \u003d [\"foo.h\"],\n    deps \u003d [\n        \":bar\",\n        \":baz\",\n    ],\n)\ncc_shared_library(\n    name \u003d \"bar_shared\",\n    shared_lib_name \u003d \"bar.so\",\n    deps \u003d [\":bar\"],\n)\ncc_library(\n    name \u003d \"bar\",\n    srcs \u003d [\"bar.cc\"],\n    hdrs \u003d [\"bar.h\"],\n)\ncc_library(\n    name \u003d \"baz\",\n    srcs \u003d [\"baz.cc\"],\n    hdrs \u003d [\"baz.h\"],\n)\n\u003c/pre\u003e\n\n\u003cp\u003eIn the example \u003ccode\u003efoo_shared\u003c/code\u003e statically links \u003ccode\u003efoo\u003c/code\u003e\nand \u003ccode\u003ebaz\u003c/code\u003e, the latter being a transitive dependency. It doesn\u0027t\nlink \u003ccode\u003ebar\u003c/code\u003e because it is already provided dynamically by the\n\u003ccode\u003edynamic_dep\u003c/code\u003e \u003ccode\u003ebar_shared\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efoo_shared\u003c/code\u003e uses a linker script *.lds file to control which\nsymbols should be exported. The \u003ccode\u003ecc_shared_library\u003c/code\u003e rule logic does\nnot control which symbols get exported, it only uses what is assumed to be\nexported to give errors during analysis phase if two shared libraries export the\nsame targets.\u003c/p\u003e\n\n\u003cp\u003eEvery direct dependency of \u003ccode\u003ecc_shared_library\u003c/code\u003e is assumed to be\nexported. Therefore, Bazel assumes during analysis that \u003ccode\u003efoo\u003c/code\u003e is being\nexported by \u003ccode\u003efoo_shared\u003c/code\u003e. \u003ccode\u003ebaz\u003c/code\u003e is not assumed to be exported\nby \u003ccode\u003efoo_shared\u003c/code\u003e. Every target matched by the \u003ccode\u003eexports_filter\u003c/code\u003e\nis also assumed to be exported.\u003c/p\u003e\n\n\u003cp\u003eEvery single \u003ccode\u003ecc_library\u003c/code\u003e in the example should appear at most in one\n\u003ccode\u003ecc_shared_library\u003c/code\u003e. If we wanted to link \u003ccode\u003ebaz\u003c/code\u003e also into\n\u003ccode\u003ebar_shared\u003c/code\u003e we would need to add\n\u003ccode\u003etags \u003d [\"LINKABLE_MORE_THAN_ONCE\"]\u003c/code\u003e to \u003ccode\u003ebaz\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDue to the \u003ccode\u003eshared_lib_name\u003c/code\u003e attribute, the file produced by\n\u003ccode\u003ebar_shared\u003c/code\u003e will have the name \u003ccode\u003ebar.so\u003c/code\u003e as opposed\nto the name \u003ccode\u003elibbar.so\u003c/code\u003e that it would have by default on Linux.\u003c/p\u003e\n\n\u003ch4 id\u003d\"cc_shard_library_examples\"\u003eErrors\u003c/h4\u003e\n\u003ch5\u003e\u003ccode\u003eTwo shared libraries in dependencies export the same symbols.\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis will happen whenever you are creating a target with two different\n\u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies that export the same target. To fix this\nyou need to stop the libraries from being exported in one of the\n\u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003eTwo shared libraries in dependencies link the same library statically\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis will happen whenever you are creating a new \u003ccode\u003ecc_shared_library\u003c/code\u003e with two\ndifferent \u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies that link the same target statically.\nSimilar to the error with exports.\u003c/p\u003e\n\n\u003cp\u003eOne way to fix this is to stop linking the library into one of the\n\u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies. At the same time, the one that still links it\nneeds to export the library so that the one not linking it keeps visibility to\nthe symbols. Another way is to pull out a third library that exports the target.\nA third way is to tag the culprit \u003ccode\u003ecc_library\u003c/code\u003e with \u003ccode\u003eLINKABLE_MORE_THAN_ONCE\u003c/code\u003e\nbut this fix should be rare and you should absolutely make sure that the\n\u003ccode\u003ecc_library\u003c/code\u003e is indeed safe to link more than once.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e\u0027//foo:foo\u0027 is already linked statically in \u0027//bar:bar\u0027 but not exported`\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis means that a library in the transitive closure of your \u003ccode\u003edeps\u003c/code\u003e is reachable\nwithout going through one of the \u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies but is already\nlinked into a different \u003ccode\u003ecc_shared_library\u003c/code\u003e in \u003ccode\u003edynamic_deps\u003c/code\u003e and is not\nexported.\u003c/p\u003e\n\n\u003cp\u003eThe solution is to export it from the \u003ccode\u003ecc_shared_library\u003c/code\u003e dependency or pull out\na third \u003ccode\u003ecc_shared_library\u003c/code\u003e that exports it.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003eDo not place libraries which only contain a precompiled dynamic library in deps.\n\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eIf you have a precompiled dynamic library, this doesn\u0027t need to and cannot be\nlinked statically into the current \u003ccode\u003ecc_shared_library\u003c/code\u003e target that you are\ncurrently creating. Therefore, it doesn\u0027t belong in \u003ccode\u003edeps\u003c/code\u003e of the\n\u003ccode\u003ecc_shared_library\u003c/code\u003e. If this precompiled dynamic library is a dependency of one\nof your \u003ccode\u003ecc_libraries\u003c/code\u003e, then the \u003ccode\u003ecc_library\u003c/code\u003e needs to depend on it\ndirectly.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003eTrying to export a library already exported by a different shared library\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eYou will see this error if on the current rule you are claiming to export a\ntarget that is already being exported by one of your dynamic dependencies.\u003c/p\u003e\n\n\u003cp\u003eTo fix this, remove the target from \u003ccode\u003edeps\u003c/code\u003e and just rely on it from the dynamic\ndependency or make sure that the \u003ccode\u003eexports_filter\u003c/code\u003e doesn\u0027t catch this target.\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "additional_linker_inputs",
        "doc": "Any additional files that you may want to pass to the linker, for example, linker scripts.\nYou have to separately pass any linker flags that the linker needs in order to be aware\nof this file. You can do so via the \u003ccode\u003euser_link_flags\u003c/code\u003e attribute.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "shared_lib_name",
        "doc": "By default cc_shared_library will use a name for the shared library output file based on\nthe target\u0027s name and the platform. This includes an extension and sometimes a prefix.\nSometimes you may not want the default name, for example, when loading C++ shared libraries\nfor Python the default lib* prefix is often not desired, in which case you can use this\nattribute to choose a custom name.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "dynamic_deps",
        "doc": "These are other \u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies the current target depends on.\n\n\u003cp\u003e\nThe \u003ccode\u003ecc_shared_library\u003c/code\u003e implementation will use the list of\n\u003ccode\u003edynamic_deps\u003c/code\u003e (transitively, i.e. also the \u003ccode\u003edynamic_deps\u003c/code\u003e of the\ncurrent target\u0027s \u003ccode\u003edynamic_deps\u003c/code\u003e) to decide which \u003ccode\u003ecc_libraries\u003c/code\u003e in\nthe transitive \u003ccode\u003edeps\u003c/code\u003e should not be linked in because they are already provided\nby a different \u003ccode\u003ecc_shared_library\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "experimental_disable_topo_sort_do_not_use_remove_before_7_0",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports_filter",
        "doc": "This attribute contains a list of targets that are claimed to be exported by the current\nshared library.\n\n\u003cp\u003e\nAny target \u003ccode\u003edeps\u003c/code\u003e is already understood to be exported by the shared library.\nThis attribute should be used to list any targets that are exported by the shared library\nbut are transitive dependencies of \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nNote that this attribute is not actually adding a dependency edge to those targets, the\ndependency edge should instead be created by \u003ccode\u003edeps\u003c/code\u003e.The entries in this\nattribute are just strings. Keep in mind that when placing a target in this attribute,\nthis is considered a claim that the shared library exports the symbols from that target.\nThe \u003ccode\u003ecc_shared_library\u003c/code\u003e logic  doesn\u0027t actually handle telling the linker which\nsymbols should be exported.\n\u003c/p\u003e\n\n\u003cp\u003eThe following syntax is allowed:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e//foo:__pkg__\u003c/code\u003e to account for any target in foo/BUILD\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e//foo:__subpackages__\u003c/code\u003e to account for any target in foo/BUILD or any other\npackage below foo/ like foo/bar/BUILD\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "win_def_file",
        "doc": "The Windows DEF file to be passed to linker.\n\u003cp\u003eThis attribute should only be used when Windows is the target platform.\nIt can be used to \nexport symbols during linking a shared library.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "roots",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "Top level libraries that will unconditionally be statically linked into the shared library\nafter being whole-archived.\n\n\u003cp\u003e\nAny transitive library dependency of these direct deps will be linked into this shared\nlibrary as long as they have not already been linked by a \u003ccode\u003ecc_shared_library\u003c/code\u003e\nin \u003ccode\u003edynamic_deps\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\nDuring analysis, the rule implementation will consider any target listed in\n\u003ccode\u003edeps\u003c/code\u003e as being exported by the shared library in order to give errors when\nmultiple \u003ccode\u003ecc_shared_libraries\u003c/code\u003e export the same targets. The rule implementation\ndoes not take care of informing the linker about which symbols should be exported by the\nshared object. The user should take care of this via linker scripts or visibility\ndeclarations in the source code.\u003c/p\u003e\n\n\u003cp\u003e\nThe implementation will also trigger errors whenever the same library is linked statically\ninto more than one \u003ccode\u003ecc_shared_library\u003c/code\u003e. This can be avoided by adding\n\u003ccode\u003e\"LINKABLE_MORE_THAN_ONCE\"\u003c/code\u003e to the \u003ccode\u003ecc_library.tags\u003c/code\u003e or by listing\nthe \u003ccode\u003ecc_library\u003c/code\u003e as an export of one of the shared libraries so that one can be made a\n\u003ccode\u003edynamic_dep\u003c/code\u003e of the other.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "static_deps",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "user_link_flags",
        "doc": "Any additional flags that you may want to pass to the linker. For example, to make the\nlinker aware of a linker script passed via additional_linker_inputs you can use the\nfollowing:\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\n cc_shared_library(\n    name \u003d \"foo_shared\",\n    additional_linker_inputs \u003d select({\n      \"//src/conditions:linux\": [\n        \":foo.lds\",\n        \":additional_script.txt\",\n      ],\n      \"//conditions:default\": []}),\n    user_link_flags \u003d select({\n      \"//src/conditions:linux\": [\n        \"-Wl,-rpath,kittens\",\n        \"-Wl,--version-script\u003d$(location :foo.lds)\",\n        \"-Wl,--script\u003d$(location :additional_script.txt)\",\n      ],\n      \"//conditions:default\": []}),\n      ...\n )\n\u003c/code\u003e\u003c/pre\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_static_library",
    "doc": "\u003cb\u003eThis rule is currently experimental and can only be used with the \u003ccode\u003e\n--experimental_cc_static_library\u003c/code\u003e flag.\u003c/b\u003e\n\nProduces a static library from a list of targets and their transitive dependencies.\n\n\u003cp\u003eThe resulting static library contains the object files of the targets listed in\n\u003ccode\u003edeps\u003c/code\u003e as well as their transitive dependencies, with preference given to\n\u003ccode\u003ePIC\u003c/code\u003e objects.\u003c/p\u003e\n\n\u003ch4 id\u003d\"cc_static_library_output_groups\"\u003eOutput groups\u003c/h4\u003e\n\n\u003ch5\u003e\u003ccode\u003elinkdeps\u003c/code\u003e\u003c/h5\u003e\n\u003cp\u003eA text file containing the labels of those transitive dependencies of targets listed in\n\u003ccode\u003edeps\u003c/code\u003e that did not contribute any object files to the static library, but do\nprovide at least one static, dynamic or interface library. The resulting static library\nmay require these libraries to be available at link time.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003elinkopts\u003c/code\u003e\u003c/h5\u003e\n\u003cp\u003eA text file containing the user-provided \u003ccode\u003elinkopts\u003c/code\u003e of all transitive\ndependencies of targets listed in \u003ccode\u003edeps\u003c/code\u003e.\n\n\u003ch4 id\u003d\"cc_static_library_symbol_check\"\u003eDuplicate symbols\u003c/h4\u003e\n\u003cp\u003eBy default, the \u003ccode\u003ecc_static_library\u003c/code\u003e rule checks that the resulting static\nlibrary does not contain any duplicate symbols. If it does, the build fails with an error\nmessage that lists the duplicate symbols and the object files containing them.\u003c/p\u003e\n\n\u003cp\u003eThis check can be disabled per target or per package by setting\n\u003ccode\u003efeatures \u003d [\"-symbol_check\"]\u003c/code\u003e or globally via\n\u003ccode\u003e--features\u003d-symbol_check\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id\u003d\"cc_static_library_symbol_check_toolchain\"\u003eToolchain support for \u003ccode\u003esymbol_check\u003c/code\u003e\u003c/h5\u003e\n\u003cp\u003eThe auto-configured C++ toolchains shipped with Bazel support the\n\u003ccode\u003esymbol_check\u003c/code\u003e feature on all platforms. Custom toolchains can add support for\nit in one of two ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eImplementing the \u003ccode\u003eACTION_NAMES.validate_static_library\u003c/code\u003e action and\n  enabling it with the \u003ccode\u003esymbol_check\u003c/code\u003e feature. The tool set in the action is\n  invoked with two arguments, the static library to check for duplicate symbols and the\n  path of a file that must be created if the check passes.\u003c/li\u003e\n  \u003cli\u003eHaving the \u003ccode\u003esymbol_check\u003c/code\u003e feature add archiver flags that cause the\n  action creating the static library to fail on duplicate symbols.\u003c/li\u003e\n\u003c/ul\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of targets to combine into a static library, including all their transitive\ndependencies.\n\n\u003cp\u003eDependencies that do not provide any object files are not included in the static\nlibrary, but their labels are collected in the file provided by the\n\u003ccode\u003elinkdeps\u003c/code\u003e output group.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "test_rules.cc_test",
    "doc": "\u003cp\u003e\nA \u003ccode\u003ecc_test()\u003c/code\u003e rule compiles a test.  Here, a test\nis a binary wrapper around some testing code.\n\u003c/p\u003e\n\n\u003cp\u003e\u003ci\u003eBy default, C++ tests are dynamically linked.\u003c/i\u003e\u003cbr/\u003e\n    To statically link a unit test, specify\n    \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e.\n    It would probably be good to comment why your test needs\n    \u003ccode\u003elinkstatic\u003c/code\u003e; this is probably not obvious.\u003c/p\u003e\n\n\u003ch4\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.stripped\u003c/code\u003e (only built if explicitly requested): A stripped\n  version of the binary. \u003ccode\u003estrip -g\u003c/code\u003e is run on the binary to remove debug\n  symbols.  Additional strip options can be provided on the command line using\n  \u003ccode\u003e--stripopt\u003d-foo\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.dwp\u003c/code\u003e (only built if explicitly requested): If\n  Fission is enabled: a debug\n  information package file suitable for debugging remotely deployed binaries. Else: an\n  empty file.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nSee the cc_binary() arguments, except that\nthe \u003ccode\u003estamp\u003c/code\u003e argument is set to 0 by default for tests and\nthat \u003ccode\u003ecc_test\u003c/code\u003e has extra \nattributes common to all test rules (*_test).\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of C and C++ files that are processed to create the library target.\nThese are C/C++ source and header files, either non-generated (normal source\ncode) or generated.\n\u003cp\u003eAll \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.c\u003c/code\u003e, and \u003ccode\u003e.cpp\u003c/code\u003e files will\n   be compiled. These might be generated files: if a named file is in\n   the \u003ccode\u003eouts\u003c/code\u003e of some other rule, this \u003ccode\u003ecc_library\u003c/code\u003e\n   will automatically depend on that other rule.\n\u003c/p\u003e\n\u003cp\u003ePure assembler files (.s, .asm) are not preprocessed and are typically built using\nthe assembler. Preprocessed assembly files (.S) are preprocessed and are typically built\nusing the C/C++ compiler.\n\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003e.h\u003c/code\u003e file will not be compiled, but will be available for\n   inclusion by sources in this rule. Both \u003ccode\u003e.cc\u003c/code\u003e and\n   \u003ccode\u003e.h\u003c/code\u003e files can directly include headers listed in\n   these \u003ccode\u003esrcs\u003c/code\u003e or in the \u003ccode\u003ehdrs\u003c/code\u003e of this rule or any\n   rule listed in the \u003ccode\u003edeps\u003c/code\u003e argument.\n\u003c/p\u003e\n\u003cp\u003eAll \u003ccode\u003e#include\u003c/code\u003ed files must be mentioned in the\n   \u003ccode\u003ehdrs\u003c/code\u003e attribute of this or referenced \u003ccode\u003ecc_library\u003c/code\u003e\n   rules, or they should be listed in \u003ccode\u003esrcs\u003c/code\u003e if they are private\n   to this library. See \"Header inclusion checking\" for\n   a more detailed description.\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.so\u003c/code\u003e, \u003ccode\u003e.lo\u003c/code\u003e, and \u003ccode\u003e.a\u003c/code\u003e files are\n   pre-compiled files. Your library might have these as\n   \u003ccode\u003esrcs\u003c/code\u003e if it uses third-party code for which we don\u0027t\n   have source code.\n\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003esrcs\u003c/code\u003e attribute includes the label of another rule,\n   \u003ccode\u003ecc_library\u003c/code\u003e will use the output files of that rule as source files to\n   compile. This is useful for one-off generation of source code (for more than occasional\n   use, it\u0027s better to implement a Starlark rule class and use the \u003ccode\u003ecc_common\u003c/code\u003e\n   API)\n\u003c/p\u003e\n\u003cp\u003e\n  Permitted \u003ccode\u003esrcs\u003c/code\u003e file types:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eC and C++ source files: \u003ccode\u003e.c\u003c/code\u003e, \u003ccode\u003e.cc\u003c/code\u003e, \u003ccode\u003e.cpp\u003c/code\u003e,\n  \u003ccode\u003e.cxx\u003c/code\u003e, \u003ccode\u003e.c++\u003c/code\u003e, \u003ccode\u003e.C\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC and C++ header files: \u003ccode\u003e.h\u003c/code\u003e, \u003ccode\u003e.hh\u003c/code\u003e, \u003ccode\u003e.hpp\u003c/code\u003e,\n  \u003ccode\u003e.hxx\u003c/code\u003e, \u003ccode\u003e.inc\u003c/code\u003e, \u003ccode\u003e.inl\u003c/code\u003e, \u003ccode\u003e.H\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAssembler with C preprocessor: \u003ccode\u003e.S\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eArchive: \u003ccode\u003e.a\u003c/code\u003e, \u003ccode\u003e.pic.a\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\"Always link\" library: \u003ccode\u003e.lo\u003c/code\u003e, \u003ccode\u003e.pic.lo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eShared library, versioned or unversioned: \u003ccode\u003e.so\u003c/code\u003e,\n  \u003ccode\u003e.so.\u003ci\u003eversion\u003c/i\u003e\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eObject file: \u003ccode\u003e.o\u003c/code\u003e, \u003ccode\u003e.pic.o\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  ... and any rules that produce those files (e.g. \u003ccode\u003ecc_embed_data\u003c/code\u003e).\n  Different extensions denote different programming languages in\n  accordance with gcc convention.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_interfaces",
        "doc": "The list of files are regarded as C++20 Modules Interface.\n\n\u003cp\u003e\nC++ Standard has no restriction about module interface file extension\n\u003cul\u003e\n\u003cli\u003eClang use cppm \u003c/li\u003e\n\u003cli\u003eGCC can use any source file extension \u003c/li\u003e\n\u003cli\u003eMSVC use ixx \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003eThe use is guarded by the flag\n\u003ccode\u003e--experimental_cpp_modules\u003c/code\u003e.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\n\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is the name of a generated file, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on the generating\n   rule.\n\u003c/p\u003e\n\u003cp\u003eIf a \u003ccode\u003edata\u003c/code\u003e is a rule name, then this\n   \u003ccode\u003ecc_library\u003c/code\u003e rule automatically depends on that rule,\n   and that rule\u0027s \u003ccode\u003eouts\u003c/code\u003e are automatically added to\n   this \u003ccode\u003ecc_library\u003c/code\u003e\u0027s data files.\n\u003c/p\u003e\n\u003cp\u003eYour C++ code can access these data files like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\n  const std::string path \u003d devtools_build::GetDataDependencyFilepath(\n      \"my/test/data/file\");\n\u003c/code\u003e\u003c/pre\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of include dirs to be added to the compile line.\nSubject to \"Make variable\" substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n\u003ccode\u003e-isystem path_to_package/include_entry\u003c/code\u003e.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to COPTS instead.\n\u003cp\u003e\nThe added \u003ccode\u003einclude\u003c/code\u003e paths will include generated files as well as\nfiles in the source tree.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n\u003ccode\u003elocal_defines\u003c/code\u003e instead.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "local_defines",
        "doc": "List of defines to add to the compile line.\nSubject to \"Make\" variable substitution and\nBourne shell tokenization.\nEach string, which must consist of a single Bourne shell token,\nis prepended with \u003ccode\u003e-D\u003c/code\u003e and added to the compile command line for this target,\nbut not to its dependents.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "Add these options to the C/C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003e\n  Each string in this attribute is added in the given order to \u003ccode\u003eCOPTS\u003c/code\u003e before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of \u003ccode\u003ethird_party\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  If the package declares the feature\n  \u003ccode\u003eno_copts_tokenization\u003c/code\u003e, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "conlyopts",
        "doc": "Add these options to the C compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "Add these options to the C++ compilation command.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs_check",
        "doc": "Deprecated, no-op.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "additional_linker_inputs",
        "doc": "Pass these files to the C++ linker command.\n\u003cp\u003e\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "win_def_file",
        "doc": "The Windows DEF file to be passed to linker.\n\u003cp\u003eThis attribute should only be used when Windows is the target platform.\nIt can be used to \nexport symbols during linking a shared library.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries to be linked in to the binary target.\n\u003cp\u003eThese can be \u003ccode\u003ecc_library\u003c/code\u003e or \u003ccode\u003eobjc_library\u003c/code\u003e\ntargets.\u003c/p\u003e\n\nIt is also allowed to\nput linker scripts (.lds) into deps, and reference them in\nlinkopts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "reexport_deps",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkopts",
        "doc": "Add these flags to the C++ linker command.\nSubject to \"Make\" variable substitution,\n\nBourne shell tokenization and\nlabel expansion.\nEach string in this attribute is added to \u003ccode\u003eLINKOPTS\u003c/code\u003e before\nlinking the binary target.\n\u003cp\u003e\n    Each element of this list that does not start with \u003ccode\u003e$\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e is\n    assumed to be the label of a target in \u003ccode\u003edeps\u003c/code\u003e. The\n    list of files generated by that target is appended to the linker\n    options.  An error is reported if the label is invalid, or is\n    not declared in \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "nocopts",
        "doc": "Remove matching options from the C++ compilation command.\nSubject to \"Make\" variable substitution.\nThe value of this attribute is interpreted as a regular expression.\nAny preexisting \u003ccode\u003eCOPTS\u003c/code\u003e that match this regular expression\n(including values explicitly specified in the rule\u0027s copts attribute)\nwill be removed from \u003ccode\u003eCOPTS\u003c/code\u003e for purposes of compiling this rule.\nThis attribute should not be needed or used\noutside of \u003ccode\u003ethird_party\u003c/code\u003e.  The values are not preprocessed\nin any way other than the \"Make\" variable substitution.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkstatic",
        "doc": "For \u003ccode\u003ecc_binary\u003c/code\u003e and\n\u003ccode\u003ecc_test\u003c/code\u003e: link the binary in static\nmode. For \u003ccode\u003ecc_library.link_static\u003c/code\u003e: see below.\n\u003cp\u003eBy default this option is on for \u003ccode\u003ecc_binary\u003c/code\u003e and off for the rest.\u003c/p\u003e\n\u003cp\u003e\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  \u003ccode\u003e.a\u003c/code\u003e\u0027s instead of \u003ccode\u003e.so\u003c/code\u003e\u0027s for user libraries whenever possible.\n  System libraries such as libc (but \u003ci\u003enot\u003c/i\u003e the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only \u003ci\u003emostly\u003c/i\u003e static.\n\u003c/p\u003e\n\u003cp\u003e\nThere are really three different ways to link an executable:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"\u003ccode\u003egcc -static foo.o libbar.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003efully_static_link\u003c/code\u003e in the\n  \u003ccode\u003efeatures\u003c/code\u003e attribute.\u003c/li\u003e\n\u003cli\u003e STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"\u003ccode\u003egcc foo.o libfoo.a libbaz.a -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"\u003ccode\u003egcc foo.o libfoo.so libbaz.so -lm\u003c/code\u003e\".\u003cbr/\u003e\n  This mode is enabled by specifying \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf the \u003ccode\u003elinkstatic\u003c/code\u003e attribute or \u003ccode\u003efully_static_link\u003c/code\u003e in\n\u003ccode\u003efeatures\u003c/code\u003e is used outside of \u003ccode\u003e//third_party\u003c/code\u003e\nplease include a comment near the rule to explain why.\n\u003c/p\u003e\n\u003cp\u003e\nThe \u003ccode\u003elinkstatic\u003c/code\u003e attribute has a different meaning if used on a\n\u003ccode\u003ecc_library()\u003c/code\u003e rule.\nFor a C++ library, \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e indicates that only\nstatic linking is allowed, so no \u003ccode\u003e.so\u003c/code\u003e will be produced. linkstatic\u003dFalse does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n\u003c/p\u003e\n\u003cp\u003e\nThere should be very little code built with \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e in production.\nIf \u003ccode\u003elinkstatic\u003dFalse\u003c/code\u003e, then the build tool will create symlinks to\ndepended-upon shared libraries in the \u003ccode\u003e*.runfiles\u003c/code\u003e area.\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "malloc",
        "doc": "Override the default dependency on malloc.\n\u003cp\u003e\n  By default, C++ binaries are linked against \u003ccode\u003e//tools/cpp:malloc\u003c/code\u003e,\n  which is an empty library so the binary ends up using libc malloc.\n  This label must refer to a \u003ccode\u003ecc_library\u003c/code\u003e. If compilation is for a non-C++\n  rule, this option has no effect. The value of this attribute is ignored if\n  \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e is specified.\n\u003c/p\u003e",
        "defaultValue": "\"@bazel_tools//tools/cpp:malloc\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "link_extra_lib",
        "doc": "Control linking of extra libraries.\n\u003cp\u003e\n    By default, C++ binaries are linked against \u003ccode\u003e//tools/cpp:link_extra_lib\u003c/code\u003e,\n    which by default depends on the label flag \u003ccode\u003e//tools/cpp:link_extra_libs\u003c/code\u003e.\n    Without setting the flag, this library is empty by default. Setting the label flag\n    allows linking optional dependencies, such as overrides for weak symbols, interceptors\n    for shared library functions, or special runtime libraries (for malloc replacements,\n    prefer \u003ccode\u003emalloc\u003c/code\u003e or \u003ccode\u003e--custom_malloc\u003c/code\u003e). Setting this attribute to\n    \u003ccode\u003eNone\u003c/code\u003e disables this behaviour.\n\u003c/p\u003e",
        "defaultValue": "\"@bazel_tools//tools/cpp:link_extra_lib\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkshared",
        "doc": "Create a shared library.\nTo enable this attribute, include \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e in your rule. By default\nthis option is off.\n\u003cp\u003e\n  The presence of this flag means that linking occurs with the \u003ccode\u003e-shared\u003c/code\u003e flag\n  to \u003ccode\u003egcc\u003c/code\u003e, and the resulting shared library is suitable for loading into for\n  example a Java program. However, for build purposes it will never be linked into the\n  dependent binary, as it is assumed that shared libraries built with a\n  cc_binary rule are only loaded manually by other programs, so\n  it should not be considered a substitute for the cc_library\n  rule. For sake of scalability we recommend avoiding this approach altogether and\n  simply letting \u003ccode\u003ejava_library\u003c/code\u003e depend on \u003ccode\u003ecc_library\u003c/code\u003e rules\n  instead.\n\u003c/p\u003e\n\u003cp\u003e\n  If you specify both \u003ccode\u003elinkopts\u003d[\u0027-static\u0027]\u003c/code\u003e and \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e,\n  you get a single completely self-contained unit. If you specify both\n  \u003ccode\u003elinkstatic\u003dTrue\u003c/code\u003e and \u003ccode\u003elinkshared\u003dTrue\u003c/code\u003e, you get a single, mostly\n  self-contained unit.\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "distribs",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "dynamic_deps",
        "doc": "These are other \u003ccode\u003ecc_shared_library\u003c/code\u003e dependencies the current target depends on.\n\n\u003cp\u003e\nThe \u003ccode\u003ecc_shared_library\u003c/code\u003e implementation will use the list of\n\u003ccode\u003edynamic_deps\u003c/code\u003e (transitively, i.e. also the \u003ccode\u003edynamic_deps\u003c/code\u003e of the\ncurrent target\u0027s \u003ccode\u003edynamic_deps\u003c/code\u003e) to decide which \u003ccode\u003ecc_libraries\u003c/code\u003e in\nthe transitive \u003ccode\u003edeps\u003c/code\u003e should not be linked in because they are already provided\nby a different \u003ccode\u003ecc_shared_library\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_toolchain",
    "doc": "\u003cp\u003eRepresents a C++ toolchain.\u003c/p\u003e\n\n\u003cp\u003e\n  This rule is responsible for:\n\n  \u003cul\u003e\n    \u003cli\u003e\n      Collecting all artifacts needed for C++ actions to run. This is done by\n      attributes such as \u003ccode\u003eall_files\u003c/code\u003e, \u003ccode\u003ecompiler_files\u003c/code\u003e,\n      \u003ccode\u003elinker_files\u003c/code\u003e, or other attributes ending with \u003ccode\u003e_files\u003c/code\u003e). These are\n      most commonly filegroups globbing all required files.\n    \u003c/li\u003e\n    \u003cli\u003e\n      Generating correct command lines for C++ actions. This is done using\n      \u003ccode\u003eCcToolchainConfigInfo\u003c/code\u003e provider (details below).\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Use \u003ccode\u003etoolchain_config\u003c/code\u003e attribute to configure the C++ toolchain.\n  See also this\n  \n    page\n   for elaborate C++ toolchain configuration and toolchain selection documentation.\n\u003c/p\u003e\n\u003cp\u003e\n  Use \u003ccode\u003etags \u003d [\"manual\"]\u003c/code\u003e in order to prevent toolchains from being built and configured\n  unnecessarily when invoking \u003ccode\u003ebazel build //...\u003c/code\u003e\n\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "output_licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "toolchain_identifier",
        "doc": "The identifier used to match this cc_toolchain with the corresponding\ncrosstool_config.toolchain.\n\n\u003cp\u003e\n  Until issue #5380 is fixed\n  this is the recommended way of associating \u003ccode\u003ecc_toolchain\u003c/code\u003e with\n  \u003ccode\u003eCROSSTOOL.toolchain\u003c/code\u003e. It will be replaced by the \u003ccode\u003etoolchain_config\u003c/code\u003e\n  attribute (#5380).\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "all_files",
        "doc": "Collection of all cc_toolchain artifacts. These artifacts will be added as inputs to all\nrules_cc related actions (with the exception of actions that are using more precise sets of\nartifacts from attributes below). Bazel assumes that \u003ccode\u003eall_files\u003c/code\u003e is a superset\nof all other artifact-providing attributes (e.g. linkstamp compilation needs both compile\nand link files, so it takes \u003ccode\u003eall_files\u003c/code\u003e).\n\n\u003cp\u003e\nThis is what \u003ccode\u003ecc_toolchain.files\u003c/code\u003e contains, and this is used by all Starlark\nrules using C++ toolchain.\u003c/p\u003e",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "compiler_files",
        "doc": "Collection of all cc_toolchain artifacts required for compile actions.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "compiler_files_without_includes",
        "doc": "Collection of all cc_toolchain artifacts required for compile actions in case when\ninput discovery is supported (currently Google-only).",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "strip_files",
        "doc": "Collection of all cc_toolchain artifacts required for strip actions.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "objcopy_files",
        "doc": "Collection of all cc_toolchain artifacts required for objcopy actions.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "as_files",
        "doc": "Collection of all cc_toolchain artifacts required for assembly actions.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "ar_files",
        "doc": "Collection of all cc_toolchain artifacts required for archiving actions.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linker_files",
        "doc": "Collection of all cc_toolchain artifacts required for linking actions.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "dwp_files",
        "doc": "Collection of all cc_toolchain artifacts required for dwp actions.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "coverage_files",
        "doc": "Collection of all cc_toolchain artifacts required for coverage actions. If not specified,\nall_files are used.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "libc_top",
        "doc": "A collection of artifacts for libc passed as inputs to compile/linking actions.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "static_runtime_lib",
        "doc": "Static library artifact for the C++ runtime library (e.g. libstdc++.a).\n\n\u003cp\u003eThis will be used when \u0027static_link_cpp_runtimes\u0027 feature is enabled, and we\u0027re linking\ndependencies statically.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "dynamic_runtime_lib",
        "doc": "Dynamic library artifact for the C++ runtime library (e.g. libstdc++.so).\n\n\u003cp\u003eThis will be used when \u0027static_link_cpp_runtimes\u0027 feature is enabled, and we\u0027re linking\ndependencies dynamically.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_map",
        "doc": "Module map artifact to be used for modular builds.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "supports_param_files",
        "doc": "Set to True when cc_toolchain supports using param files for linking actions.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "supports_header_parsing",
        "doc": "Set to True when cc_toolchain supports header parsing actions.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exec_transition_for_inputs",
        "doc": "Deprecated. No-op.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "toolchain_config",
        "doc": "The label of the rule providing \u003ccode\u003ecc_toolchain_config_info\u003c/code\u003e.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "fdo_prefetch_hints",
    "doc": "\u003cp\u003eRepresents an FDO prefetch hints profile that is either in the workspace.\nExamples:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\nfdo_prefetch_hints(\n    name \u003d \"hints\",\n    profile \u003d \"//path/to/hints:profile.afdo\",\n)\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "profile",
        "doc": "Label of the hints profile. The hints file has the .afdo extension\nThe label can also point to an fdo_absolute_path_profile rule.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "fdo_profile",
    "doc": "\u003cp\u003eRepresents an FDO profile that is in the workspace.\nExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\nfdo_profile(\n    name \u003d \"fdo\",\n    profile \u003d \"//path/to/fdo:profile.zip\",\n)\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "profile",
        "doc": "Label of the FDO profile or a rule which generates it. The FDO file can have one of the\nfollowing extensions: .profraw for unindexed LLVM profile, .profdata for indexed LLVM\nprofile, .zip that holds an LLVM profraw profile, .afdo for AutoFDO profile, .xfdo for\nXBinary profile. The label can also point to an fdo_absolute_path_profile rule.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "proto_profile",
        "doc": "Label of the protobuf profile.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "memprof_profile",
        "doc": "Label of the MemProf profile. The profile is expected to have\neither a .profdata extension (for an indexed/symbolized memprof\nprofile), or a .zip extension for a zipfile containing a memprof.profdata\nfile.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "memprof_profile",
    "doc": "\u003cp\u003eRepresents a MEMPROF profile that is in the workspace.\nExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\nmemprof_profile(\n    name \u003d \"memprof\",\n    profile \u003d \"//path/to/memprof:profile.afdo\",\n)\n\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "profile",
        "doc": "Label of the MEMPROF profile. The profile is expected to have\neither a .profdata extension (for an indexed/symbolized memprof\nprofile), or a .zip extension for a zipfile containing a memprof.profdata\nfile.\nThe label can also point to an fdo_absolute_path_profile rule.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "propeller_optimize",
    "doc": "\u003cp\u003eRepresents a Propeller optimization profile in the workspace.\nExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\npropeller_optimize(\n    name \u003d \"layout\",\n    cc_profile \u003d \"//path:cc_profile.txt\",\n    ld_profile \u003d \"//path:ld_profile.txt\"\n)\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "cc_profile",
        "doc": "Label of the profile passed to the various compile actions.  This file has\nthe .txt extension.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "ld_profile",
        "doc": "Label of the profile passed to the link action.  This file has\nthe .txt extension.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "objc_import",
    "doc": "\u003cp\u003eThis rule encapsulates an already-compiled static library in the form of an\n\u003ccode\u003e.a\u003c/code\u003e file. It also allows exporting headers and resources using the same\nattributes supported by \u003ccode\u003eobjc_library\u003c/code\u003e.\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "archives",
        "doc": "The list of \u003ccode\u003e.a\u003c/code\u003e files provided to Objective-C targets that\ndepend on this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "alwayslink",
        "doc": "If 1, any bundle or binary that depends (directly or indirectly) on this\nlibrary will link in all the object files for the files listed in\n\u003ccode\u003esrcs\u003c/code\u003e and \u003ccode\u003enon_arc_srcs\u003c/code\u003e, even if some contain no\nsymbols referenced by the binary.\nThis is useful if your code isn\u0027t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs",
        "doc": "The list of C, C++, Objective-C, and Objective-C++ header files published\nby this library to be included by sources in dependent rules.\n\u003cp\u003e\nThese headers describe the public interface for the library and will be\nmade available for inclusion by sources in this rule or in dependent\nrules. Headers not meant to be included by a client of this library\nshould be listed in the srcs attribute instead.\n\u003cp\u003e\nThese will be compiled separately from the source if modules are enabled.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "textual_hdrs",
        "doc": "The list of C, C++, Objective-C, and Objective-C++ files that are\nincluded as headers by source files in this rule or by users of this\nlibrary. Unlike hdrs, these will not be compiled separately from the\nsources.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of \u003ccode\u003e#include/#import\u003c/code\u003e search paths to add to this target\nand all depending targets.\n\nThis is to support third party and open-sourced libraries that do not\nspecify the entire workspace path in their\n\u003ccode\u003e#import/#include\u003c/code\u003e statements.\n\u003cp\u003e\nThe paths are interpreted relative to the package directory, and the\ngenfiles and bin roots (e.g. \u003ccode\u003eblaze-genfiles/pkg/includedir\u003c/code\u003e\nand \u003ccode\u003eblaze-out/pkg/includedir\u003c/code\u003e) are included in addition to the\nactual client root.\n\u003cp\u003e\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-iquote\" flags to COPTS instead.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_includes",
        "doc": "List of \u003ccode\u003e#include/#import\u003c/code\u003e search paths to add to this target\nand all depending targets, where each path is relative to\n\u003ccode\u003e$(SDKROOT)/usr/include\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of targets that this target depend on.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_frameworks",
        "doc": "Names of SDK frameworks to link with (e.g. \"AddressBook\", \"QuartzCore\").\n\n\u003cp\u003e When linking a top level Apple binary, all SDK frameworks listed in that binary\u0027s\ntransitive dependency graph are linked.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "weak_sdk_frameworks",
        "doc": "Names of SDK frameworks to weakly link with. For instance,\n\"MediaAccessibility\".\n\nIn difference to regularly linked SDK frameworks, symbols\nfrom weakly linked frameworks do not cause an error if they\nare not present at runtime.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_dylibs",
        "doc": "Names of SDK .dylib libraries to link with. For instance, \"libz\" or\n\"libarchive\".\n\n\"libc++\" is included automatically if the binary has any C++ or\nObjective-C++ sources in its dependency tree. When linking a binary,\nall libraries named in that binary\u0027s transitive dependency graph are\nused.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "objc_library",
    "doc": "\u003cp\u003eThis rule produces a static library from the given Objective-C source files.\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "implementation_deps",
        "doc": "The list of other libraries that the library target depends on. Unlike with\n\u003ccode\u003edeps\u003c/code\u003e, the headers and include paths of these libraries (and all their\ntransitive deps) are only used for compilation of this library, and not libraries that\ndepend on it. Libraries specified with \u003ccode\u003eimplementation_deps\u003c/code\u003e are still linked\nin binary targets that depend on this library.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "alwayslink",
        "doc": "If 1, any bundle or binary that depends (directly or indirectly) on this\nlibrary will link in all the object files for the files listed in\n\u003ccode\u003esrcs\u003c/code\u003e and \u003ccode\u003enon_arc_srcs\u003c/code\u003e, even if some contain no\nsymbols referenced by the binary.\nThis is useful if your code isn\u0027t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of C, C++, Objective-C, and Objective-C++ source and header\nfiles, and/or (\u003ccode\u003e.s\u003c/code\u003e, \u003ccode\u003e.S\u003c/code\u003e, or \u003ccode\u003e.asm\u003c/code\u003e) assembly source files, that are processed to create\nthe library target.\nThese are your checked-in files, plus any generated files.\nSource files are compiled into .o files with Clang. Header files\nmay be included/imported by any source or header in the srcs attribute\nof this target, but not by headers in hdrs or any targets that depend\non this rule.\nAdditionally, precompiled .o files may be given as srcs.  Be careful to\nensure consistency in the architecture of provided .o files and that of the\nbuild to avoid missing symbol linker errors.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "non_arc_srcs",
        "doc": "The list of Objective-C files that are processed to create the\nlibrary target that DO NOT use ARC.\nThe files in this attribute are treated very similar to those in the\nsrcs attribute, but are compiled without ARC enabled.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pch",
        "doc": "Header file to prepend to every source file being compiled (both arc\nand non-arc).\nUse of pch files is actively discouraged in BUILD files, and this should be\nconsidered deprecated. Since pch files are not actually precompiled this is not\na build-speed enhancement, and instead is just a global dependency. From a build\nefficiency point of view you are actually better including what you need directly\nin your sources where you need it.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "defines",
        "doc": "Extra \u003ccode\u003e-D\u003c/code\u003e flags to pass to the compiler. They should be in\nthe form \u003ccode\u003eKEY\u003dVALUE\u003c/code\u003e or simply \u003ccode\u003eKEY\u003c/code\u003e and are\npassed not only to the compiler for this target (as \u003ccode\u003ecopts\u003c/code\u003e\nare) but also to all \u003ccode\u003eobjc_\u003c/code\u003e dependers of this target.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "enable_modules",
        "doc": "Enables clang module support (via -fmodules).\nSetting this to 1 will allow you to @import system headers and other targets:\n@import UIKit;\n@import path_to_package_target;",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkopts",
        "doc": "Extra flags to pass to the linker.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_map",
        "doc": "custom Clang module map for this target. Use of a custom module map is discouraged. Most\nusers should use module maps generated by Bazel.\nIf specified, Bazel will not generate a module map for this target, but will pass the\nprovided module map to the compiler.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_name",
        "doc": "Sets the module name for this target. By default the module name is the target path with\nall special symbols replaced by _, e.g. //foo/baz:bar can be imported as foo_baz_bar.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hdrs",
        "doc": "The list of C, C++, Objective-C, and Objective-C++ header files published\nby this library to be included by sources in dependent rules.\n\u003cp\u003e\nThese headers describe the public interface for the library and will be\nmade available for inclusion by sources in this rule or in dependent\nrules. Headers not meant to be included by a client of this library\nshould be listed in the srcs attribute instead.\n\u003cp\u003e\nThese will be compiled separately from the source if modules are enabled.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "textual_hdrs",
        "doc": "The list of C, C++, Objective-C, and Objective-C++ files that are\nincluded as headers by source files in this rule or by users of this\nlibrary. Unlike hdrs, these will not be compiled separately from the\nsources.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "includes",
        "doc": "List of \u003ccode\u003e#include/#import\u003c/code\u003e search paths to add to this target\nand all depending targets.\n\nThis is to support third party and open-sourced libraries that do not\nspecify the entire workspace path in their\n\u003ccode\u003e#import/#include\u003c/code\u003e statements.\n\u003cp\u003e\nThe paths are interpreted relative to the package directory, and the\ngenfiles and bin roots (e.g. \u003ccode\u003eblaze-genfiles/pkg/includedir\u003c/code\u003e\nand \u003ccode\u003eblaze-out/pkg/includedir\u003c/code\u003e) are included in addition to the\nactual client root.\n\u003cp\u003e\nUnlike COPTS, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-iquote\" flags to COPTS instead.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_includes",
        "doc": "List of \u003ccode\u003e#include/#import\u003c/code\u003e search paths to add to this target\nand all depending targets, where each path is relative to\n\u003ccode\u003e$(SDKROOT)/usr/include\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of targets that this target depend on.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "Extra flags to pass to the compiler.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n\u003cp\u003e\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "conlyopts",
        "doc": "Extra flags to pass to the compiler for C files.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n\u003cp\u003e\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "Extra flags to pass to the compiler for Objective-C++ and C++ files.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n\u003cp\u003e\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_frameworks",
        "doc": "Names of SDK frameworks to link with (e.g. \"AddressBook\", \"QuartzCore\").\n\n\u003cp\u003e When linking a top level Apple binary, all SDK frameworks listed in that binary\u0027s\ntransitive dependency graph are linked.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "weak_sdk_frameworks",
        "doc": "Names of SDK frameworks to weakly link with. For instance,\n\"MediaAccessibility\".\n\nIn difference to regularly linked SDK frameworks, symbols\nfrom weakly linked frameworks do not cause an error if they\nare not present at runtime.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_dylibs",
        "doc": "Names of SDK .dylib libraries to link with. For instance, \"libz\" or\n\"libarchive\".\n\n\"libc++\" is included automatically if the binary has any C++ or\nObjective-C++ sources in its dependency tree. When linking a binary,\nall libraries named in that binary\u0027s transitive dependency graph are\nused.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "cc_proto_library",
    "doc": "\u003cp\u003e\n\u003ccode\u003ecc_proto_library\u003c/code\u003e generates C++ code from \u003ccode\u003e.proto\u003c/code\u003e files.\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ccode\u003edeps\u003c/code\u003e must point to \u003ccode\u003eproto_library\n\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003cp\u003e\nExample:\n\u003c/p\u003e\n\n\u003cpre\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\ncc_library(\n    name \u003d \"lib\",\n    deps \u003d [\":foo_cc_proto\"],\n)\n\ncc_proto_library(\n    name \u003d \"foo_cc_proto\",\n    deps \u003d [\":foo_proto\"],\n)\n\nproto_library(\n    name \u003d \"foo_proto\",\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of \u003ccode\u003eproto_library\u003c/code\u003e\nrules to generate C++ code for.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_lite_proto_library",
    "doc": "\u003cp\u003e\n\u003ccode\u003ejava_lite_proto_library\u003c/code\u003e generates Java code from \u003ccode\u003e.proto\u003c/code\u003e files.\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ccode\u003edeps\u003c/code\u003e must point to \u003ccode\u003eproto_library\n\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003cp\u003e\nExample:\n\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_library(\n    name \u003d \"lib\",\n    runtime_deps \u003d [\":foo\"],\n)\n\njava_lite_proto_library(\n    name \u003d \"foo\",\n    deps \u003d [\":bar\"],\n)\n\nproto_library(\n    name \u003d \"bar\",\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of \u003ccode\u003eproto_library\u003c/code\u003e\nrules to generate Java code for.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_proto_library",
    "doc": "\u003cp\u003e\n\u003ccode\u003ejava_proto_library\u003c/code\u003e generates Java code from \u003ccode\u003e.proto\u003c/code\u003e files.\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ccode\u003edeps\u003c/code\u003e must point to \u003ccode\u003eproto_library\n\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003cp\u003e\nExample:\n\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_library(\n    name \u003d \"lib\",\n    runtime_deps \u003d [\":foo_java_proto\"],\n)\n\njava_proto_library(\n    name \u003d \"foo_java_proto\",\n    deps \u003d [\":foo_proto\"],\n)\n\nproto_library(\n    name \u003d \"foo_proto\",\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of \u003ccode\u003eproto_library\u003c/code\u003e\nrules to generate Java code for.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "proto_library",
    "doc": "\u003cp\u003eUse \u003ccode\u003eproto_library\u003c/code\u003e to define libraries of protocol buffers which\nmay be used from multiple languages. A \u003ccode\u003eproto_library\u003c/code\u003e may be listed\nin the \u003ccode\u003edeps\u003c/code\u003e clause of supported rules, such as\n\u003ccode\u003ejava_proto_library\u003c/code\u003e.\n\n\u003cp\u003eWhen compiled on the command-line, a \u003ccode\u003eproto_library\u003c/code\u003e creates a file\nnamed \u003ccode\u003efoo-descriptor-set.proto.bin\u003c/code\u003e, which is the descriptor set for\nthe messages the rule srcs. The file is a serialized\n\u003ccode\u003eFileDescriptorSet\u003c/code\u003e, which is described in\n\nhttps://developers.google.com/protocol-buffers/docs/techniques#self-description.\n\n\u003cp\u003eIt only contains information about the \u003ccode\u003e.proto\u003c/code\u003e files directly\nmentioned by a \u003ccode\u003eproto_library\u003c/code\u003e rule; the collection of transitive\ndescriptor sets is available through the\n\u003ccode\u003e[ProtoInfo].transitive_descriptor_sets\u003c/code\u003e Starlark provider.\nSee documentation in \u003ccode\u003eproto_info.bzl\u003c/code\u003e.\n\n\u003cp\u003eRecommended code organization:\n\u003cul\u003e\n\u003cli\u003eOne \u003ccode\u003eproto_library\u003c/code\u003e rule per \u003ccode\u003e.proto\u003c/code\u003e file.\n\u003cli\u003eA file named \u003ccode\u003efoo.proto\u003c/code\u003e will be in a rule named \u003ccode\u003efoo_proto\u003c/code\u003e,\n  which is located in the same package.\n\u003cli\u003eA \u003ccode\u003e[language]_proto_library\u003c/code\u003e that wraps a \u003ccode\u003eproto_library\u003c/code\u003e\n  named \u003ccode\u003efoo_proto\u003c/code\u003e should be called \u003ccode\u003efoo_[language]_proto\u003c/code\u003e,\n  and be located in the same package.\n\u003c/ul\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of \u003ccode\u003e.proto\u003c/code\u003e and \u003ccode\u003e.protodevel\u003c/code\u003e files that are\nprocessed to create the target. This is usually a non empty list. One usecase\nwhere \u003ccode\u003esrcs\u003c/code\u003e can be empty is an \u003ci\u003ealias-library\u003c/i\u003e. This is a\nproto_library rule having one or more other proto_library in \u003ccode\u003edeps\u003c/code\u003e.\nThis pattern can be used to e.g. export a public api under a persistent name.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other \u003ccode\u003eproto_library\u003c/code\u003e rules that the target depends upon.\nA \u003ccode\u003eproto_library\u003c/code\u003e may only depend on other \u003ccode\u003eproto_library\u003c/code\u003e\ntargets. It may not depend on language-specific libraries.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports",
        "doc": "List of proto_library targets that can be referenced via \"import public\" in the\nproto source.\nIt\u0027s an error if you use \"import public\" but do not list the corresponding library\nin the exports attribute.\nNote that you have list the library both in deps and exports since not all\nlang_proto_library implementations have been changed yet.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "strip_import_prefix",
        "doc": "The prefix to strip from the paths of the .proto files in this rule.\n\n\u003cp\u003eWhen set, .proto source files in the \u003ccode\u003esrcs\u003c/code\u003e attribute of this rule are\naccessible at their path with this prefix cut off.\n\n\u003cp\u003eIf it\u0027s a relative path (not starting with a slash), it\u0027s taken as a package-relative\none. If it\u0027s an absolute one, it\u0027s understood as a repository-relative path.\n\n\u003cp\u003eThe prefix in the \u003ccode\u003eimport_prefix\u003c/code\u003e attribute is added after this prefix is\nstripped.",
        "defaultValue": "\"/\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "import_prefix",
        "doc": "The prefix to add to the paths of the .proto files in this rule.\n\n\u003cp\u003eWhen set, the .proto source files in the \u003ccode\u003esrcs\u003c/code\u003e attribute of this rule are\naccessible at is the value of this attribute prepended to their repository-relative path.\n\n\u003cp\u003eThe prefix in the \u003ccode\u003estrip_import_prefix\u003c/code\u003e attribute is removed before this\nprefix is added.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "allow_exports",
        "doc": "An optional allowlist that prevents proto library to be reexported or used in\nlang_proto_library that is not in one of the listed packages.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "py_proto_library",
    "doc": "      Use \u003ccode\u003epy_proto_library\u003c/code\u003e to generate Python libraries from \u003ccode\u003e.proto\u003c/code\u003e files.\n\n      The convention is to name the \u003ccode\u003epy_proto_library\u003c/code\u003e rule \u003ccode\u003efoo_py_pb2\u003c/code\u003e,\n      when it is wrapping \u003ccode\u003eproto_library\u003c/code\u003e rule \u003ccode\u003efoo_proto\u003c/code\u003e.\n\n      \u003ccode\u003edeps\u003c/code\u003e must point to a \u003ccode\u003eproto_library\u003c/code\u003e rule.\n\n      Example:\n\n\u003ccode\u003estarlark\npy_library(\n    name \u003d \"lib\",\n    deps \u003d [\":foo_py_pb2\"],\n)\n\npy_proto_library(\n    name \u003d \"foo_py_pb2\",\n    deps \u003d [\":foo_proto\"],\n)\n\nproto_library(\n    name \u003d \"foo_proto\",\n    srcs \u003d [\"foo.proto\"],\n)\n\u003c/code\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of \u003ccode\u003eproto_library\u003c/code\u003e rules to generate Python libraries for.\n\nUsually this is just the one target: the proto library of interest.\nIt can be any target providing \u003ccode\u003eProtoInfo\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "proto_lang_toolchain",
    "doc": "\u003cp\u003eIf using Bazel, please load the rule from \nhttps://github.com/bazelbuild/rules_proto.\n\n\u003cp\u003eSpecifies how a LANG_proto_library rule (e.g., \u003ccode\u003ejava_proto_library\u003c/code\u003e) should invoke the\nproto-compiler.\nSome LANG_proto_library rules allow specifying which toolchain to use using command-line flags;\nconsult their documentation.\n\n\u003cp\u003eNormally you should not write those kind of rules unless you want to\ntune your Java compiler.\n\n\u003cp\u003eThere\u0027s no compiler. The proto-compiler is taken from the proto_library rule we attach to. It is\npassed as a command-line flag to Blaze.\nSeveral features require a proto-compiler to be invoked on the proto_library rule itself.\nIt\u0027s beneficial to enforce the compiler that LANG_proto_library uses is the same as the one\n\u003ccode\u003eproto_library\u003c/code\u003e does.\n\n\u003ch4\u003eExamples\u003c/h4\u003e\n\n\u003cp\u003eA simple example would be:\n\u003cpre\u003e\u003ccode class\u003d\"lang-starlark\"\u003e\nproto_lang_toolchain(\n    name \u003d \"javalite_toolchain\",\n    command_line \u003d \"--javalite_out\u003dshared,immutable:$(OUT)\",\n    plugin \u003d \":javalite_plugin\",\n    runtime \u003d \":protobuf_lite\",\n)\n\u003c/code\u003e\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "progress_message",
        "doc": "This value will be set as the progress message on protoc action.",
        "defaultValue": "\"Generating proto_library %{label}\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "mnemonic",
        "doc": "This value will be set as the mnemonic on protoc action.",
        "defaultValue": "\"GenProto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "command_line",
        "doc": "This value will be passed to proto-compiler to generate the code. Only include the parts\nspecific to this code-generator/plugin (e.g., do not include -I parameters)\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e$(OUT)\u003c/code\u003e is LANG_proto_library-specific. The rules are expected to define\n      how they interpret this variable. For Java, for example, $(OUT) will be replaced with\n      the src-jar filename to create.\u003c/li\u003e\n\u003c/ul\u003e",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "output_files",
        "doc": "Controls how \u003ccode\u003e$(OUT)\u003c/code\u003e in \u003ccode\u003ecommand_line\u003c/code\u003e is formatted, either by\na path to a single file or output directory in case of multiple files.\nPossible values are: \"single\", \"multiple\".",
        "defaultValue": "\"legacy\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugin_format_flag",
        "doc": "If provided, this value will be passed to proto-compiler to use the plugin.\nThe value must contain a single %s which is replaced with plugin executable.\n\u003ccode\u003e--plugin\u003dprotoc-gen-PLUGIN\u003d\u0026lt;executable\u0026gt;.\u003c/code\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugin",
        "doc": "If provided, will be made available to the action that calls the proto-compiler, and will be\npassed to the proto-compiler:\n\u003ccode\u003e--plugin\u003dprotoc-gen-PLUGIN\u003d\u0026lt;executable\u0026gt;.\u003c/code\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime",
        "doc": "A language-specific library that the generated code is compiled against.\nThe exact behavior is LANG_proto_library-specific.\nJava, for example, should compile against the runtime.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "blacklisted_protos",
        "doc": "No code will be generated for files in the \u003ccode\u003esrcs\u003c/code\u003e attribute of\n\u003ccode\u003eblacklisted_protos\u003c/code\u003e.\nThis is used for .proto files that are already linked into proto runtimes, such as\n\u003ccode\u003eany.proto\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "allowlist_different_package",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "toolchain_type",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "protoc_minimal_do_not_use",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "proto_toolchain",
    "doc": "",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "progress_message",
        "defaultValue": "\"Generating Descriptor Set proto_library %{label}\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "mnemonic",
        "defaultValue": "\"GenProtoDescriptorSet\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "command_line",
        "defaultValue": "\"--descriptor_set_out\u003d%s\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "output_files",
        "defaultValue": "\"single\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "proto_compiler",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "py_binary",
    "doc": "",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "The list of files need by this library at runtime. See comments about\nthe \u003ccode\u003edata\u003c/code\u003e attribute typically defined by rules.\n\nThere is no \u003ccode\u003epy_embed_data\u003c/code\u003e like there is \u003ccode\u003ecc_embed_data\u003c/code\u003e and \u003ccode\u003ego_embed_data\u003c/code\u003e.\nThis is because Python has a concept of runtime resources.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "distribs",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "doc": "Dictionary of strings; optional; values are subject to \u003ccode\u003e$(location)\u003c/code\u003e and \"Make\nvariable\" substitution.\n\nSpecifies additional environment variables to set when the target is executed by\n\u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003erun\u003c/code\u003e.",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\n* \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. **This setting should be avoided**, since it potentially kills\n  remote caching for the binary and any downstream actions that depend on it.\n* \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This gives\n  good build result caching.\n* \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\nStamped binaries are not rebuilt unless their dependencies change.\n\nWARNING: Stamping can harm build performance by reducing cache hits and should\nbe avoided if possible.",
        "defaultValue": "-1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of additional libraries to be linked in to the target.\nSee comments about\nthe [\u003ccode\u003edeps\u003c/code\u003e attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically \u003ccode\u003epy_library\u003c/code\u003e rules.\n\nTargets that only provide data files used at runtime belong in the \u003ccode\u003edata\u003c/code\u003e\nattribute.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile",
        "doc": "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Allow the downstream binary decide if precompiled files are used.\n* \u003ccode\u003eenabled\u003c/code\u003e: Compile Python source files at build time.\n* \u003ccode\u003edisabled\u003c/code\u003e: Don\u0027t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}\u003ccode\u003e--precompile\u003c/code\u003e flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}\u003ccode\u003epyc_collection\u003c/code\u003e attribute for transitively enabling precompiling on\n  a per-target basis.\n* The Precompiling docs for a guide about using precompiling.\n:::",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_invalidation_mode",
        "doc": "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* \u003ccode\u003eauto\u003c/code\u003e: The effective value will be automatically determined by other build\n  settings.\n* \u003ccode\u003echecked_hash\u003c/code\u003e: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* \u003ccode\u003eunchecked_hash\u003c/code\u003e: Always use the pyc file; don\u0027t check the pyc\u0027s hash against\n  the source file. This is most useful when the code won\u0027t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_optimize_level",
        "doc": "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the \u003ccode\u003ecompile()\u003c/code\u003e function\u0027s\n\u003ccode\u003eoptimize\u003c/code\u003e arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value \u003ccode\u003e-1\u003c/code\u003e means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs.",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_source_retention",
        "doc": "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Inherit the value from the {flag}\u003ccode\u003e--precompile_source_retention\u003c/code\u003e flag.\n* \u003ccode\u003ekeep_source\u003c/code\u003e: Include the original Python source.\n* \u003ccode\u003eomit_source\u003c/code\u003e: Don\u0027t include the original py source.",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_deps",
        "doc": "Dependencies providing type definitions the library needs.\n\nThese are dependencies that satisfy imports guarded by \u003ccode\u003etyping.TYPE_CHECKING\u003c/code\u003e.\nThese are build-time only dependencies and not included as part of a runnable\nprogram (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_srcs",
        "doc": "Type definition files for the library.\n\nThese are typically \u003ccode\u003e.pyi\u003c/code\u003e files, but other file types for type-checker specific\nformats are allowed. These files are build-time only dependencies and not included\nas part of a runnable program (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n\u003ccode\u003e.py\u003c/code\u003e files belong in \u003ccode\u003esrcs\u003c/code\u003e and library targets belong in \u003ccode\u003edeps\u003c/code\u003e. Other binary\nfiles that may be needed at run time belong in \u003ccode\u003edata\u003c/code\u003e.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs_version",
        "doc": "Defunct, unused, does nothing.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "imports",
        "doc": "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to \u003ccode\u003ePYTHONPATH\u003c/code\u003e by \u003ccode\u003epy_binary\u003c/code\u003e rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with \u003ccode\u003e/\u003c/code\u003e) and paths that references a path\nabove the execution root are not allowed and will result in an error.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interpreter_args",
        "doc": "Arguments that are only applicable to the interpreter.\n\nThe args an interpreter supports are specific to the interpreter. For\nCPython, see https://docs.python.org/3/using/cmdline.html.\n\n:::{note}\nOnly supported for {obj}\u003ccode\u003e--bootstrap_impl\u003dscript\u003c/code\u003e. Ignored otherwise.\n:::\n\n:::{seealso}\nThe {obj}\u003ccode\u003eRULES_PYTHON_ADDITIONAL_INTERPRETER_ARGS\u003c/code\u003e environment variable\n:::\n\n:::{versionadded} 1.3.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "legacy_create_init",
        "doc": "Whether to implicitly create empty \u003ccode\u003e__init__.py\u003c/code\u003e files in the runfiles tree.\nThese are created in every directory containing Python source code or shared\nlibraries, and every parent directory of those directories, excluding the repo\nroot directory. The default, \u003ccode\u003e-1\u003c/code\u003e (auto), means true unless\n\u003ccode\u003e--incompatible_default_to_explicit_init_py\u003c/code\u003e is used. If false, the user is\nresponsible for creating (possibly empty) \u003ccode\u003e__init__.py\u003c/code\u003e files and adding them to\nthe \u003ccode\u003esrcs\u003c/code\u003e of Python targets as required.",
        "defaultValue": "-1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main",
        "doc": "Optional; the name of the source file that is the main entry point of the\napplication. This file must also be listed in \u003ccode\u003esrcs\u003c/code\u003e. If left unspecified,\n\u003ccode\u003ename\u003c/code\u003e, with \u003ccode\u003e.py\u003c/code\u003e appended, is used instead. If \u003ccode\u003ename\u003c/code\u003e does not match any\nfilename in \u003ccode\u003esrcs\u003c/code\u003e, \u003ccode\u003emain\u003c/code\u003e must be specified.\n\nThis is mutually exclusive with {obj}\u003ccode\u003emain_module\u003c/code\u003e.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_module",
        "doc": "Module name to execute as the main program.\n\nWhen set, \u003ccode\u003esrcs\u003c/code\u003e is not required, and it is assumed the module is\nprovided by a dependency.\n\nSee https://docs.python.org/3/using/cmdline.html#cmdoption-m for more\ninformation about running modules as the main program.\n\nThis is mutually exclusive with {obj}\u003ccode\u003emain\u003c/code\u003e.\n\n:::{versionadded} 1.3.0\n:::",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyc_collection",
        "doc": "Determines whether pyc files from dependencies should be manually included.\n\nValid values are:\n* \u003ccode\u003einherit\u003c/code\u003e: Inherit the value from {flag}\u003ccode\u003e--precompile\u003c/code\u003e.\n* \u003ccode\u003einclude_pyc\u003c/code\u003e: Add implicitly generated pyc files from dependencies. i.e.\n  pyc files for targets that specify {attr}\u003ccode\u003eprecompile\u003d\"inherit\"\u003c/code\u003e.\n* \u003ccode\u003edisabled\u003c/code\u003e: Don\u0027t add implicitly generated pyc files. Note that\n  pyc files may still come from dependencies that enable precompiling at the\n  target level.",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "python_version",
        "doc": "The Python version this target should use.\n\nThe value should be in \u003ccode\u003eX.Y\u003c/code\u003e or \u003ccode\u003eX.Y.Z\u003c/code\u003e (or compatible) format. If empty or\nunspecified, the incoming configuration\u0027s {obj}\u003ccode\u003e--python_version\u003c/code\u003e flag is\ninherited. For backwards compatibility, the values \u003ccode\u003ePY2\u003c/code\u003e and \u003ccode\u003ePY3\u003c/code\u003e are\naccepted, but treated as an empty/unspecified value.\n\n:::{note}\nIn order for the requested version to be used, there must be a\ntoolchain configured to match the Python version. If there isn\u0027t, then it\nmay be silently ignored, or an error may occur, depending on the toolchain\nconfiguration.\n:::\n\n:::{versionchanged} 1.1.0\n\nThis attribute was changed from only accepting \u003ccode\u003ePY2\u003c/code\u003e and \u003ccode\u003ePY3\u003c/code\u003e values to\naccepting arbitrary Python versions.\n:::",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "py_library",
    "doc": "A library of Python code that can be depended upon.\n\nDefault outputs:\n* The input Python sources\n* The precompiled artifacts from the sources.\n\nNOTE: Precompilation affects which of the default outputs are included in the\nresulting runfiles. See the precompile-related attributes and flags for\nmore information.\n\n:::{versionchanged} 0.37.0\nSource files are no longer added to the runfiles directly.\n:::",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "The list of files need by this library at runtime. See comments about\nthe \u003ccode\u003edata\u003c/code\u003e attribute typically defined by rules.\n\nThere is no \u003ccode\u003epy_embed_data\u003c/code\u003e like there is \u003ccode\u003ecc_embed_data\u003c/code\u003e and \u003ccode\u003ego_embed_data\u003c/code\u003e.\nThis is because Python has a concept of runtime resources.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "distribs",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of additional libraries to be linked in to the target.\nSee comments about\nthe [\u003ccode\u003edeps\u003c/code\u003e attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically \u003ccode\u003epy_library\u003c/code\u003e rules.\n\nTargets that only provide data files used at runtime belong in the \u003ccode\u003edata\u003c/code\u003e\nattribute.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile",
        "doc": "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Allow the downstream binary decide if precompiled files are used.\n* \u003ccode\u003eenabled\u003c/code\u003e: Compile Python source files at build time.\n* \u003ccode\u003edisabled\u003c/code\u003e: Don\u0027t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}\u003ccode\u003e--precompile\u003c/code\u003e flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}\u003ccode\u003epyc_collection\u003c/code\u003e attribute for transitively enabling precompiling on\n  a per-target basis.\n* The Precompiling docs for a guide about using precompiling.\n:::",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_invalidation_mode",
        "doc": "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* \u003ccode\u003eauto\u003c/code\u003e: The effective value will be automatically determined by other build\n  settings.\n* \u003ccode\u003echecked_hash\u003c/code\u003e: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* \u003ccode\u003eunchecked_hash\u003c/code\u003e: Always use the pyc file; don\u0027t check the pyc\u0027s hash against\n  the source file. This is most useful when the code won\u0027t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_optimize_level",
        "doc": "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the \u003ccode\u003ecompile()\u003c/code\u003e function\u0027s\n\u003ccode\u003eoptimize\u003c/code\u003e arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value \u003ccode\u003e-1\u003c/code\u003e means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs.",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_source_retention",
        "doc": "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Inherit the value from the {flag}\u003ccode\u003e--precompile_source_retention\u003c/code\u003e flag.\n* \u003ccode\u003ekeep_source\u003c/code\u003e: Include the original Python source.\n* \u003ccode\u003eomit_source\u003c/code\u003e: Don\u0027t include the original py source.",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_deps",
        "doc": "Dependencies providing type definitions the library needs.\n\nThese are dependencies that satisfy imports guarded by \u003ccode\u003etyping.TYPE_CHECKING\u003c/code\u003e.\nThese are build-time only dependencies and not included as part of a runnable\nprogram (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_srcs",
        "doc": "Type definition files for the library.\n\nThese are typically \u003ccode\u003e.pyi\u003c/code\u003e files, but other file types for type-checker specific\nformats are allowed. These files are build-time only dependencies and not included\nas part of a runnable program (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n\u003ccode\u003e.py\u003c/code\u003e files belong in \u003ccode\u003esrcs\u003c/code\u003e and library targets belong in \u003ccode\u003edeps\u003c/code\u003e. Other binary\nfiles that may be needed at run time belong in \u003ccode\u003edata\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs_version",
        "doc": "Defunct, unused, does nothing.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "imports",
        "doc": "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to \u003ccode\u003ePYTHONPATH\u003c/code\u003e by \u003ccode\u003epy_binary\u003c/code\u003e rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with \u003ccode\u003e/\u003c/code\u003e) and paths that references a path\nabove the execution root are not allowed and will result in an error.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "test_rules.py_test",
    "doc": "",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "The list of files need by this library at runtime. See comments about\nthe \u003ccode\u003edata\u003c/code\u003e attribute typically defined by rules.\n\nThere is no \u003ccode\u003epy_embed_data\u003c/code\u003e like there is \u003ccode\u003ecc_embed_data\u003c/code\u003e and \u003ccode\u003ego_embed_data\u003c/code\u003e.\nThis is because Python has a concept of runtime resources.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "distribs",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "doc": "Dictionary of strings; optional; values are subject to \u003ccode\u003e$(location)\u003c/code\u003e and \"Make\nvariable\" substitution.\n\nSpecifies additional environment variables to set when the target is executed by\n\u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003erun\u003c/code\u003e.",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\n* \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. **This setting should be avoided**, since it potentially kills\n  remote caching for the binary and any downstream actions that depend on it.\n* \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This gives\n  good build result caching.\n* \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\nStamped binaries are not rebuilt unless their dependencies change.\n\nWARNING: Stamping can harm build performance by reducing cache hits and should\nbe avoided if possible.",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of additional libraries to be linked in to the target.\nSee comments about\nthe [\u003ccode\u003edeps\u003c/code\u003e attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically \u003ccode\u003epy_library\u003c/code\u003e rules.\n\nTargets that only provide data files used at runtime belong in the \u003ccode\u003edata\u003c/code\u003e\nattribute.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile",
        "doc": "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Allow the downstream binary decide if precompiled files are used.\n* \u003ccode\u003eenabled\u003c/code\u003e: Compile Python source files at build time.\n* \u003ccode\u003edisabled\u003c/code\u003e: Don\u0027t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}\u003ccode\u003e--precompile\u003c/code\u003e flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}\u003ccode\u003epyc_collection\u003c/code\u003e attribute for transitively enabling precompiling on\n  a per-target basis.\n* The Precompiling docs for a guide about using precompiling.\n:::",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_invalidation_mode",
        "doc": "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* \u003ccode\u003eauto\u003c/code\u003e: The effective value will be automatically determined by other build\n  settings.\n* \u003ccode\u003echecked_hash\u003c/code\u003e: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* \u003ccode\u003eunchecked_hash\u003c/code\u003e: Always use the pyc file; don\u0027t check the pyc\u0027s hash against\n  the source file. This is most useful when the code won\u0027t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_optimize_level",
        "doc": "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the \u003ccode\u003ecompile()\u003c/code\u003e function\u0027s\n\u003ccode\u003eoptimize\u003c/code\u003e arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value \u003ccode\u003e-1\u003c/code\u003e means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs.",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "precompile_source_retention",
        "doc": "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* \u003ccode\u003einherit\u003c/code\u003e: Inherit the value from the {flag}\u003ccode\u003e--precompile_source_retention\u003c/code\u003e flag.\n* \u003ccode\u003ekeep_source\u003c/code\u003e: Include the original Python source.\n* \u003ccode\u003eomit_source\u003c/code\u003e: Don\u0027t include the original py source.",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_deps",
        "doc": "Dependencies providing type definitions the library needs.\n\nThese are dependencies that satisfy imports guarded by \u003ccode\u003etyping.TYPE_CHECKING\u003c/code\u003e.\nThese are build-time only dependencies and not included as part of a runnable\nprogram (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyi_srcs",
        "doc": "Type definition files for the library.\n\nThese are typically \u003ccode\u003e.pyi\u003c/code\u003e files, but other file types for type-checker specific\nformats are allowed. These files are build-time only dependencies and not included\nas part of a runnable program (packaging rules may include them, however).\n\n:::{versionadded} 1.1.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n\u003ccode\u003e.py\u003c/code\u003e files belong in \u003ccode\u003esrcs\u003c/code\u003e and library targets belong in \u003ccode\u003edeps\u003c/code\u003e. Other binary\nfiles that may be needed at run time belong in \u003ccode\u003edata\u003c/code\u003e.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs_version",
        "doc": "Defunct, unused, does nothing.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "imports",
        "doc": "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to \u003ccode\u003ePYTHONPATH\u003c/code\u003e by \u003ccode\u003epy_binary\u003c/code\u003e rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with \u003ccode\u003e/\u003c/code\u003e) and paths that references a path\nabove the execution root are not allowed and will result in an error.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interpreter_args",
        "doc": "Arguments that are only applicable to the interpreter.\n\nThe args an interpreter supports are specific to the interpreter. For\nCPython, see https://docs.python.org/3/using/cmdline.html.\n\n:::{note}\nOnly supported for {obj}\u003ccode\u003e--bootstrap_impl\u003dscript\u003c/code\u003e. Ignored otherwise.\n:::\n\n:::{seealso}\nThe {obj}\u003ccode\u003eRULES_PYTHON_ADDITIONAL_INTERPRETER_ARGS\u003c/code\u003e environment variable\n:::\n\n:::{versionadded} 1.3.0\n:::",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "legacy_create_init",
        "doc": "Whether to implicitly create empty \u003ccode\u003e__init__.py\u003c/code\u003e files in the runfiles tree.\nThese are created in every directory containing Python source code or shared\nlibraries, and every parent directory of those directories, excluding the repo\nroot directory. The default, \u003ccode\u003e-1\u003c/code\u003e (auto), means true unless\n\u003ccode\u003e--incompatible_default_to_explicit_init_py\u003c/code\u003e is used. If false, the user is\nresponsible for creating (possibly empty) \u003ccode\u003e__init__.py\u003c/code\u003e files and adding them to\nthe \u003ccode\u003esrcs\u003c/code\u003e of Python targets as required.",
        "defaultValue": "-1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main",
        "doc": "Optional; the name of the source file that is the main entry point of the\napplication. This file must also be listed in \u003ccode\u003esrcs\u003c/code\u003e. If left unspecified,\n\u003ccode\u003ename\u003c/code\u003e, with \u003ccode\u003e.py\u003c/code\u003e appended, is used instead. If \u003ccode\u003ename\u003c/code\u003e does not match any\nfilename in \u003ccode\u003esrcs\u003c/code\u003e, \u003ccode\u003emain\u003c/code\u003e must be specified.\n\nThis is mutually exclusive with {obj}\u003ccode\u003emain_module\u003c/code\u003e.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_module",
        "doc": "Module name to execute as the main program.\n\nWhen set, \u003ccode\u003esrcs\u003c/code\u003e is not required, and it is assumed the module is\nprovided by a dependency.\n\nSee https://docs.python.org/3/using/cmdline.html#cmdoption-m for more\ninformation about running modules as the main program.\n\nThis is mutually exclusive with {obj}\u003ccode\u003emain\u003c/code\u003e.\n\n:::{versionadded} 1.3.0\n:::",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyc_collection",
        "doc": "Determines whether pyc files from dependencies should be manually included.\n\nValid values are:\n* \u003ccode\u003einherit\u003c/code\u003e: Inherit the value from {flag}\u003ccode\u003e--precompile\u003c/code\u003e.\n* \u003ccode\u003einclude_pyc\u003c/code\u003e: Add implicitly generated pyc files from dependencies. i.e.\n  pyc files for targets that specify {attr}\u003ccode\u003eprecompile\u003d\"inherit\"\u003c/code\u003e.\n* \u003ccode\u003edisabled\u003c/code\u003e: Don\u0027t add implicitly generated pyc files. Note that\n  pyc files may still come from dependencies that enable precompiling at the\n  target level.",
        "defaultValue": "\"inherit\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "python_version",
        "doc": "The Python version this target should use.\n\nThe value should be in \u003ccode\u003eX.Y\u003c/code\u003e or \u003ccode\u003eX.Y.Z\u003c/code\u003e (or compatible) format. If empty or\nunspecified, the incoming configuration\u0027s {obj}\u003ccode\u003e--python_version\u003c/code\u003e flag is\ninherited. For backwards compatibility, the values \u003ccode\u003ePY2\u003c/code\u003e and \u003ccode\u003ePY3\u003c/code\u003e are\naccepted, but treated as an empty/unspecified value.\n\n:::{note}\nIn order for the requested version to be used, there must be a\ntoolchain configured to match the Python version. If there isn\u0027t, then it\nmay be silently ignored, or an error may occur, depending on the toolchain\nconfiguration.\n:::\n\n:::{versionchanged} 1.1.0\n\nThis attribute was changed from only accepting \u003ccode\u003ePY2\u003c/code\u003e and \u003ccode\u003ePY3\u003c/code\u003e values to\naccepting arbitrary Python versions.\n:::",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "doc": "List of strings; optional\n\nSpecifies additional environment variables to inherit from the external\nenvironment when the test is executed by bazel test.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "py_runtime",
    "doc": "Represents a Python runtime used to execute Python code.\n\nA \u003ccode\u003epy_runtime\u003c/code\u003e target can represent either a *platform runtime* or an *in-build\nruntime*. A platform runtime accesses a system-installed interpreter at a known\npath, whereas an in-build runtime points to an executable target that acts as\nthe interpreter. In both cases, an \"interpreter\" means any executable binary or\nwrapper script that is capable of running a Python script passed on the command\nline, following the same conventions as the standard CPython interpreter.\n\nA platform runtime is by its nature non-hermetic. It imposes a requirement on\nthe target platform to have an interpreter located at a specific path. An\nin-build runtime may or may not be hermetic, depending on whether it points to\na checked-in interpreter or a wrapper script that accesses the system\ninterpreter.\n\nExample\n\n\u003ccode\u003e\nload(\"@rules_python//python:py_runtime.bzl\", \"py_runtime\")\n\npy_runtime(\n    name \u003d \"python-2.7.12\",\n    files \u003d glob([\"python-2.7.12/**\"]),\n    interpreter \u003d \"python-2.7.12/bin/python\",\n)\n\npy_runtime(\n    name \u003d \"python-3.6.0\",\n    interpreter_path \u003d \"/opt/pyenv/versions/3.6.0/bin/python\",\n)\n\u003c/code\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "abi_flags",
        "doc": "The runtime\u0027s ABI flags, i.e. \u003ccode\u003esys.abiflags\u003c/code\u003e.\n\nIf not set, then it will be set based on flags.",
        "defaultValue": "\"\u003cAUTO\u003e\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootstrap_template",
        "doc": "The bootstrap script template file to use. Should have %python_binary%,\n%workspace_name%, %main%, and %imports%.\n\nThis template, after expansion, becomes the executable file used to start the\nprocess, so it is responsible for initial bootstrapping actions such as finding\nthe Python interpreter, runfiles, and constructing an environment to run the\nintended Python application.\n\nWhile this attribute is currently optional, it will become required when the\nPython rules are moved out of Bazel itself.\n\nThe exact variable names expanded is an unstable API and is subject to change.\nThe API will become more stable when the Python rules are moved out of Bazel\nitself.\n\nSee @bazel_tools//tools/python:python_bootstrap_template.txt for more variables.",
        "defaultValue": "\"@rules_python//python/private:bootstrap_template\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "coverage_tool",
        "doc": "This is a target to use for collecting code coverage information from\n{rule}\u003ccode\u003epy_binary\u003c/code\u003e and {rule}\u003ccode\u003epy_test\u003c/code\u003e targets.\n\nIf set, the target must either produce a single file or be an executable target.\nThe path to the single file, or the executable if the target is executable,\ndetermines the entry point for the python coverage tool.  The target and its\nrunfiles will be added to the runfiles when coverage is enabled.\n\nThe entry point for the tool must be loadable by a Python interpreter (e.g. a\n\u003ccode\u003e.py\u003c/code\u003e or \u003ccode\u003e.pyc\u003c/code\u003e file).  It must accept the command line arguments\nof \u003ccode\u003ecoverage.py\u003c/code\u003e, at least including\nthe \u003ccode\u003erun\u003c/code\u003e and \u003ccode\u003elcov\u003c/code\u003e subcommands.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "files",
        "doc": "For an in-build runtime, this is the set of files comprising this runtime.\nThese files will be added to the runfiles of Python binaries that use this\nruntime. For a platform runtime this attribute must not be set.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "implementation_name",
        "doc": "The Python implementation name (\u003ccode\u003esys.implementation.name\u003c/code\u003e)",
        "defaultValue": "\"cpython\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interpreter",
        "doc": "For an in-build runtime, this is the target to invoke as the interpreter. It\ncan be either of:\n\n* A single file, which will be the interpreter binary. It\u0027s assumed such\n  interpreters are either self-contained single-file executables or any\n  supporting files are specified in \u003ccode\u003efiles\u003c/code\u003e.\n* An executable target. The target\u0027s executable will be the interpreter binary.\n  Any other default outputs (\u003ccode\u003etarget.files\u003c/code\u003e) and plain files runfiles\n  (\u003ccode\u003erunfiles.files\u003c/code\u003e) will be automatically included as if specified in the\n  \u003ccode\u003efiles\u003c/code\u003e attribute.\n\n  NOTE: the runfiles of the target may not yet be properly respected/propagated\n  to consumers of the toolchain/interpreter, see\n  bazel-contrib/rules_python/issues/1612\n\nFor a platform runtime (i.e. \u003ccode\u003einterpreter_path\u003c/code\u003e being set) this attribute must\nnot be set.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interpreter_path",
        "doc": "For a platform runtime, this is the absolute path of a Python interpreter on\nthe target platform. For an in-build runtime this attribute must not be set.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "interpreter_version_info",
        "doc": "Version information about the interpreter this runtime provides.\n\nIf not specified, uses {obj}\u003ccode\u003e--python_version\u003c/code\u003e\n\nThe supported keys match the names for \u003ccode\u003esys.version_info\u003c/code\u003e. While the input\nvalues are strings, most are converted to ints. The supported keys are:\n  * major: int, the major version number\n  * minor: int, the minor version number\n  * micro: optional int, the micro version number\n  * releaselevel: optional str, the release level\n  * serial: optional int, the serial number of the release\n\n:::{versionchanged} 0.36.0\n{obj}\u003ccode\u003e--python_version\u003c/code\u003e determines the default value.\n:::",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pyc_tag",
        "doc": "Optional string; the tag portion of a pyc filename, e.g. the \u003ccode\u003ecpython-39\u003c/code\u003e infix\nof \u003ccode\u003efoo.cpython-39.pyc\u003c/code\u003e. See PEP 3147. If not specified, it will be computed\nfrom \u003ccode\u003eimplementation_name\u003c/code\u003e and \u003ccode\u003einterpreter_version_info\u003c/code\u003e. If no pyc_tag is\navailable, then only source-less pyc generation will function correctly.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "python_version",
        "doc": "Whether this runtime is for Python major version 2 or 3. Valid values are \u003ccode\u003e\"PY2\"\u003c/code\u003e\nand \u003ccode\u003e\"PY3\"\u003c/code\u003e.\n\nThe default value is controlled by the \u003ccode\u003e--incompatible_py3_is_default\u003c/code\u003e flag.\nHowever, in the future this attribute will be mandatory and have no default\nvalue.",
        "defaultValue": "\"PY3\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "site_init_template",
        "doc": "The template to use for the binary-specific site-init hook run by the\ninterpreter at startup.\n\n:::{versionadded} 0.41.0\n:::",
        "defaultValue": "\"@rules_python//python/private:site_init_template\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stage2_bootstrap_template",
        "doc": "The template to use when two stage bootstrapping is enabled\n\n:::{seealso}\n{obj}\u003ccode\u003ePyRuntimeInfo.stage2_bootstrap_template\u003c/code\u003e and {obj}\u003ccode\u003e--bootstrap_impl\u003c/code\u003e\n:::",
        "defaultValue": "\"@rules_python//python/private:stage2_bootstrap_template\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stub_shebang",
        "doc": "\"Shebang\" expression prepended to the bootstrapping Python stub script\nused when executing {rule}\u003ccode\u003epy_binary\u003c/code\u003e targets.\n\nSee https://github.com/bazelbuild/bazel/issues/8685 for\nmotivation.\n\nDoes not apply to Windows.",
        "defaultValue": "\"#!/usr/bin/env python3\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "zip_main_template",
        "doc": "The template to use for a zip\u0027s top-level \u003ccode\u003e__main__.py\u003c/code\u003e file.\n\nThis becomes the entry point executed when \u003ccode\u003epython foo.zip\u003c/code\u003e is run.\n\n:::{seealso}\nThe {obj}\u003ccode\u003ePyRuntimeInfo.zip_main_template\u003c/code\u003e field.\n:::",
        "defaultValue": "\"@rules_python//python/private:zip_main_template\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "sh_binary",
    "doc": "\u003cp\u003e\n  The \u003ccode\u003esh_binary\u003c/code\u003e rule is used to declare executable shell scripts.\n  (\u003ccode\u003esh_binary\u003c/code\u003e is a misnomer: its outputs aren\u0027t necessarily binaries.) This rule ensures\n  that all dependencies are built, and appear in the \u003ccode\u003erunfiles\u003c/code\u003e area at execution time.\n  We recommend that you name your \u003ccode\u003esh_binary()\u003c/code\u003e rules after the name of the script minus\n  the extension (e.g. \u003ccode\u003e.sh\u003c/code\u003e); the rule name and the file name must be distinct.\n  \u003ccode\u003esh_binary\u003c/code\u003e respects shebangs, so any available interpreter may be used (eg.\n  \u003ccode\u003e#!/bin/zsh\u003c/code\u003e)\n\u003c/p\u003e\n\u003ch4 id\u003d\"sh_binary_examples\"\u003eExample\u003c/h4\u003e\n\u003cp\u003eFor a simple shell script with no dependencies and some data files:\n\u003c/p\u003e\n\u003cpre class\u003d\"code\"\u003e\nsh_binary(\n    name \u003d \"foo\",\n    srcs \u003d [\"foo.sh\"],\n    data \u003d glob([\"datafiles/*.txt\"]),\n)\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of input files.\n\u003cp\u003e\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\u0027s \u003ccode\u003esource\u003c/code\u003e\n  or \u003ccode\u003e.\u003c/code\u003e command.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of \"library\" targets to be aggregated into this target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003e\n  This attribute should be used to list other \u003ccode\u003esh_library\u003c/code\u003e rules that provide\n  interpreted program source code depended on by the code in \u003ccode\u003esrcs\u003c/code\u003e. The files\n  provided by these rules will be present among the \u003ccode\u003erunfiles\u003c/code\u003e of this target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "sh_library",
    "doc": "\u003cp\u003e\n  The main use for this rule is to aggregate together a logical\n  \"library\" consisting of related scripts\u0026mdash;programs in an\n  interpreted language that does not require compilation or linking,\n  such as the Bourne shell\u0026mdash;and any data those programs need at\n  run-time. Such \"libraries\" can then be used from\n  the \u003ccode\u003edata\u003c/code\u003e attribute of one or\n  more \u003ccode\u003esh_binary\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003cp\u003e\n  You can use the \u003ccode\u003efilegroup\u003c/code\u003e rule to aggregate data\n  files.\n\u003c/p\u003e\n\n\u003cp\u003e\n  In interpreted programming languages, there\u0027s not always a clear\n  distinction between \"code\" and \"data\": after all, the program is\n  just \"data\" from the interpreter\u0027s point of view. For this reason\n  this rule has three attributes which are all essentially equivalent:\n  \u003ccode\u003esrcs\u003c/code\u003e, \u003ccode\u003edeps\u003c/code\u003e and \u003ccode\u003edata\u003c/code\u003e.\n  The current implementation does not distinguish between the elements of these lists.\n  All three attributes accept rules, source files and generated files.\n  It is however good practice to use the attributes for their usual purpose (as with other rules).\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"sh_library_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\nsh_library(\n    name \u003d \"foo\",\n    data \u003d [\n        \":foo_service_script\",  # an sh_binary with srcs\n        \":deploy_foo\",  # another sh_binary with srcs\n    ],\n)\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of input files.\n\u003cp\u003e\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\u0027s \u003ccode\u003esource\u003c/code\u003e\n  or \u003ccode\u003e.\u003c/code\u003e command.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of \"library\" targets to be aggregated into this target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003e\n  This attribute should be used to list other \u003ccode\u003esh_library\u003c/code\u003e rules that provide\n  interpreted program source code depended on by the code in \u003ccode\u003esrcs\u003c/code\u003e. The files\n  provided by these rules will be present among the \u003ccode\u003erunfiles\u003c/code\u003e of this target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "test_rules.sh_test",
    "doc": "\u003cp\u003e\n  The \u003ccode\u003esh_binary\u003c/code\u003e rule is used to declare executable shell scripts.\n  (\u003ccode\u003esh_binary\u003c/code\u003e is a misnomer: its outputs aren\u0027t necessarily binaries.) This rule ensures\n  that all dependencies are built, and appear in the \u003ccode\u003erunfiles\u003c/code\u003e area at execution time.\n  We recommend that you name your \u003ccode\u003esh_binary()\u003c/code\u003e rules after the name of the script minus\n  the extension (e.g. \u003ccode\u003e.sh\u003c/code\u003e); the rule name and the file name must be distinct.\n  \u003ccode\u003esh_binary\u003c/code\u003e respects shebangs, so any available interpreter may be used (eg.\n  \u003ccode\u003e#!/bin/zsh\u003c/code\u003e)\n\u003c/p\u003e\n\u003ch4 id\u003d\"sh_binary_examples\"\u003eExample\u003c/h4\u003e\n\u003cp\u003eFor a simple shell script with no dependencies and some data files:\n\u003c/p\u003e\n\u003cpre class\u003d\"code\"\u003e\nsh_binary(\n    name \u003d \"foo\",\n    srcs \u003d [\"foo.sh\"],\n    data \u003d glob([\"datafiles/*.txt\"]),\n)\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of input files.\n\u003cp\u003e\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\u0027s \u003ccode\u003esource\u003c/code\u003e\n  or \u003ccode\u003e.\u003c/code\u003e command.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of \"library\" targets to be aggregated into this target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.\n\u003cp\u003e\n  This attribute should be used to list other \u003ccode\u003esh_library\u003c/code\u003e rules that provide\n  interpreted program source code depended on by the code in \u003ccode\u003esrcs\u003c/code\u003e. The files\n  provided by these rules will be present among the \u003ccode\u003erunfiles\u003c/code\u003e of this target.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_binary",
    "doc": "\u003cp\u003e\n  Builds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule.\n  The wrapper shell script uses a classpath that includes, among other things, a jar file for each\n  library on which the binary depends. When running the wrapper shell script, any nonempty\n  \u003ccode\u003eJAVABIN\u003c/code\u003e environment variable will take precedence over the version specified via\n  Bazel\u0027s \u003ccode\u003e--java_runtime_version\u003c/code\u003e flag.\n\u003c/p\u003e\n\u003cp\u003e\n  The wrapper script accepts several unique flags. Refer to\n  \u003ccode\u003ejava_stub_template.txt\u003c/code\u003e\n  for a list of configurable flags and environment variables accepted by the wrapper.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_binary_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive, containing the class files and other\n    resources corresponding to the binary\u0027s direct dependencies.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e-src.jar\u003c/code\u003e: An archive containing the sources (\"source\n    jar\").\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e: A Java archive suitable for deployment (only\n    built if explicitly requested).\n    \u003cp\u003e\n      Building the \u003ccode\u003e\u0026lt;\u003cvar\u003ename\u003c/var\u003e\u0026gt;_deploy.jar\u003c/code\u003e target for your rule\n      creates a self-contained jar file with a manifest that allows it to be run with the\n      \u003ccode\u003ejava -jar\u003c/code\u003e command or with the wrapper script\u0027s \u003ccode\u003e--singlejar\u003c/code\u003e\n      option. Using the wrapper script is preferred to \u003ccode\u003ejava -jar\u003c/code\u003e because it\n      also passes the JVM flags and the options\n      to load native libraries.\n    \u003c/p\u003e\n    \u003cp\u003e\n      The deploy jar contains all the classes that would be found by a classloader that\n      searched the classpath from the binary\u0027s wrapper script from beginning to end. It also\n      contains the native libraries needed for dependencies. These are automatically loaded\n      into the JVM at runtime.\n    \u003c/p\u003e\n    \u003cp\u003eIf your target specifies a launcher\n      attribute, then instead of being a normal JAR file, the _deploy.jar will be a\n      native binary. This will contain the launcher plus any native (C++) dependencies of\n      your rule, all linked into a static binary. The actual jar file\u0027s bytes will be\n      appended to that native binary, creating a single binary blob containing both the\n      executable and the Java code. You can execute the resulting jar file directly\n      like you would execute any native binary.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy-src.jar\u003c/code\u003e: An archive containing the sources\n    collected from the transitive closure of the target. These will match the classes in the\n    \u003ccode\u003edeploy.jar\u003c/code\u003e except where jars have no matching source jar.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nIt is good practice to use the name of the source file that is the main entry point of the\napplication (minus the extension). For example, if your entry point is called\n\u003ccode\u003eMain.java\u003c/code\u003e, then your name could be \u003ccode\u003eMain\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A \u003ccode\u003edeps\u003c/code\u003e attribute is not allowed in a \u003ccode\u003ejava_binary\u003c/code\u003e rule without\n  \u003ccode\u003esrcs\u003c/code\u003e; such a rule requires a\n  \u003ccode\u003emain_class\u003c/code\u003e provided by\n  \u003ccode\u003eruntime_deps\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003eThe following code snippet illustrates a common mistake:\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_binary(\n    name \u003d \"DontDoThis\",\n    srcs \u003d [\n        \u003cvar\u003e...\u003c/var\u003e,\n        \u003ccode class\u003d\"deprecated\"\u003e\"GeneratedJavaFile.java\"\u003c/code\u003e,  # a generated .java file\n    ],\n    deps \u003d [\u003ccode class\u003d\"deprecated\"\u003e\":generating_rule\",\u003c/code\u003e],  # rule that generates that file\n)\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eDo this instead:\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_binary(\n    name \u003d \"DoThisInstead\",\n    srcs \u003d [\n        \u003cvar\u003e...\u003c/var\u003e,\n        \":generating_rule\",\n    ],\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if a\n\u003ccode\u003emain_class\u003c/code\u003e attribute specifies a\nclass on the runtime classpath or you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries to be linked in to the target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of data files to include in a Java jar.\n\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "doc": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deploy_env",
        "doc": "A list of other \u003ccode\u003ejava_binary\u003c/code\u003e targets which represent the deployment\nenvironment for this binary.\nSet this attribute when building a plugin which will be loaded by another\n\u003ccode\u003ejava_binary\u003c/code\u003e.\u003cbr/\u003e Setting this attribute excludes all dependencies from\nthe runtime classpath (and the deploy jar) of this binary that are shared between this\nbinary and the targets specified in \u003ccode\u003edeploy_env\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "launcher",
        "doc": "Specify a binary that will be used to run your Java program instead of the\nnormal \u003ccode\u003ebin/java\u003c/code\u003e program included with the JDK.\nThe target must be a \u003ccode\u003ecc_binary\u003c/code\u003e. Any \u003ccode\u003ecc_binary\u003c/code\u003e that\nimplements the\n\nJava Invocation API can be specified as a value for this attribute.\n\n\u003cp\u003eBy default, Bazel will use the normal JDK launcher (bin/java or java.exe).\u003c/p\u003e\n\n\u003cp\u003eThe related \u003ccode\u003e\n--java_launcher\u003c/code\u003e Bazel flag affects only those\n\u003ccode\u003ejava_binary\u003c/code\u003e and \u003ccode\u003ejava_test\u003c/code\u003e targets that have\n\u003ci\u003enot\u003c/i\u003e specified a \u003ccode\u003elauncher\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNote that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named \u003ccode\u003e{name}_nativedeps.so\u003c/code\u003e, where\n\u003ccode\u003e{name}\u003c/code\u003e is the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule.\nUnused code is \u003cem\u003enot\u003c/em\u003e removed by the linker in this configuration.\u003c/li\u003e\n\n\u003cli\u003eIf you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named \u003ccode\u003e{name}_nativedeps\u003c/code\u003e, where \u003ccode\u003e{name}\u003c/code\u003e\nis the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat \u003ccode\u003ecc_library\u003c/code\u003e target specifies \u003ccode\u003ealwayslink \u003d True\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen using any launcher other than the default JDK launcher, the format\nof the \u003ccode\u003e*_deploy.jar\u003c/code\u003e output changes. See the main\njava_binary docs for details.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootclasspath",
        "doc": "Restricted API, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "Extra compiler options for this binary.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_opens",
        "doc": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_class",
        "doc": "Name of class with \u003ccode\u003emain()\u003c/code\u003e method to use as entry point.\nIf a rule uses this option, it does not need a \u003ccode\u003esrcs\u003d[...]\u003c/code\u003e list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more \u003ccode\u003emain()\u003c/code\u003e methods.\n\u003cp\u003e\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from \u003ccode\u003esrcs\u003c/code\u003e) or\nprovided by direct or transitive dependencies (through \u003ccode\u003eruntime_deps\u003c/code\u003e or\n\u003ccode\u003edeps\u003c/code\u003e). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_flags",
        "doc": "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to $(location) and\n\"Make variable\" substitution, and\nBourne shell tokenization.\n\n\u003cp\u003eThe wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a \u003ccode\u003e\"$@\"\u003c/code\u003e so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified \u003ci\u003ebefore\u003c/i\u003e the classname on the command\nline.  The contents of \u003ccode\u003ejvm_flags\u003c/code\u003e are added to the wrapper\nscript before the classname is listed.\u003c/p\u003e\n\n\u003cp\u003eNote that this attribute has \u003cem\u003eno effect\u003c/em\u003e on \u003ccode\u003e*_deploy.jar\u003c/code\u003e\noutputs.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deploy_manifest_lines",
        "doc": "A list of lines to add to the \u003ccode\u003eMETA-INF/manifest.mf\u003c/code\u003e file generated for the\n\u003ccode\u003e*_deploy.jar\u003c/code\u003e target. The contents of this attribute are \u003cem\u003enot\u003c/em\u003e subject\nto \"Make variable\" substitution.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "defaultValue": "-1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "use_testrunner",
        "doc": "Use the test runner (by default\n\u003ccode\u003ecom.google.testing.junit.runner.BazelTestRunner\u003c/code\u003e) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of \u003ccode\u003ebazel.test_suite\u003c/code\u003e\nsystem property.\n\n\u003cbr/\u003e\nYou can use this to override the default\nbehavior, which is to use test runner for\n\u003ccode\u003ejava_test\u003c/code\u003e rules,\nand not use it for \u003ccode\u003ejava_binary\u003c/code\u003e rules.  It is unlikely\nyou will want to do this.  One use is for \u003ccode\u003eAllTest\u003c/code\u003e\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The \u003ccode\u003eAllTest\u003c/code\u003e\nrule must be declared as a \u003ccode\u003ejava_binary\u003c/code\u003e, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with \u003ccode\u003emain_class\u003c/code\u003e attribute.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "use_launcher",
        "doc": "Whether the binary should use a custom launcher.\n\n\u003cp\u003eIf this attribute is set to false, the\nlauncher attribute  and the related\n\u003ccode\u003e--java_launcher\u003c/code\u003e flag\nwill be ignored for this target.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "classpath_resources",
        "doc": "\u003cem class\u003d\"harmful\"\u003eDO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)\u003c/em\u003e\n\u003cp\u003e\nA list of resources that must be located at the root of the java tree. This attribute\u0027s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly \u003ccode\u003e\"myconfig.xml\"\u003c/code\u003e. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "create_executable",
        "doc": "Deprecated, use \u003ccode\u003ejava_single_jar\u003c/code\u003e instead.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_import",
    "doc": "\u003cp\u003e\n  This rule allows the use of precompiled \u003ccode\u003e.jar\u003c/code\u003e files as\n  libraries for \u003ccode\u003ejava_library\u003c/code\u003e and\n  \u003ccode\u003ejava_binary\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_import_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n    java_import(\n        name \u003d \"maven_model\",\n        jars \u003d [\n            \"maven_model/maven-aether-provider-3.2.3.jar\",\n            \"maven_model/maven-model-3.2.3.jar\",\n            \"maven_model/maven-model-builder-3.2.3.jar\",\n        ],\n    )\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "The list of files needed by this rule at runtime.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries to be linked in to the target.\nSee java_library.deps.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports",
        "doc": "Targets to make available to users of this rule.\nSee java_library.exports.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only.\nSee java_library.runtime_deps.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jars",
        "doc": "The list of JAR files provided to Java targets that depend on this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcjar",
        "doc": "A JAR file that contains source code for the compiled JAR files.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "doc": "Only use this library for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment\nduring execution. Examples of libraries like this are IDE APIs\nfor IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything running on\na standard JDK.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "constraints",
        "doc": "Extra constraints imposed on this rule as a Java library.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "proguard_specs",
        "doc": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_opens",
        "doc": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_library",
    "doc": "\u003cp\u003eThis rule compiles and links sources into a \u003ccode\u003e.jar\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch4\u003eImplicit outputs\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003elib\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive containing the class files.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003elib\u003cvar\u003ename\u003c/var\u003e-src.jar\u003c/code\u003e: An archive containing the sources (\"source\n    jar\").\u003c/li\u003e\n\u003c/ul\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.properties\u003c/code\u003e are treated as resources.\n\u003c/p\u003e\n\n\u003cp\u003eAll other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  When building a \u003ccode\u003ejava_library\u003c/code\u003e, Bazel doesn\u0027t put these files anywhere; if the\n  \u003ccode\u003edata\u003c/code\u003e files are generated files then Bazel generates them. When building a\n  test that depends on this \u003ccode\u003ejava_library\u003c/code\u003e Bazel copies or links the\n  \u003ccode\u003edata\u003c/code\u003e files into the runfiles area.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of data files to include in a Java jar.\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "doc": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of libraries to link into this library.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  The jars built by \u003ccode\u003ejava_library\u003c/code\u003e rules listed in \u003ccode\u003edeps\u003c/code\u003e will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  \u003ccode\u003edeps\u003c/code\u003e, \u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003eexports\u003c/code\u003e will be on the\n  runtime classpath.\n\u003c/p\u003e\n\u003cp\u003e\n  By contrast, targets in the \u003ccode\u003edata\u003c/code\u003e attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports",
        "doc": "Exported libraries.\n\u003cp\u003e\n  Listing rules here will make them available to parent rules, as if the parents explicitly\n  depended on these rules. This is not true for regular (non-exported) \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Summary: a rule \u003ci\u003eX\u003c/i\u003e can access the code in \u003ci\u003eY\u003c/i\u003e if there exists a dependency\n  path between them that begins with a \u003ccode\u003edeps\u003c/code\u003e edge followed by zero or more\n  \u003ccode\u003eexports\u003c/code\u003e edges. Let\u0027s see some examples to illustrate this.\n\u003c/p\u003e\n\u003cp\u003e\n  Assume \u003ci\u003eA\u003c/i\u003e depends on \u003ci\u003eB\u003c/i\u003e and \u003ci\u003eB\u003c/i\u003e depends on \u003ci\u003eC\u003c/i\u003e. In this case\n  C is a \u003cem\u003etransitive\u003c/em\u003e dependency of A, so changing C\u0027s sources and rebuilding A will\n  correctly rebuild everything. However A will not be able to use classes in C. To allow\n  that, either A has to declare C in its \u003ccode\u003edeps\u003c/code\u003e, or B can make it easier for A\n  (and anything that may depend on A) by declaring C in its (B\u0027s) \u003ccode\u003eexports\u003c/code\u003e\n  attribute.\n\u003c/p\u003e\n\u003cp\u003e\n  The closure of exported libraries is available to all direct parent rules. Take a slightly\n  different example: A depends on B, B depends on C and D, and also exports C but not D.\n  Now A has access to C but not to D. Now, if C and D exported some libraries, C\u0027 and D\u0027\n  respectively, A could only access C\u0027 but not D\u0027.\n\u003c/p\u003e\n\u003cp\u003e\n  Important: an exported rule is not a regular dependency. Sticking to the previous example,\n  if B exports C and wants to also use C, it has to also list it in its own\n  \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exported_plugins",
        "doc": "The list of \u003ccode\u003ejava_plugin\u003c/code\u003es (e.g. annotation\nprocessors) to export to libraries that directly depend on this library.\n\u003cp\u003e\n  The specified list of \u003ccode\u003ejava_plugin\u003c/code\u003es will be applied to any library which\n  directly depends on this library, just as if that library had explicitly declared these\n  labels in \u003ccode\u003eplugins\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootclasspath",
        "doc": "Restricted API, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javabuilder_jvm_flags",
        "doc": "Restricted API, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "Extra compiler options for this library.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "doc": "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything\nrunning on a standard JDK.\n\u003cp\u003e\n  Note that \u003ccode\u003eneverlink \u003d True\u003c/code\u003e does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., \u003ccode\u003estatic final\u003c/code\u003e constants of \u003ccode\u003eString\u003c/code\u003e\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n\u003c/p\u003e\n\u003cp\u003e\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "proguard_specs",
        "doc": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_opens",
        "doc": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_plugin",
    "doc": "\u003cp\u003e\n  \u003ccode\u003ejava_plugin\u003c/code\u003e defines plugins for the Java compiler run by Bazel. The\n  only supported kind of plugins are annotation processors. A \u003ccode\u003ejava_library\u003c/code\u003e or\n  \u003ccode\u003ejava_binary\u003c/code\u003e rule can run plugins by depending on them via the \u003ccode\u003eplugins\u003c/code\u003e\n  attribute. A \u003ccode\u003ejava_library\u003c/code\u003e can also automatically export plugins to libraries that\n  directly depend on it using\n  \u003ccode\u003eexported_plugins\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_plugin_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003e\u003cvar\u003elibname\u003c/var\u003e.jar\u003c/code\u003e: A Java archive.\u003c/li\u003e\n    \u003c/ul\u003e\n\n\u003cp\u003e\n  Arguments are identical to \u003ccode\u003ejava_library\u003c/code\u003e, except\n  for the addition of the \u003ccode\u003eprocessor_class\u003c/code\u003e argument.\n\u003c/p\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.properties\u003c/code\u003e are treated as resources.\n\u003c/p\u003e\n\n\u003cp\u003eAll other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  When building a \u003ccode\u003ejava_library\u003c/code\u003e, Bazel doesn\u0027t put these files anywhere; if the\n  \u003ccode\u003edata\u003c/code\u003e files are generated files then Bazel generates them. When building a\n  test that depends on this \u003ccode\u003ejava_library\u003c/code\u003e Bazel copies or links the\n  \u003ccode\u003edata\u003c/code\u003e files into the runfiles area.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of data files to include in a Java jar.\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "doc": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of libraries to link into this library.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  The jars built by \u003ccode\u003ejava_library\u003c/code\u003e rules listed in \u003ccode\u003edeps\u003c/code\u003e will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  \u003ccode\u003edeps\u003c/code\u003e, \u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003eexports\u003c/code\u003e will be on the\n  runtime classpath.\n\u003c/p\u003e\n\u003cp\u003e\n  By contrast, targets in the \u003ccode\u003edata\u003c/code\u003e attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootclasspath",
        "doc": "Restricted API, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javabuilder_jvm_flags",
        "doc": "Restricted API, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "Extra compiler options for this library.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "doc": "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything\nrunning on a standard JDK.\n\u003cp\u003e\n  Note that \u003ccode\u003eneverlink \u003d True\u003c/code\u003e does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., \u003ccode\u003estatic final\u003c/code\u003e constants of \u003ccode\u003eString\u003c/code\u003e\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n\u003c/p\u003e\n\u003cp\u003e\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "proguard_specs",
        "doc": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_opens",
        "doc": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "generates_api",
        "doc": "This attribute marks annotation processors that generate API code.\n\u003cp\u003eIf a rule uses an API-generating annotation processor, other rules\ndepending on it can refer to the generated code only if their\ncompilation actions are scheduled after the generating rule. This\nattribute instructs Bazel to introduce scheduling constraints when\n--java_header_compilation is enabled.\n\u003cp\u003e\u003cem class\u003d\"harmful\"\u003eWARNING: This attribute affects build\nperformance, use it only if necessary.\u003c/em\u003e\u003c/p\u003e",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "processor_class",
        "doc": "The processor class is the fully qualified type of the class that the Java compiler should\nuse as entry point to the annotation processor. If not specified, this rule will not\ncontribute an annotation processor to the Java compiler\u0027s annotation processing, but its\nruntime classpath will still be included on the compiler\u0027s annotation processor path. (This\nis primarily intended for use by\nError Prone plugins, which are loaded\nfrom the annotation processor path using\n\njava.util.ServiceLoader.)",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "output_licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_test",
    "doc": "\u003cp\u003e\nA \u003ccode\u003ejava_test()\u003c/code\u003e rule compiles a Java test. A test is a binary wrapper around your\ntest code. The test runner\u0027s main method is invoked instead of the main class being compiled.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_test_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e: A Java archive suitable\n    for deployment. (Only built if explicitly requested.) See the description of the\n    \u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e output from\n    java_binary for more details.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nSee the section on \u003ccode\u003ejava_binary()\u003c/code\u003e arguments. This rule also\nsupports all attributes common\nto all test rules (*_test).\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_test_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_library(\n    name \u003d \"tests\",\n    srcs \u003d glob([\"*.java\"]),\n    deps \u003d [\n        \"//java/com/foo/base:testResources\",\n        \"//java/com/foo/testing/util\",\n    ],\n)\n\njava_test(\n    name \u003d \"AllTests\",\n    size \u003d \"small\",\n    runtime_deps \u003d [\n        \":tests\",\n        \"//util/mysql\",\n    ],\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "test_class",
        "doc": "The Java class to be loaded by the test runner.\u003cbr/\u003e\n\u003cp\u003e\n  By default, if this argument is not defined then the legacy mode is used and the\n  test arguments are used instead. Set the \u003ccode\u003e--nolegacy_bazel_java_test\u003c/code\u003e flag\n  to not fallback on the first argument.\n\u003c/p\u003e\n\u003cp\u003e\n  This attribute specifies the name of a Java class to be run by\n  this test. It is rare to need to set this. If this argument is omitted,\n  it will be inferred using the target\u0027s \u003ccode\u003ename\u003c/code\u003e and its\n  source-root-relative path. If the test is located outside a known\n  source root, Bazel will report an error if \u003ccode\u003etest_class\u003c/code\u003e\n  is unset.\n\u003c/p\u003e\n\u003cp\u003e\n  For JUnit3, the test class needs to either be a subclass of\n  \u003ccode\u003ejunit.framework.TestCase\u003c/code\u003e or it needs to have a public\n  static \u003ccode\u003esuite()\u003c/code\u003e method that returns a\n  \u003ccode\u003ejunit.framework.Test\u003c/code\u003e (or a subclass of \u003ccode\u003eTest\u003c/code\u003e).\n  For JUnit4, the class needs to be annotated with\n  \u003ccode\u003eorg.junit.runner.RunWith\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  This attribute allows several \u003ccode\u003ejava_test\u003c/code\u003e rules to\n  share the same \u003ccode\u003eTest\u003c/code\u003e\n  (\u003ccode\u003eTestCase\u003c/code\u003e, \u003ccode\u003eTestSuite\u003c/code\u003e, ...).  Typically\n  additional information is passed to it\n  (e.g. via \u003ccode\u003ejvm_flags\u003d[\u0027-Dkey\u003dvalue\u0027]\u003c/code\u003e) so that its\n  behavior differs in each case, such as running a different\n  subset of the tests.  This attribute also enables the use of\n  Java tests outside the \u003ccode\u003ejavatests\u003c/code\u003e tree.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if a\n\u003ccode\u003emain_class\u003c/code\u003e attribute specifies a\nclass on the runtime classpath or you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "The list of other libraries to be linked in to the target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of data files to include in a Java jar.\n\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "doc": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "launcher",
        "doc": "Specify a binary that will be used to run your Java program instead of the\nnormal \u003ccode\u003ebin/java\u003c/code\u003e program included with the JDK.\nThe target must be a \u003ccode\u003ecc_binary\u003c/code\u003e. Any \u003ccode\u003ecc_binary\u003c/code\u003e that\nimplements the\n\nJava Invocation API can be specified as a value for this attribute.\n\n\u003cp\u003eBy default, Bazel will use the normal JDK launcher (bin/java or java.exe).\u003c/p\u003e\n\n\u003cp\u003eThe related \u003ccode\u003e\n--java_launcher\u003c/code\u003e Bazel flag affects only those\n\u003ccode\u003ejava_binary\u003c/code\u003e and \u003ccode\u003ejava_test\u003c/code\u003e targets that have\n\u003ci\u003enot\u003c/i\u003e specified a \u003ccode\u003elauncher\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNote that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named \u003ccode\u003e{name}_nativedeps.so\u003c/code\u003e, where\n\u003ccode\u003e{name}\u003c/code\u003e is the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule.\nUnused code is \u003cem\u003enot\u003c/em\u003e removed by the linker in this configuration.\u003c/li\u003e\n\n\u003cli\u003eIf you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named \u003ccode\u003e{name}_nativedeps\u003c/code\u003e, where \u003ccode\u003e{name}\u003c/code\u003e\nis the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat \u003ccode\u003ecc_library\u003c/code\u003e target specifies \u003ccode\u003ealwayslink \u003d True\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen using any launcher other than the default JDK launcher, the format\nof the \u003ccode\u003e*_deploy.jar\u003c/code\u003e output changes. See the main\njava_binary docs for details.\u003c/p\u003e",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootclasspath",
        "doc": "Restricted API, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "Extra compiler options for this binary.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_opens",
        "doc": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_class",
        "doc": "Name of class with \u003ccode\u003emain()\u003c/code\u003e method to use as entry point.\nIf a rule uses this option, it does not need a \u003ccode\u003esrcs\u003d[...]\u003c/code\u003e list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more \u003ccode\u003emain()\u003c/code\u003e methods.\n\u003cp\u003e\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from \u003ccode\u003esrcs\u003c/code\u003e) or\nprovided by direct or transitive dependencies (through \u003ccode\u003eruntime_deps\u003c/code\u003e or\n\u003ccode\u003edeps\u003c/code\u003e). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_flags",
        "doc": "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to $(location) and\n\"Make variable\" substitution, and\nBourne shell tokenization.\n\n\u003cp\u003eThe wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a \u003ccode\u003e\"$@\"\u003c/code\u003e so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified \u003ci\u003ebefore\u003c/i\u003e the classname on the command\nline.  The contents of \u003ccode\u003ejvm_flags\u003c/code\u003e are added to the wrapper\nscript before the classname is listed.\u003c/p\u003e\n\n\u003cp\u003eNote that this attribute has \u003cem\u003eno effect\u003c/em\u003e on \u003ccode\u003e*_deploy.jar\u003c/code\u003e\noutputs.\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deploy_manifest_lines",
        "doc": "A list of lines to add to the \u003ccode\u003eMETA-INF/manifest.mf\u003c/code\u003e file generated for the\n\u003ccode\u003e*_deploy.jar\u003c/code\u003e target. The contents of this attribute are \u003cem\u003enot\u003c/em\u003e subject\nto \"Make variable\" substitution.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stamp",
        "doc": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "use_testrunner",
        "doc": "Use the test runner (by default\n\u003ccode\u003ecom.google.testing.junit.runner.BazelTestRunner\u003c/code\u003e) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of \u003ccode\u003ebazel.test_suite\u003c/code\u003e\nsystem property.\n\n\u003cbr/\u003e\nYou can use this to override the default\nbehavior, which is to use test runner for\n\u003ccode\u003ejava_test\u003c/code\u003e rules,\nand not use it for \u003ccode\u003ejava_binary\u003c/code\u003e rules.  It is unlikely\nyou will want to do this.  One use is for \u003ccode\u003eAllTest\u003c/code\u003e\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The \u003ccode\u003eAllTest\u003c/code\u003e\nrule must be declared as a \u003ccode\u003ejava_binary\u003c/code\u003e, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with \u003ccode\u003emain_class\u003c/code\u003e attribute.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "use_launcher",
        "doc": "Whether the binary should use a custom launcher.\n\n\u003cp\u003eIf this attribute is set to false, the\nlauncher attribute  and the related\n\u003ccode\u003e--java_launcher\u003c/code\u003e flag\nwill be ignored for this target.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "classpath_resources",
        "doc": "\u003cem class\u003d\"harmful\"\u003eDO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)\u003c/em\u003e\n\u003cp\u003e\nA list of resources that must be located at the root of the java tree. This attribute\u0027s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly \u003ccode\u003e\"myconfig.xml\"\u003c/code\u003e. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n\u003c/p\u003e",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "create_executable",
        "doc": "Deprecated, use \u003ccode\u003ejava_single_jar\u003c/code\u003e instead.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_package_configuration",
    "doc": "\u003cp\u003e\nConfiguration to apply to a set of packages.\nConfigurations can be added to\n\u003ccode\u003ejava_toolchain.javacopts\u003c/code\u003es.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_package_configuration_example\"\u003eExample:\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_package_configuration(\n    name \u003d \"my_configuration\",\n    packages \u003d [\":my_packages\"],\n    javacopts \u003d [\"-Werror\"],\n)\n\npackage_group(\n    name \u003d \"my_packages\",\n    packages \u003d [\n        \"//com/my/project/...\",\n        \"-//com/my/project/testing/...\",\n    ],\n)\n\njava_toolchain(\n    ...,\n    package_configuration \u003d [\n        \":my_configuration\",\n    ]\n)\n\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "packages",
        "doc": "The set of \u003ccode\u003epackage_group\u003c/code\u003es\nthe configuration should be applied to.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "Java compiler flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this configuration at runtime.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "system",
        "doc": "Corresponds to javac\u0027s --system flag.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "output_licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_runtime",
    "doc": "\u003cp\u003e\nSpecifies the configuration for a Java runtime.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_runtime_example\"\u003eExample:\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_runtime(\n    name \u003d \"jdk-9-ea+153\",\n    srcs \u003d glob([\"jdk9-ea+153/**\"]),\n    java_home \u003d \"jdk9-ea+153\",\n)\n\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "default_cds",
        "doc": "Default CDS archive for hermetic \u003ccode\u003ejava_runtime\u003c/code\u003e. When hermetic\nis enabled for a \u003ccode\u003ejava_binary\u003c/code\u003e target the \u003ccode\u003ejava_runtime\u003c/code\u003e\ndefault CDS is packaged in the hermetic deploy JAR.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hermetic_srcs",
        "doc": "Files in the runtime needed for hermetic deployments.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "hermetic_static_libs",
        "doc": "The libraries that are statically linked with the launcher for hermetic deployments",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "java",
        "doc": "The path to the java executable.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "java_home",
        "doc": "The path to the root of the runtime.\nSubject to \"Make\" variable substitution.\nIf this path is absolute, the rule denotes a non-hermetic Java runtime with a well-known\npath. In that case, the \u003ccode\u003esrcs\u003c/code\u003e and \u003ccode\u003ejava\u003c/code\u003e attributes must be empty.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "lib_ct_sym",
        "doc": "The lib/ct.sym file needed for compilation with \u003ccode\u003e--release\u003c/code\u003e. If not specified and\nthere is exactly one file in \u003ccode\u003esrcs\u003c/code\u003e whose path ends with\n\u003ccode\u003e/lib/ct.sym\u003c/code\u003e, that file is used.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "lib_modules",
        "doc": "The lib/modules file needed for hermetic deployments.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "All files in the runtime.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "version",
        "doc": "The feature version of the Java runtime. I.e., the integer returned by\n\u003ccode\u003eRuntime.version().feature()\u003c/code\u003e.",
        "defaultValue": "0",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "output_licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "java_toolchain",
    "doc": "\u003cp\u003e\nSpecifies the configuration for the Java compiler. Which toolchain to be used can be changed through\nthe --java_toolchain argument. Normally you should not write those kind of rules unless you want to\ntune your Java compiler.\n\u003c/p\u003e\n\n\u003ch4\u003eExamples\u003c/h4\u003e\n\n\u003cp\u003eA simple example would be:\n\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_toolchain(\n    name \u003d \"toolchain\",\n    source_version \u003d \"7\",\n    target_version \u003d \"7\",\n    bootclasspath \u003d [\"//tools/jdk:bootclasspath\"],\n    xlint \u003d [ \"classfile\", \"divzero\", \"empty\", \"options\", \"path\" ],\n    javacopts \u003d [ \"-g\" ],\n    javabuilder \u003d \":JavaBuilder_deploy.jar\",\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "android_lint_data",
        "doc": "Labels of tools available for label-expansion in android_lint_jvm_opts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "android_lint_opts",
        "doc": "The list of Android Lint arguments.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "android_lint_jvm_opts",
        "doc": "The list of arguments for the JVM when invoking Android Lint.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "android_lint_package_configuration",
        "doc": "Android Lint Configuration that should be applied to the specified package groups.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "android_lint_runner",
        "doc": "Label of the Android Lint runner, if any.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "bootclasspath",
        "doc": "The Java target bootclasspath entries. Corresponds to javac\u0027s -bootclasspath flag.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "compatible_javacopts",
        "doc": "Internal API, do not use!",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps_checker",
        "doc": "Label of the ImportDepsChecker deploy jar.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "forcibly_disable_header_compilation",
        "doc": "Overrides --java_header_compilation to disable header compilation on platforms that do not\nsupport it, e.g. JDK 7 Bazel.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "genclass",
        "doc": "Label of the GenClass deploy jar.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "header_compiler",
        "doc": "Label of the header compiler. Required if --java_header_compilation is enabled.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "header_compiler_direct",
        "doc": "Optional label of the header compiler to use for direct classpath actions that do not\ninclude any API-generating annotation processors.\n\n\u003cp\u003eThis tool does not support annotation processing.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "header_compiler_builtin_processors",
        "doc": "Internal API, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "ijar",
        "doc": "Label of the ijar executable.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jacocorunner",
        "doc": "Label of the JacocoCoverageRunner deploy jar.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javabuilder",
        "doc": "Label of the JavaBuilder deploy jar.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javabuilder_data",
        "doc": "Labels of data available for label-expansion in javabuilder_jvm_opts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javabuilder_jvm_opts",
        "doc": "The list of arguments for the JVM when invoking JavaBuilder.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "java_runtime",
        "doc": "The java_runtime to use with this toolchain. It defaults to java_runtime\nin execution configuration.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_supports_workers",
        "doc": "True if JavaBuilder supports running as a persistent worker, false if it doesn\u0027t.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_supports_multiplex_workers",
        "doc": "True if JavaBuilder supports running as a multiplex persistent worker, false if it doesn\u0027t.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_supports_worker_cancellation",
        "doc": "True if JavaBuilder supports cancellation of persistent workers, false if it doesn\u0027t.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_supports_worker_multiplex_sandboxing",
        "doc": "True if JavaBuilder supports running as a multiplex persistent worker with sandboxing, false if it doesn\u0027t.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javacopts",
        "doc": "The list of extra arguments for the Java compiler. Please refer to the Java compiler\ndocumentation for the extensive list of possible Java compiler flags.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_implicit_deps",
        "doc": "Experimental, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_javacopts",
        "doc": "Experimental, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_packages",
        "doc": "Experimental, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_processor",
        "doc": "Experimental, do not use!",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_processor_class",
        "doc": "Experimental, do not use!",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jspecify_stubs",
        "doc": "Experimental, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_opts",
        "doc": "The list of arguments for the JVM when invoking the Java compiler. Please refer to the Java\nvirtual machine documentation for the extensive list of possible flags for this option.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "misc",
        "doc": "Deprecated: use javacopts instead",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "oneversion",
        "doc": "Label of the one-version enforcement binary.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "oneversion_whitelist",
        "doc": "Deprecated: use oneversion_allowlist instead",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "oneversion_allowlist",
        "doc": "Label of the one-version allowlist.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "oneversion_allowlist_for_tests",
        "doc": "Label of the one-version allowlist for tests.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "package_configuration",
        "doc": "Configuration that should be applied to the specified package groups.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "proguard_allowlister",
        "doc": "Label of the Proguard allowlister.",
        "defaultValue": "\"@bazel_tools//tools/jdk:proguard_whitelister\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "reduced_classpath_incompatible_processors",
        "doc": "Internal API, do not use!",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "singlejar",
        "doc": "Label of the SingleJar deploy jar.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "source_version",
        "doc": "The Java source version (e.g., \u00276\u0027 or \u00277\u0027). It specifies which set of code structures\nare allowed in the Java source code.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "target_version",
        "doc": "The Java target version (e.g., \u00276\u0027 or \u00277\u0027). It specifies for which Java runtime the class\nshould be build.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "timezone_data",
        "doc": "Label of a resource jar containing timezone data. If set, the timezone data is added as an\nimplicitly runtime dependency of all java_binary rules.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "tools",
        "doc": "Labels of tools available for label-expansion in jvm_opts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "turbine_data",
        "doc": "Labels of data available for label-expansion in turbine_jvm_opts.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "turbine_jvm_opts",
        "doc": "The list of arguments for the JVM when invoking turbine.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "xlint",
        "doc": "The list of warning to add or removes from default list. Precedes it with a dash to\nremoves it. Please see the Javac documentation on the -Xlint options for more information.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "licenses",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_javac_options",
    "doc": "Define java compiler options for \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules with java sources.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "warn",
        "doc": "Control warning behaviour.",
        "defaultValue": "\"report\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "release",
        "doc": "Compile for the specified Java SE release",
        "defaultValue": "\"default\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_ep_disable_all_checks",
        "doc": "See javac -XepDisableAllChecks documentation",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_lint",
        "doc": "See javac -Xlint: documentation",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "xd_suppress_notes",
        "doc": "See javac -XDsuppressNotes documentation",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_explicit_api_mode",
        "doc": "Enable explicit API mode for Kotlin libraries.",
        "defaultValue": "\"off\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Export internal jdk apis",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_kotlinc_options",
    "doc": "Define kotlin compiler options.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "warn",
        "doc": "Control warning behaviour.",
        "defaultValue": "\"report\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "include_stdlibs",
        "doc": "Don\u0027t automatically include the Kotlin standard libraries into the classpath (stdlib and reflect).",
        "defaultValue": "\"all\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_skip_prerelease_check",
        "doc": "Suppress errors thrown when using pre-release classes.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_context_receivers",
        "doc": "Enable experimental context receivers.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_suppress_version_warnings",
        "doc": "Suppress warnings about outdated, inconsistent, or experimental language or API versions.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_inline_classes",
        "doc": "Enable experimental inline classes",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_jvm_default",
        "doc": "Specifies that a JVM default method should be generated for non-abstract Kotlin interface member.",
        "defaultValue": "\"off\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_no_call_assertions",
        "doc": "Don\u0027t generate not-null assertions for arguments of platform types",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_no_param_assertions",
        "doc": "Don\u0027t generate not-null assertions on parameters of methods accessible from Java",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_no_receiver_assertions",
        "doc": "Don\u0027t generate not-null assertion for extension receiver arguments of platform types",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_explicit_api_mode",
        "doc": "Enable explicit API mode for Kotlin libraries.",
        "defaultValue": "\"off\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "java_parameters",
        "doc": "Generate metadata for Java 1.8+ reflection on method parameters.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_multi_platform",
        "doc": "Enable experimental language support for multi-platform projects",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_sam_conversions",
        "doc": "Change codegen behavior of SAM/functional interfaces",
        "defaultValue": "\"class\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_lambdas",
        "doc": "Change codegen behavior of lambdas",
        "defaultValue": "\"class\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_emit_jvm_type_annotations",
        "doc": "Basic support for type annotations in JVM bytecode.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_optin",
        "doc": "Define APIs to opt-in to.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_use_k2",
        "doc": "Compile using experimental K2. K2 is a new compiler pipeline, no compatibility guarantees are yet provided",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_no_optimize",
        "doc": "Disable optimizations",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_backend_threads",
        "doc": "When using the IR backend, run lowerings by file in N parallel threads. 0 means use a thread per processor core. Default value is 1.",
        "defaultValue": "1",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_enable_incremental_compilation",
        "doc": "Enable incremental compilation",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_report_perf",
        "doc": "Report detailed performance statistics",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_use_fir_lt",
        "doc": "Compile using LightTree parser with Front-end IR. Warning: this feature is far from being production-ready",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_no_source_debug_extension",
        "doc": "Do not generate @kotlin.jvm.internal.SourceDebugExtension annotation on a class with the copy of SMAP",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_type_enhancement_improvements_strict_mode",
        "doc": "Enables strict mode for type enhancement improvements, enforcing stricter type checking and enhancements.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_jsr_305",
        "doc": "Specifies how to handle JSR-305 annotations in Kotlin code. Options are \u0027default\u0027, \u0027ignore\u0027, \u0027warn\u0027, and \u0027strict\u0027.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_assertions",
        "doc": "Configures how assertions are handled. The \u0027jvm\u0027 option enables assertions in JVM code.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_jspecify_annotations",
        "doc": "Controls how JSpecify annotations are treated. Options are \u0027default\u0027, \u0027ignore\u0027, \u0027warn\u0027, and \u0027strict\u0027.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_consistent_data_class_copy_visibility",
        "doc": "The effect of this compiler flag is the same as applying @ConsistentCopyVisibility annotation to all data classes in the module. See https://youtrack.jetbrains.com/issue/KT-11914",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_target",
        "doc": "The target version of the generated JVM bytecode",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_jdk_release",
        "doc": "Compile against the specified JDK API version, similarly to javac\u0027s \u0027-release\u0027. This requires JDK 9 or newer.\nThe supported versions depend on the JDK used; for JDK 17+, the supported versions are 1.8 and 9â21.\nThis also sets the value of \u0027-jvm-target\u0027 to be equal to the selected JDK version.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_compiler_plugin",
    "doc": "Define a plugin for the Kotlin compiler to run. The plugin can then be referenced in the \u003ccode\u003eplugins\u003c/code\u003e attribute\nof the \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules.\n\nAn example can be found under \u003ccode\u003e//examples/plugin\u003c/code\u003e:\n\n\u003ccode\u003ebzl\nkt_compiler_plugin(\n    name \u003d \"open_for_testing_plugin\",\n    id \u003d \"org.jetbrains.kotlin.allopen\",\n    options \u003d {\n        \"annotation\": \"plugin.OpenForTesting\",\n    },\n    deps \u003d [\n        \"//kotlin/compiler:allopen-compiler-plugin\",\n    ],\n)\n\nkt_jvm_library(\n    name \u003d \"open_for_testing\",\n    srcs \u003d [\"OpenForTesting.kt\"],\n)\n\nkt_jvm_library(\n    name \u003d \"user\",\n    srcs \u003d [\"User.kt\"],\n    plugins \u003d [\":open_for_testing_plugin\"],\n    deps \u003d [\n        \":open_for_testing\",\n    ],\n)\n\u003c/code\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of libraries to be added to the compiler\u0027s plugin classpath",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "id",
        "doc": "The ID of the plugin",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "options",
        "doc": "Dictionary of options to be passed to the plugin.\nSupports the following template values:\n\n- \u003ccode\u003e{generatedClasses}\u003c/code\u003e: directory for generated class output\n- \u003ccode\u003e{temp}\u003c/code\u003e: temporary directory, discarded between invocations\n- \u003ccode\u003e{generatedSources}\u003c/code\u003e:  directory for generated source output\n- \u003ccode\u003e{classpath}\u003c/code\u003e : replaced with a list of jars separated by the filesystem appropriate separator.",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "compile_phase",
        "doc": "Runs the compiler plugin during kotlin compilation. Known examples: \u003ccode\u003eallopen\u003c/code\u003e, \u003ccode\u003esam_with_reciever\u003c/code\u003e",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "stubs_phase",
        "doc": "Runs the compiler plugin in kapt stub generation.",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "target_embedded_compiler",
        "doc": "Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc\ndependencies, and will fail when running against a non-embeddable compiler.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_ksp_plugin",
    "doc": "Define a KSP plugin for the Kotlin compiler to run. The plugin can then be referenced in the \u003ccode\u003eplugins\u003c/code\u003e attribute\nof the \u003ccode\u003ekt_jvm_*\u003c/code\u003e and \u003ccode\u003ekt_android_*\u003c/code\u003e rules.\n\nAn example can be found under \u003ccode\u003e//examples/ksp\u003c/code\u003e:\n\n\u003ccode\u003e\u003c/code\u003e`bzl\nkt_ksp_plugin(\n    name \u003d \"moshi-kotlin-codegen\",\n    processor_class \u003d \"com.squareup.moshi.kotlin.codegen.ksp.JsonClassSymbolProcessorProvider\",\n    deps \u003d [\n        \"@maven//:com_squareup_moshi_moshi\",\n        \"@maven//:com_squareup_moshi_moshi_kotlin\",\n        \"@maven//:com_squareup_moshi_moshi_kotlin_codegen\",\n    ],\n)\n\nkt_jvm_library(\n    name \u003d \"lib\",\n    srcs \u003d glob([\"*.kt\"]),\n    plugins \u003d [\"//:moshi-kotlin-codegen\"],\n)",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "deps",
        "doc": "The list of libraries to be added to the compiler\u0027s plugin classpath",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "processor_class",
        "doc": "The fully qualified class name that the Java compiler uses as an entry point to the annotation processor.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "target_embedded_compiler",
        "doc": "Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc\ndependencies, and will fail when running against a non-embeddable compiler.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "generates_java",
        "doc": "Runs Java compilation action for plugin generating Java output.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_plugin_cfg",
    "doc": "Configurations for kt_compiler_plugin, ksp_plugin, and java_plugin.\n\nThis allows setting options and dependencies independently from the initial plugin definition.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "plugin",
        "doc": "The plugin to associate with this configuration",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "options",
        "doc": "A dictionary of flag to values to be used as plugin configuration options.",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "Dependencies for this configuration.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_javac_options",
    "doc": "Define java compiler options for \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules with java sources.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "warn",
        "doc": "Control warning behaviour.",
        "defaultValue": "\"report\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "release",
        "doc": "Compile for the specified Java SE release",
        "defaultValue": "\"default\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_ep_disable_all_checks",
        "doc": "See javac -XepDisableAllChecks documentation",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_lint",
        "doc": "See javac -Xlint: documentation",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "xd_suppress_notes",
        "doc": "See javac -XDsuppressNotes documentation",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_explicit_api_mode",
        "doc": "Enable explicit API mode for Kotlin libraries.",
        "defaultValue": "\"off\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "add_exports",
        "doc": "Export internal jdk apis",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_jvm_binary",
    "doc": "Builds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule. The wrapper\nshell script uses a classpath that includes, among other things, a jar file for each library on which the binary\ndepends.\n\n**Note:** This rule does not have all of the features found in \u003ccode\u003ejava_binary\u003c/code\u003e.\nIt is appropriate for building workspace utilities. \u003ccode\u003ejava_binary\u003c/code\u003e should be preferred for release artefacts.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "java_stub_template",
        "defaultValue": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of files that should be include in a Java jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_jars",
        "doc": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "associates",
        "doc": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_name",
        "doc": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "kotlinc_opts",
        "doc": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_opts",
        "doc": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_flags",
        "doc": "A list of flags to embed in the wrapper script generated for running this binary. Note: does not yet\nsupport make variable substitution.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_class",
        "doc": "Name of class with main() method to use as entry point.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "kt_jvm_import",
    "doc": "Import Kotlin jars.\n\n## examples\n\n\u003ccode\u003ebzl\n# Old style usage -- reference file groups, do not used this.\nkt_jvm_import(\n    name \u003d \"kodein\",\n    jars \u003d [\n        \"@com_github_salomonbrys_kodein_kodein//jar:file\",\n        \"@com_github_salomonbrys_kodein_kodein_core//jar:file\"\n    ]\n)\n\n# This style will pull in the transitive runtime dependencies of the targets as well.\nkt_jvm_import(\n    name \u003d \"kodein\",\n    jars \u003d [\n        \"@com_github_salomonbrys_kodein_kodein//jar\",\n        \"@com_github_salomonbrys_kodein_kodein_core//jar\"\n    ]\n)\n\n# Import a single kotlin jar.\nkt_jvm_import(\n    name \u003d \"kotlin-stdlib\",\n    jars \u003d [\"lib/kotlin-stdlib.jar\"],\n    srcjar \u003d \"lib/kotlin-stdlib-sources.jar\"\n)\n\u003c/code\u003e",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "jars",
        "doc": "The jars listed here are equavalent to an export attribute. The label should be either to a single\nclass jar, or one or more filegroup labels.  The filegroups, when resolved, must contain  only one jar\ncontaining classes, and (optionally) one peer file containing sources, named \u003ccode\u003e\u003cjarname\u003e-sources.jar\u003c/code\u003e.\n\nDEPRECATED - please use \u003ccode\u003ejar\u003c/code\u003e and \u003ccode\u003esrcjar\u003c/code\u003e attributes.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jar",
        "doc": "The jar listed here is equivalent to an export attribute.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcjar",
        "doc": "The sources for the class jar.",
        "defaultValue": "\"@rules_kotlin//third_party:empty.jar\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Additional runtime deps.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "Compile and runtime dependencies",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports",
        "doc": "Exported libraries.\n\nDeps listed here will be made available to other rules, as if the parents explicitly depended on\nthese deps. This is not true for regular (non-exported) deps.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exported_compiler_plugins",
        "doc": "Exported compiler plugins.\n\nCompiler plugins listed here will be treated as if they were added in the plugins\nattribute of any targets that directly depend on this target. Like java_plugins\u0027\nexported_plugins, this is not transitive",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "doc": "If true only use this library for compilation and not at runtime.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_jvm_library",
    "doc": "This rule compiles and links Kotlin and Java sources into a .jar file.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "java_stub_template",
        "defaultValue": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of files that should be include in a Java jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_jars",
        "doc": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "associates",
        "doc": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_name",
        "doc": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "kotlinc_opts",
        "doc": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_opts",
        "doc": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exports",
        "doc": "Exported libraries.\n\nDeps listed here will be made available to other rules, as if the parents explicitly depended on\nthese deps. This is not true for regular (non-exported) deps.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "exported_compiler_plugins",
        "doc": "Exported compiler plugins.\n\nCompiler plugins listed here will be treated as if they were added in the plugins attribute\nof any targets that directly depend on this target. Like \u003ccode\u003ejava_plugin\u003c/code\u003es exported_plugins,\nthis is not transitive",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "neverlink",
        "doc": "If true only use this library for compilation and not at runtime.",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "kt_jvm_test",
    "doc": "Setup a simple kotlin_test.\n\n**Notes:**\n* The kotlin test library is not added implicitly, it is available with the label\n\u003ccode\u003e@rules_kotlin//kotlin/compiler:kotlin-test\u003c/code\u003e.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "java_stub_template",
        "defaultValue": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "runtime_deps",
        "doc": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resources",
        "doc": "A list of files that should be include in a Java jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_strip_prefix",
        "doc": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "resource_jars",
        "doc": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "associates",
        "doc": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "plugins",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "module_name",
        "doc": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "kotlinc_opts",
        "doc": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "javac_opts",
        "doc": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "jvm_flags",
        "doc": "A list of flags to embed in the wrapper script generated for running this binary. Note: does not yet\nsupport make variable substitution.",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "test_class",
        "doc": "The Java class to be loaded by the test runner.",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "main_class",
        "defaultValue": "\"com.google.testing.junit.runner.BazelTestRunner\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "doc": "Specifies additional environment variables to set when the target is executed by bazel test.",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "ktlint_fix",
    "doc": "Lint Kotlin files and automatically fix them as needed",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "Source files to review and fix",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "config",
        "doc": "ktlint_config to use",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "ktlint_test",
    "doc": "Lint Kotlin files, and fail if the linter raises errors.",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "srcs",
        "doc": "Source files to lint",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "config",
        "doc": "ktlint_config to use",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "ktlint_config",
    "doc": "Used to configure ktlint.\n\n\u003ccode\u003ektlint\u003c/code\u003e can be configured to use a \u003ccode\u003e.editorconfig\u003c/code\u003e, as documented at\nhttps://github.com/pinterest/ktlint/#editorconfig",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "editorconfig",
        "doc": "Editor config file to use",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "android_rules_enabled",
        "doc": "Turn on Android Kotlin Style Guide compatibility",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "experimental_rules_enabled",
        "doc": "Turn on experimental rules (ktlint-ruleset-experimental)",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "go_binary",
    "doc": "This builds an executable from a set of source files,\n        which must all be in the \u003ccode\u003emain\u003c/code\u003e package. You can run the binary with\n        \u003ccode\u003ebazel run\u003c/code\u003e, or you can build it with \u003ccode\u003ebazel build\u003c/code\u003e and run it directly.\u003cbr\u003e\u003cbr\u003e\n        ***Note:*** \u003ccode\u003ename\u003c/code\u003e should be the same as the desired name of the generated binary.\u003cbr\u003e\u003cbr\u003e\n        **Providers:**\n        \u003cul\u003e\n          \u003cli\u003e[GoArchive]\u003c/li\u003e\n        \u003c/ul\u003e\n        ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "basename",
        "doc": "The basename of this binary. The binary\n                basename may also be platform-dependent: on Windows, we add an .exe extension.\n                ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cdeps",
        "doc": "The list of other libraries that the c code depends on.\n                This can be anything that would be allowed in [cc_library deps]\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cgo",
        "doc": "If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain\n                C, C++, Objective-C, and Objective-C++ files and non-Go assembly files.\n                When cgo is enabled, these files will be compiled with the C/C++ toolchain\n                and included in the package. Note that this attribute does not force cgo\n                to be enabled. Cgo is enabled for non-cross-compiling builds when a C/C++\n                toolchain is configured.\n                ",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "clinkopts",
        "doc": "List of flags to add to the C link command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "List of flags to add to the C compilation command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cppopts",
        "doc": "List of flags to add to the C/C++ preprocessor command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "List of flags to add to the C++ compilation command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "List of files needed by this rule at run-time. This may include data files\n                needed or other programs that may be executed. The [bazel] package may be\n                used to locate run files; they may appear in different places depending on the\n                operating system and environment. See [data dependencies] for more\n                information on data files.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of Go libraries this package imports directly.\n                These may be \u003ccode\u003ego_library\u003c/code\u003e rules or compatible rules with the [GoInfo] provider.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embed",
        "doc": "List of Go libraries whose sources should be compiled together with this\n                binary\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n                \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the [GoInfo] provider.\n                Embedded libraries must all have the same \u003ccode\u003eimportpath\u003c/code\u003e,\n                which must match the \u003ccode\u003eimportpath\u003c/code\u003e for this \u003ccode\u003ego_binary\u003c/code\u003e if one is\n                specified. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e, and the\n                embedding binary may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding] for\n                more information.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embedsrcs",
        "doc": "The list of files that may be embedded into the compiled package using\n                \u003ccode\u003e//go:embed\u003c/code\u003e directives. All files must be in the same logical directory\n                or a subdirectory as source files. All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e\n                directives must be in the same logical directory. It\u0027s okay to mix static and\n                generated source files and static and generated embeddable files.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "doc": "Environment variables to set when the binary is executed with bazel run.\n                The values (but not keys) are subject to\n                location expansion but not full\n                make variable expansion.\n                ",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_goopts",
        "doc": "List of flags to add to the Go compilation command when using the gc compiler.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_linkopts",
        "doc": "List of flags to add to the Go link command when using the gc compiler.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "goarch",
        "doc": "Forces a binary to be cross-compiled for a specific architecture. It\u0027s usually\n                better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n                This disables cgo by default, since a cross-compiling C/C++ toolchain is\n                rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n                See [Cross compilation] for more information.\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "goos",
        "doc": "Forces a binary to be cross-compiled for a specific operating system. It\u0027s\n                usually better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n                This disables cgo by default, since a cross-compiling C/C++ toolchain is\n                rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n                See [Cross compilation] for more information.\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gotags",
        "doc": "Enables a list of build tags when evaluating [build constraints]. Useful for\n                conditional compilation.\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "importpath",
        "doc": "The import path of this binary. Binaries can\u0027t actually be imported, but this\n                may be used by [go_path] and other tools to report the location of source\n                files. This may be inferred from embedded libraries.\n                ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkmode",
        "doc": "Determines how the binary should be built and linked. This accepts some of\n                the same values as \u003ccode\u003ego build -buildmode\u003c/code\u003e and works the same way.\n                \u003cbr\u003e\u003cbr\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e (default): Controlled by \u003ccode\u003e//go/config:linkmode\u003c/code\u003e, which defaults to \u003ccode\u003enormal\u003c/code\u003e.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003enormal\u003c/code\u003e: Builds a normal executable with position-dependent code.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003epie\u003c/code\u003e: Builds a position-independent executable.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003eplugin\u003c/code\u003e: Builds a shared library that can be loaded as a Go plugin. Only supported on platforms that support plugins.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003ec-shared\u003c/code\u003e: Builds a shared library that can be linked into a C program.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003ec-archive\u003c/code\u003e: Builds an archive that can be linked into a C program.\u003c/li\u003e\n                \u003c/ul\u003e\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "msan",
        "doc": "Controls whether code is instrumented for memory sanitization. May be one of\n                \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n                disabled. In most cases, it\u0027s better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:msan\u003c/code\u003e. See [mode attributes], specifically\n                [msan].\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "out",
        "doc": "Sets the output filename for the generated executable. When set, \u003ccode\u003ego_binary\u003c/code\u003e\n                will write this file without mode-specific directory prefixes, without\n                linkmode-specific prefixes like \"lib\", and without platform-specific suffixes\n                like \".exe\". Note that without a mode-specific directory prefix, the\n                output file (but not its dependencies) will be invalidated in Bazel\u0027s cache\n                when changing configurations.\n                ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pgoprofile",
        "doc": "Provides a pprof file to be used for profile guided optimization when compiling go targets.\n                A pprof file can also be provided via \u003ccode\u003e--@io_bazel_rules_go//go/config:pgoprofile\u003d\u003clabel of a pprof file\u003e\u003c/code\u003e.\n                Profile guided optimization is only supported on go 1.20+.\n                See https://go.dev/doc/pgo for more information.\n                ",
        "defaultValue": "//go/config:empty",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pure",
        "doc": "Controls whether cgo source code and dependencies are compiled and linked,\n                similar to setting \u003ccode\u003eCGO_ENABLED\u003c/code\u003e. May be one of \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e,\n                or \u003ccode\u003eauto\u003c/code\u003e. If \u003ccode\u003eauto\u003c/code\u003e, pure mode is enabled when no C/C++\n                toolchain is configured or when cross-compiling. It\u0027s usually better to\n                control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:pure\u003c/code\u003e. See [mode attributes], specifically\n                [pure].\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "race",
        "doc": "Controls whether code is instrumented for race detection. May be one of\n                \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n                disabled. In most cases, it\u0027s better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:race\u003c/code\u003e. See [mode attributes], specifically\n                [race].\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Go source files that are compiled to create the package.\n                Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e\n                attribute is set, in which case,\n                \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e\n                files are also permitted. Files may be filtered at build time\n                using Go [build constraints].\n                ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "static",
        "doc": "Controls whether a binary is statically linked. May be one of \u003ccode\u003eon\u003c/code\u003e,\n                \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available on all platforms or in all\n                modes. It\u0027s usually better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:static\u003c/code\u003e. See [mode attributes],\n                specifically [static].\n                ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_defs",
        "doc": "Map of defines to add to the go link command.\n                See [Defines and stamping] for examples of how to use these.\n                ",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "go_cross_binary",
    "doc": "This wraps an executable built by \u003ccode\u003ego_binary\u003c/code\u003e to cross compile it\n    for a different platform, and/or compile it using a different version\n    of the golang SDK.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoArchive]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "compilation_mode",
        "doc": "The compilation_mode to use for compiling the \u003ccode\u003etarget\u003c/code\u003e.\n            Must be one of \u003ccode\u003edbg\u003c/code\u003e, \u003ccode\u003efastbuild\u003c/code\u003e, or \u003ccode\u003eopt\u003c/code\u003e. If unspecified, use the\n            same compilation mode as the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "platform",
        "doc": "The platform to cross compile the \u003ccode\u003etarget\u003c/code\u003e for.\n            If unspecified, the \u003ccode\u003etarget\u003c/code\u003e will be compiled with the\n            same platform as it would\u0027ve with the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            ",
        "defaultValue": "None",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "sdk_version",
        "doc": "The golang SDK version to use for compiling the \u003ccode\u003etarget\u003c/code\u003e.\n            Supports specifying major, minor, and/or patch versions, eg. \u003ccode\u003e\"1\"\u003c/code\u003e,\n            \u003ccode\u003e\"1.17\"\u003c/code\u003e, or \u003ccode\u003e\"1.17.1\"\u003c/code\u003e. The first Go SDK provider installed in the\n            repo\u0027s workspace (via \u003ccode\u003ego_download_sdk\u003c/code\u003e, \u003ccode\u003ego_wrap_sdk\u003c/code\u003e, etc) that\n            matches the specified version will be used for compiling the given\n            \u003ccode\u003etarget\u003c/code\u003e. If unspecified, the \u003ccode\u003etarget\u003c/code\u003e will be compiled with the same\n            SDK as it would\u0027ve with the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            Transitions \u003ccode\u003etarget\u003c/code\u003e by changing the \u003ccode\u003e--@io_bazel_rules_go//go/toolchain:sdk_version\u003c/code\u003e\n            build flag to the value provided for \u003ccode\u003esdk_version\u003c/code\u003e here.\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "target",
        "doc": "Go binary target to transition to the given platform and/or sdk_version.\n            ",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "go_library",
    "doc": "This builds a Go library from a set of source files that are all part of\n    the same package.\u003cbr\u003e\u003cbr\u003e\n    ***Note:*** For targets generated by Gazelle, \u003ccode\u003ename\u003c/code\u003e is typically the last component of the path,\n    or \u003ccode\u003ego_default_library\u003c/code\u003e, with the old naming convention.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoInfo]\u003c/li\u003e\n      \u003cli\u003e[GoArchive]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "cdeps",
        "doc": "\n            List of other libraries that the c code depends on.\n            This can be anything that would be allowed in [cc_library deps] Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cgo",
        "doc": "\n            If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain C, C++, Objective-C, and Objective-C++ files\n            and non-Go assembly files. When cgo is enabled, these files will be compiled with the C/C++ toolchain and\n            included in the package. Note that this attribute does not force cgo to be enabled. Cgo is enabled for\n            non-cross-compiling builds when a C/C++ toolchain is configured.\n            ",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "clinkopts",
        "doc": "\n            List of flags to add to the C link command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "\n            List of flags to add to the C compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cppopts",
        "doc": "\n            List of flags to add to the C/C++ preprocessor command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "\n            List of flags to add to the C++ compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "\n            List of files needed by this rule at run-time.\n            This may include data files needed or other programs that may be executed.\n            The [bazel] package may be used to locate run files; they may appear in different places\n            depending on the operating system and environment. See [data dependencies] for more information on data files.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "\n            List of Go libraries this package imports directly.\n            These may be \u003ccode\u003ego_library\u003c/code\u003e rules or compatible rules with the [GoInfo] provider.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embed",
        "doc": "\n            List of Go libraries whose sources should be compiled together with this package\u0027s sources.\n            Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e, \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with\n            the [GoInfo] provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as the embedding library.\n            At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e, and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            See [Embedding] for more information.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embedsrcs",
        "doc": "\n            The list of files that may be embedded into the compiled package using \u003ccode\u003e//go:embed\u003c/code\u003e\n            directives. All files must be in the same logical directory or a subdirectory as source files.\n            All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e directives must be in the same logical directory.\n            It\u0027s okay to mix static and generated source files and static and generated embeddable files.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_goopts",
        "doc": "\n            List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "importmap",
        "doc": "\n            The actual import path of this library. By default, this is \u003ccode\u003eimportpath\u003c/code\u003e. This is mostly only visible to the compiler and linker,\n            but it may also be seen in stack traces. This must be unique among packages passed to the linker.\n            It may be set to something different than \u003ccode\u003eimportpath\u003c/code\u003e to prevent conflicts between multiple packages\n            with the same path (for example, from different vendor directories).\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "importpath",
        "doc": "\n            The source import path of this library. Other libraries can import this library using this path.\n            This must either be specified in \u003ccode\u003ego_library\u003c/code\u003e or inherited from one of the libraries in \u003ccode\u003eembed\u003c/code\u003e.\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "importpath_aliases",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "\n            The list of Go source files that are compiled to create the package.\n            Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e attribute is set,\n            in which case, \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e files are also permitted.\n            Files may be filtered at build time using Go [build constraints].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_defs",
        "doc": "\n            Map of defines to add to the go link command. See [Defines and stamping] for examples of how to use these.\n            ",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "go_path",
    "doc": "\u003ccode\u003ego_path\u003c/code\u003e builds a directory structure that can be used with\n    tools that understand the GOPATH directory layout. This directory structure\n    can be built by zipping, copying, or linking files.\n    \u003ccode\u003ego_path\u003c/code\u003e can depend on one or more Go targets (i.e., [go_library], [go_binary], or [go_test]).\n    It will include packages from those targets, as well as their transitive dependencies.\n    Packages will be in subdirectories named after their \u003ccode\u003eimportpath\u003c/code\u003e or \u003ccode\u003eimportmap\u003c/code\u003e attributes under a \u003ccode\u003esrc/\u003c/code\u003e directory.\n    ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "\n            A list of targets producing data files that will be stored next to the\n            \u003ccode\u003esrc/\u003c/code\u003e directory. Useful for including things like licenses and readmes.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "A list of targets that build Go packages. A directory will be generated from\n            files in these targets and their transitive dependencies. All targets must\n            provide [GoArchive] ([go_library], [go_binary], [go_test], and similar\n            rules have this).\n\n            Only targets with explicit \u003ccode\u003eimportpath\u003c/code\u003e attributes will be included in the\n            generated directory. Synthetic packages (like the main package produced by\n            [go_test]) and packages with inferred import paths will not be\n            included. The values of \u003ccode\u003eimportmap\u003c/code\u003e attributes may influence the placement\n            of packages within the generated directory (for example, in vendor\n            directories).\n\n            The generated directory will contain original source files, including .go,\n            .s, .h, and .c files compiled by cgo. It will not contain files generated by\n            tools like cover and cgo, but it will contain generated files passed in\n            \u003ccode\u003esrcs\u003c/code\u003e attributes like .pb.go files. The generated directory will also\n            contain runfiles found in \u003ccode\u003edata\u003c/code\u003e attributes.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "include_data",
        "doc": "\n            When true, data files referenced by libraries, binaries, and tests will be\n            included in the output directory. Files listed in the \u003ccode\u003edata\u003c/code\u003e attribute\n            for this rule will be included regardless of this attribute.\n            ",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "include_pkg",
        "doc": "\n            When true, a \u003ccode\u003epkg\u003c/code\u003e subdirectory containing the compiled libraries will be created in the\n            generated \u003ccode\u003eGOPATH\u003c/code\u003e containing compiled libraries.\n            ",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "include_transitive",
        "doc": "\n            When true, the transitive dependency graph will be included in the generated \u003ccode\u003eGOPATH\u003c/code\u003e. This is\n            the default behaviour. When false, only the direct dependencies will be included in the\n            generated \u003ccode\u003eGOPATH\u003c/code\u003e.\n            ",
        "defaultValue": "True",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "mode",
        "doc": "\n            Determines how the generated directory is provided. May be one of:\n            \u003cul\u003e\n                \u003cli\u003e\u003ccode\u003e\"archive\"\u003c/code\u003e: The generated directory is packaged as a single .zip file.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003e\"copy\"\u003c/code\u003e: The generated directory is a single tree artifact. Source files\n                are copied into the tree.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003e\"link\"\u003c/code\u003e: \u003cb\u003eUnmaintained due to correctness issues\u003c/b\u003e. Source files\n                are symlinked into the tree. All of the symlink files are provided as separate output\n                files.\u003c/li\u003e\n            \u003c/ul\u003e\n\n            ***Note:*** In \u003ccode\u003e\"copy\"\u003c/code\u003e mode, when a \u003ccode\u003eGoPath\u003c/code\u003e is consumed as a set of input\n            files or run files, Bazel may provide symbolic links instead of regular files.\n            Any program that consumes these files should dereference links, e.g., if you\n            run \u003ccode\u003etar\u003c/code\u003e, use the \u003ccode\u003e--dereference\u003c/code\u003e flag.\n            ",
        "defaultValue": "\"copy\"",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "go_reset_target",
    "doc": "Forwards providers from a target and default Go binary settings.\n\ngo_reset_target depends on a single target and builds it to be a Go tool binary. It\nforwards Go providers and DefaultInfo.\n\ngo_reset_target does two things using transitions:\n   1. builds the tool with \u0027cfg \u003d \"exec\"\u0027 so they work on the execution platform.\n   2. Sets most Go settings to default value and disables nogo.\n\nThis is used for Go tool binaries that shouldn\u0027t depend on the link mode or tags of the\ntarget configuration and neither the tools nor the code they potentially\ngenerate should be subject to Nogo\u0027s static analysis. This is helpful, for example, so\na tool isn\u0027t built as a shared library with race instrumentation. This acts as an\nintermediate rule that allows users to apply these transitions.\n",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "dep",
        "doc": "The target to forward providers from and apply go_tool_transition to.",
        "named": true,
        "positional": false,
        "required": true
      }
    ]
  },
  {
    "name": "go_source",
    "doc": "This declares a set of source files and related dependencies that can be embedded into one of the\n    other rules.\n    This is used as a way of easily declaring a common set of sources re-used in multiple rules.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoInfo]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "data",
        "doc": "List of files needed by this rule at run-time. This may include data files\n            needed or other programs that may be executed. The [bazel] package may be\n            used to locate run files; they may appear in different places depending on the\n            operating system and environment. See [data dependencies] for more\n            information on data files.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of Go libraries this source list imports directly.\n            These may be go_library rules or compatible rules with the [GoInfo] provider.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embed",
        "doc": "List of Go libraries whose sources should be compiled together with this\n            package\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n            \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the [GoInfo]\n            provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as\n            the embedding library. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e,\n            and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding]\n            for more information.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_goopts",
        "doc": "List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Go source files that are compiled to create the package.\n            The following file types are permitted: \u003ccode\u003e.go, .c, .s, .syso, .S, .h\u003c/code\u003e.\n            The files may contain Go-style [build constraints].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  },
  {
    "name": "go_test",
    "doc": "This builds a set of tests that can be run with \u003ccode\u003ebazel test\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003e\n    To run all tests in the workspace, and print output on failure (the\n    equivalent of \u003ccode\u003ego test ./...\u003c/code\u003e), run\u003cbr\u003e\n    \u003ccode\u003e\n    bazel test --test_output\u003derrors //...\n    \u003ccode\u003e\u003c/code\u003e\u003ccode\u003e\u003cbr\u003e\u003cbr\u003e\n    To run a Go benchmark test, run\u003cbr\u003e\n    \u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\n    bazel run //path/to:test -- -test.bench\u003d.\n    \u003c/code\u003e\u003cbr\u003e\u003cbr\u003e\n    You can run specific tests by passing the \u003ccode\u003e--test_filter\u003dpattern\n    \u003ctest_filter_\u003e\u003c/code\u003e argument to Bazel. You can pass arguments to tests by passing\n    \u003ccode\u003e--test_arg\u003darg \u003ctest_arg_\u003e\u003c/code\u003e arguments to Bazel, and you can set environment\n    variables in the test environment by passing\n    \u003ccode\u003e--test_env\u003dVAR\u003dvalue \u003ctest_env_\u003e\u003c/code\u003e. You can terminate test execution after the first\n    failure by passing the \u003ccode\u003e--test_runner_fail_fast \u003ctest_runner_fail_fast_\u003e\u003c/code\u003e argument\n    to Bazel. This is equivalent to passing \u003ccode\u003e--test_arg\u003d-failfast \u003ctest_arg_\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003e\n    To write structured testlog information to Bazel\u0027s \u003ccode\u003eXML_OUTPUT_FILE\u003c/code\u003e, tests\n    ran with \u003ccode\u003ebazel test\u003c/code\u003e execute using a wrapper. This functionality can be\n    disabled by setting \u003ccode\u003eGO_TEST_WRAP\u003d0\u003c/code\u003e in the test environment. Additionally,\n    the testbinary can be invoked with \u003ccode\u003e-test.v\u003c/code\u003e by setting\n    \u003ccode\u003eGO_TEST_WRAP_TESTV\u003d1\u003c/code\u003e in the test environment; this will result in the\n    \u003ccode\u003eXML_OUTPUT_FILE\u003c/code\u003e containing more granular data.\u003cbr\u003e\u003cbr\u003e\n    ***Note:*** To interoperate cleanly with old targets generated by [Gazelle], \u003ccode\u003ename\u003c/code\u003e\n    should be \u003ccode\u003ego_default_test\u003c/code\u003e for internal tests and\n    \u003ccode\u003ego_default_xtest\u003c/code\u003e for external tests. Gazelle now generates\n    the name  based on the last component of the path. For example, a test\n    in \u003ccode\u003e//foo/bar\u003c/code\u003e is named \u003ccode\u003ebar_test\u003c/code\u003e, and uses internal and external\n    sources.\n    ",
    "environment": [
      "BUILD"
    ],
    "params": [
      {
        "name": "name",
        "doc": "A unique name for this target.",
        "named": true,
        "positional": false,
        "required": true
      },
      {
        "name": "cdeps",
        "doc": "The list of other libraries that the c code depends on.\n            This can be anything that would be allowed in [cc_library deps]\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cgo",
        "doc": "\n            If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain\n            C, C++, Objective-C, and Objective-C++ files and non-Go assembly files.\n            When cgo is enabled, these files will be compiled with the C/C++ toolchain\n            and included in the package. Note that this attribute does not force cgo\n            to be enabled. Cgo is enabled for non-cross-compiling builds when a C/C++\n            toolchain is configured.\n            ",
        "defaultValue": "False",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "clinkopts",
        "doc": "List of flags to add to the C link command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "copts",
        "doc": "List of flags to add to the C compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cppopts",
        "doc": "List of flags to add to the C/C++ preprocessor command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "cxxopts",
        "doc": "List of flags to add to the C++ compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "data",
        "doc": "List of files needed by this rule at run-time. This may include data files\n            needed or other programs that may be executed. The [bazel] package may be\n            used to locate run files; they may appear in different places depending on the\n            operating system and environment. See [data dependencies] for more\n            information on data files.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "deps",
        "doc": "List of Go libraries this test imports directly.\n            These may be go_library rules or compatible rules with the [GoInfo] provider.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embed",
        "doc": "List of Go libraries whose sources should be compiled together with this\n            package\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n            \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the\n            [GoInfo] provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as\n            the embedding library. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e,\n            and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding]\n            for more information.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "embedsrcs",
        "doc": "The list of files that may be embedded into the compiled package using\n            \u003ccode\u003e//go:embed\u003c/code\u003e directives. All files must be in the same logical directory\n            or a subdirectory as source files. All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e\n            directives must be in the same logical directory. It\u0027s okay to mix static and\n            generated source files and static and generated embeddable files.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env",
        "doc": "Environment variables to set for the test execution.\n            The values (but not keys) are subject to\n            location expansion but not full\n            make variable expansion.\n            ",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "env_inherit",
        "doc": "Environment variables to inherit from the external environment.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_goopts",
        "doc": "List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gc_linkopts",
        "doc": "List of flags to add to the Go link command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "goarch",
        "doc": "Forces a binary to be cross-compiled for a specific architecture. It\u0027s usually\n            better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n            This disables cgo by default, since a cross-compiling C/C++ toolchain is\n            rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n            See [Cross compilation] for more information.\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "goos",
        "doc": "Forces a binary to be cross-compiled for a specific operating system. It\u0027s\n            usually better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n            This disables cgo by default, since a cross-compiling C/C++ toolchain is\n            rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n            See [Cross compilation] for more information.\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "gotags",
        "doc": "Enables a list of build tags when evaluating [build constraints]. Useful for\n            conditional compilation.\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "importpath",
        "doc": "The import path of this test. Tests can\u0027t actually be imported, but this\n            may be used by [go_path] and other tools to report the location of source\n            files. This may be inferred from embedded libraries.\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "linkmode",
        "doc": "Determines how the binary should be built and linked. This accepts some of\n            the same values as \u003ccode\u003ego build -buildmode\u003c/code\u003e and works the same way.\n            \u003cbr\u003e\u003cbr\u003e\n            \u003cul\u003e\n            \u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e (default): Controlled by \u003ccode\u003e//go/config:linkmode\u003c/code\u003e, which defaults to \u003ccode\u003enormal\u003c/code\u003e.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003enormal\u003c/code\u003e: Builds a normal executable with position-dependent code.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003epie\u003c/code\u003e: Builds a position-independent executable.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003eplugin\u003c/code\u003e: Builds a shared library that can be loaded as a Go plugin. Only supported on platforms that support plugins.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003ec-shared\u003c/code\u003e: Builds a shared library that can be linked into a C program.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003ec-archive\u003c/code\u003e: Builds an archive that can be linked into a C program.\u003c/li\u003e\n            \u003c/ul\u003e\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "msan",
        "doc": "Controls whether code is instrumented for memory sanitization. May be one of\n            \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n            disabled. In most cases, it\u0027s better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:msan\u003c/code\u003e. See [mode attributes], specifically\n            [msan].\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "pure",
        "doc": "Controls whether cgo source code and dependencies are compiled and linked,\n            similar to setting \u003ccode\u003eCGO_ENABLED\u003c/code\u003e. May be one of \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e,\n            or \u003ccode\u003eauto\u003c/code\u003e. If \u003ccode\u003eauto\u003c/code\u003e, pure mode is enabled when no C/C++\n            toolchain is configured or when cross-compiling. It\u0027s usually better to\n            control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:pure\u003c/code\u003e. See [mode attributes], specifically\n            [pure].\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "race",
        "doc": "Controls whether code is instrumented for race detection. May be one of\n            \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n            disabled. In most cases, it\u0027s better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:race\u003c/code\u003e. See [mode attributes], specifically\n            [race].\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "rundir",
        "doc": " A directory to cd to before the test is run.\n            This should be a path relative to the root directory of the\n            repository in which the test is defined, which can be the main or an\n            external repository.\n\n            The default behaviour is to change to the relative path\n            corresponding to the test\u0027s package, which replicates the normal\n            behaviour of \u003ccode\u003ego test\u003c/code\u003e so it is easy to write compatible tests.\n\n            Setting it to \u003ccode\u003e.\u003c/code\u003e makes the test behave the normal way for a bazel\n            test, except that the working directory is always that of the test\u0027s\n            repository, which is not necessarily the main repository.\n\n            Note: If runfile symlinks are disabled (such as on Windows by\n            default), the test will run in the working directory set by Bazel,\n            which is the subdirectory of the runfiles directory corresponding to\n            the main repository.\n            ",
        "defaultValue": "\"\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "srcs",
        "doc": "The list of Go source files that are compiled to create the package.\n            Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e\n            attribute is set, in which case,\n            \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e\n            files are also permitted. Files may be filtered at build time\n            using Go [build constraints].\n            ",
        "defaultValue": "[]",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "static",
        "doc": "Controls whether a binary is statically linked. May be one of \u003ccode\u003eon\u003c/code\u003e,\n            \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available on all platforms or in all\n            modes. It\u0027s usually better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:static\u003c/code\u003e. See [mode attributes],\n            specifically [static].\n            ",
        "defaultValue": "\"auto\"",
        "named": true,
        "positional": false,
        "required": false
      },
      {
        "name": "x_defs",
        "doc": "Map of defines to add to the go link command.\n            See [Defines and stamping] for examples of how to use these.\n            ",
        "defaultValue": "{}",
        "named": true,
        "positional": false,
        "required": false
      }
    ]
  }
]
