[
  {
    "name": "java_binary",
    "docString": "\u003cp\u003e\n  Builds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule.\n  The wrapper shell script uses a classpath that includes, among other things, a jar file for each\n  library on which the binary depends. When running the wrapper shell script, any nonempty\n  \u003ccode\u003eJAVABIN\u003c/code\u003e environment variable will take precedence over the version specified via\n  Bazel\u0027s \u003ccode\u003e--java_runtime_version\u003c/code\u003e flag.\n\u003c/p\u003e\n\u003cp\u003e\n  The wrapper script accepts several unique flags. Refer to\n  \u003ccode\u003ejava_stub_template.txt\u003c/code\u003e\n  for a list of configurable flags and environment variables accepted by the wrapper.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_binary_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive, containing the class files and other\n    resources corresponding to the binary\u0027s direct dependencies.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e-src.jar\u003c/code\u003e: An archive containing the sources (\"source\n    jar\").\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e: A Java archive suitable for deployment (only\n    built if explicitly requested).\n    \u003cp\u003e\n      Building the \u003ccode\u003e\u0026lt;\u003cvar\u003ename\u003c/var\u003e\u0026gt;_deploy.jar\u003c/code\u003e target for your rule\n      creates a self-contained jar file with a manifest that allows it to be run with the\n      \u003ccode\u003ejava -jar\u003c/code\u003e command or with the wrapper script\u0027s \u003ccode\u003e--singlejar\u003c/code\u003e\n      option. Using the wrapper script is preferred to \u003ccode\u003ejava -jar\u003c/code\u003e because it\n      also passes the JVM flags and the options\n      to load native libraries.\n    \u003c/p\u003e\n    \u003cp\u003e\n      The deploy jar contains all the classes that would be found by a classloader that\n      searched the classpath from the binary\u0027s wrapper script from beginning to end. It also\n      contains the native libraries needed for dependencies. These are automatically loaded\n      into the JVM at runtime.\n    \u003c/p\u003e\n    \u003cp\u003eIf your target specifies a launcher\n      attribute, then instead of being a normal JAR file, the _deploy.jar will be a\n      native binary. This will contain the launcher plus any native (C++) dependencies of\n      your rule, all linked into a static binary. The actual jar file\u0027s bytes will be\n      appended to that native binary, creating a single binary blob containing both the\n      executable and the Java code. You can execute the resulting jar file directly\n      like you would execute any native binary.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy-src.jar\u003c/code\u003e: An archive containing the sources\n    collected from the transitive closure of the target. These will match the classes in the\n    \u003ccode\u003edeploy.jar\u003c/code\u003e except where jars have no matching source jar.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nIt is good practice to use the name of the source file that is the main entry point of the\napplication (minus the extension). For example, if your entry point is called\n\u003ccode\u003eMain.java\u003c/code\u003e, then your name could be \u003ccode\u003eMain\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A \u003ccode\u003edeps\u003c/code\u003e attribute is not allowed in a \u003ccode\u003ejava_binary\u003c/code\u003e rule without\n  \u003ccode\u003esrcs\u003c/code\u003e; such a rule requires a\n  \u003ccode\u003emain_class\u003c/code\u003e provided by\n  \u003ccode\u003eruntime_deps\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003eThe following code snippet illustrates a common mistake:\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_binary(\n    name \u003d \"DontDoThis\",\n    srcs \u003d [\n        \u003cvar\u003e...\u003c/var\u003e,\n        \u003ccode class\u003d\"deprecated\"\u003e\"GeneratedJavaFile.java\"\u003c/code\u003e,  # a generated .java file\n    ],\n    deps \u003d [\u003ccode class\u003d\"deprecated\"\u003e\":generating_rule\",\u003c/code\u003e],  # rule that generates that file\n)\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eDo this instead:\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\njava_binary(\n    name \u003d \"DoThisInstead\",\n    srcs \u003d [\n        \u003cvar\u003e...\u003c/var\u003e,\n        \":generating_rule\",\n    ],\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if a\n\u003ccode\u003emain_class\u003c/code\u003e attribute specifies a\nclass on the runtime classpath or you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of other libraries to be linked in to the target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of data files to include in a Java jar.\n\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "docString": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deploy_env",
        "docString": "A list of other \u003ccode\u003ejava_binary\u003c/code\u003e targets which represent the deployment\nenvironment for this binary.\nSet this attribute when building a plugin which will be loaded by another\n\u003ccode\u003ejava_binary\u003c/code\u003e.\u003cbr/\u003e Setting this attribute excludes all dependencies from\nthe runtime classpath (and the deploy jar) of this binary that are shared between this\nbinary and the targets specified in \u003ccode\u003edeploy_env\u003c/code\u003e.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "launcher",
        "docString": "Specify a binary that will be used to run your Java program instead of the\nnormal \u003ccode\u003ebin/java\u003c/code\u003e program included with the JDK.\nThe target must be a \u003ccode\u003ecc_binary\u003c/code\u003e. Any \u003ccode\u003ecc_binary\u003c/code\u003e that\nimplements the\n\nJava Invocation API can be specified as a value for this attribute.\n\n\u003cp\u003eBy default, Bazel will use the normal JDK launcher (bin/java or java.exe).\u003c/p\u003e\n\n\u003cp\u003eThe related \u003ccode\u003e\n--java_launcher\u003c/code\u003e Bazel flag affects only those\n\u003ccode\u003ejava_binary\u003c/code\u003e and \u003ccode\u003ejava_test\u003c/code\u003e targets that have\n\u003ci\u003enot\u003c/i\u003e specified a \u003ccode\u003elauncher\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNote that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named \u003ccode\u003e{name}_nativedeps.so\u003c/code\u003e, where\n\u003ccode\u003e{name}\u003c/code\u003e is the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule.\nUnused code is \u003cem\u003enot\u003c/em\u003e removed by the linker in this configuration.\u003c/li\u003e\n\n\u003cli\u003eIf you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named \u003ccode\u003e{name}_nativedeps\u003c/code\u003e, where \u003ccode\u003e{name}\u003c/code\u003e\nis the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat \u003ccode\u003ecc_library\u003c/code\u003e target specifies \u003ccode\u003ealwayslink \u003d True\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen using any launcher other than the default JDK launcher, the format\nof the \u003ccode\u003e*_deploy.jar\u003c/code\u003e output changes. See the main\njava_binary docs for details.\u003c/p\u003e",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "bootclasspath",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "neverlink",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "Extra compiler options for this binary.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_opens",
        "docString": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "main_class",
        "docString": "Name of class with \u003ccode\u003emain()\u003c/code\u003e method to use as entry point.\nIf a rule uses this option, it does not need a \u003ccode\u003esrcs\u003d[...]\u003c/code\u003e list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more \u003ccode\u003emain()\u003c/code\u003e methods.\n\u003cp\u003e\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from \u003ccode\u003esrcs\u003c/code\u003e) or\nprovided by direct or transitive dependencies (through \u003ccode\u003eruntime_deps\u003c/code\u003e or\n\u003ccode\u003edeps\u003c/code\u003e). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "jvm_flags",
        "docString": "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to $(location) and\n\"Make variable\" substitution, and\nBourne shell tokenization.\n\n\u003cp\u003eThe wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a \u003ccode\u003e\"$@\"\u003c/code\u003e so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified \u003ci\u003ebefore\u003c/i\u003e the classname on the command\nline.  The contents of \u003ccode\u003ejvm_flags\u003c/code\u003e are added to the wrapper\nscript before the classname is listed.\u003c/p\u003e\n\n\u003cp\u003eNote that this attribute has \u003cem\u003eno effect\u003c/em\u003e on \u003ccode\u003e*_deploy.jar\u003c/code\u003e\noutputs.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deploy_manifest_lines",
        "docString": "A list of lines to add to the \u003ccode\u003eMETA-INF/manifest.mf\u003c/code\u003e file generated for the\n\u003ccode\u003e*_deploy.jar\u003c/code\u003e target. The contents of this attribute are \u003cem\u003enot\u003c/em\u003e subject\nto \"Make variable\" substitution.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "stamp",
        "docString": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "required": false,
        "default": "-1",
        "positional": false
      },
      {
        "name": "use_testrunner",
        "docString": "Use the test runner (by default\n\u003ccode\u003ecom.google.testing.junit.runner.BazelTestRunner\u003c/code\u003e) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of \u003ccode\u003ebazel.test_suite\u003c/code\u003e\nsystem property.\n\n\u003cbr/\u003e\nYou can use this to override the default\nbehavior, which is to use test runner for\n\u003ccode\u003ejava_test\u003c/code\u003e rules,\nand not use it for \u003ccode\u003ejava_binary\u003c/code\u003e rules.  It is unlikely\nyou will want to do this.  One use is for \u003ccode\u003eAllTest\u003c/code\u003e\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The \u003ccode\u003eAllTest\u003c/code\u003e\nrule must be declared as a \u003ccode\u003ejava_binary\u003c/code\u003e, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with \u003ccode\u003emain_class\u003c/code\u003e attribute.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "use_launcher",
        "docString": "Whether the binary should use a custom launcher.\n\n\u003cp\u003eIf this attribute is set to false, the\nlauncher attribute  and the related\n\u003ccode\u003e--java_launcher\u003c/code\u003e flag\nwill be ignored for this target.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "env",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "classpath_resources",
        "docString": "\u003cem class\u003d\"harmful\"\u003eDO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)\u003c/em\u003e\n\u003cp\u003e\nA list of resources that must be located at the root of the java tree. This attribute\u0027s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly \u003ccode\u003e\"myconfig.xml\"\u003c/code\u003e. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "create_executable",
        "docString": "Deprecated, use \u003ccode\u003ejava_single_jar\u003c/code\u003e instead.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "java_import",
    "docString": "\u003cp\u003e\n  This rule allows the use of precompiled \u003ccode\u003e.jar\u003c/code\u003e files as\n  libraries for \u003ccode\u003ejava_library\u003c/code\u003e and\n  \u003ccode\u003ejava_binary\u003c/code\u003e rules.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_import_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n    java_import(\n        name \u003d \"maven_model\",\n        jars \u003d [\n            \"maven_model/maven-aether-provider-3.2.3.jar\",\n            \"maven_model/maven-model-3.2.3.jar\",\n            \"maven_model/maven-model-builder-3.2.3.jar\",\n        ],\n    )\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this rule at runtime.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of other libraries to be linked in to the target.\nSee java_library.deps.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exports",
        "docString": "Targets to make available to users of this rule.\nSee java_library.exports.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only.\nSee java_library.runtime_deps.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jars",
        "docString": "The list of JAR files provided to Java targets that depend on this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcjar",
        "docString": "A JAR file that contains source code for the compiled JAR files.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "neverlink",
        "docString": "Only use this library for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment\nduring execution. Examples of libraries like this are IDE APIs\nfor IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything running on\na standard JDK.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "constraints",
        "docString": "Extra constraints imposed on this rule as a Java library.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "proguard_specs",
        "docString": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_opens",
        "docString": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "java_library",
    "docString": "\u003cp\u003eThis rule compiles and links sources into a \u003ccode\u003e.jar\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch4\u003eImplicit outputs\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003elib\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive containing the class files.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003elib\u003cvar\u003ename\u003c/var\u003e-src.jar\u003c/code\u003e: An archive containing the sources (\"source\n    jar\").\u003c/li\u003e\n\u003c/ul\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.properties\u003c/code\u003e are treated as resources.\n\u003c/p\u003e\n\n\u003cp\u003eAll other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  When building a \u003ccode\u003ejava_library\u003c/code\u003e, Bazel doesn\u0027t put these files anywhere; if the\n  \u003ccode\u003edata\u003c/code\u003e files are generated files then Bazel generates them. When building a\n  test that depends on this \u003ccode\u003ejava_library\u003c/code\u003e Bazel copies or links the\n  \u003ccode\u003edata\u003c/code\u003e files into the runfiles area.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of data files to include in a Java jar.\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "docString": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of libraries to link into this library.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  The jars built by \u003ccode\u003ejava_library\u003c/code\u003e rules listed in \u003ccode\u003edeps\u003c/code\u003e will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  \u003ccode\u003edeps\u003c/code\u003e, \u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003eexports\u003c/code\u003e will be on the\n  runtime classpath.\n\u003c/p\u003e\n\u003cp\u003e\n  By contrast, targets in the \u003ccode\u003edata\u003c/code\u003e attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exports",
        "docString": "Exported libraries.\n\u003cp\u003e\n  Listing rules here will make them available to parent rules, as if the parents explicitly\n  depended on these rules. This is not true for regular (non-exported) \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Summary: a rule \u003ci\u003eX\u003c/i\u003e can access the code in \u003ci\u003eY\u003c/i\u003e if there exists a dependency\n  path between them that begins with a \u003ccode\u003edeps\u003c/code\u003e edge followed by zero or more\n  \u003ccode\u003eexports\u003c/code\u003e edges. Let\u0027s see some examples to illustrate this.\n\u003c/p\u003e\n\u003cp\u003e\n  Assume \u003ci\u003eA\u003c/i\u003e depends on \u003ci\u003eB\u003c/i\u003e and \u003ci\u003eB\u003c/i\u003e depends on \u003ci\u003eC\u003c/i\u003e. In this case\n  C is a \u003cem\u003etransitive\u003c/em\u003e dependency of A, so changing C\u0027s sources and rebuilding A will\n  correctly rebuild everything. However A will not be able to use classes in C. To allow\n  that, either A has to declare C in its \u003ccode\u003edeps\u003c/code\u003e, or B can make it easier for A\n  (and anything that may depend on A) by declaring C in its (B\u0027s) \u003ccode\u003eexports\u003c/code\u003e\n  attribute.\n\u003c/p\u003e\n\u003cp\u003e\n  The closure of exported libraries is available to all direct parent rules. Take a slightly\n  different example: A depends on B, B depends on C and D, and also exports C but not D.\n  Now A has access to C but not to D. Now, if C and D exported some libraries, C\u0027 and D\u0027\n  respectively, A could only access C\u0027 but not D\u0027.\n\u003c/p\u003e\n\u003cp\u003e\n  Important: an exported rule is not a regular dependency. Sticking to the previous example,\n  if B exports C and wants to also use C, it has to also list it in its own\n  \u003ccode\u003edeps\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exported_plugins",
        "docString": "The list of \u003ccode\u003ejava_plugin\u003c/code\u003es (e.g. annotation\nprocessors) to export to libraries that directly depend on this library.\n\u003cp\u003e\n  The specified list of \u003ccode\u003ejava_plugin\u003c/code\u003es will be applied to any library which\n  directly depends on this library, just as if that library had explicitly declared these\n  labels in \u003ccode\u003eplugins\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "bootclasspath",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javabuilder_jvm_flags",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "Extra compiler options for this library.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "neverlink",
        "docString": "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything\nrunning on a standard JDK.\n\u003cp\u003e\n  Note that \u003ccode\u003eneverlink \u003d True\u003c/code\u003e does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., \u003ccode\u003estatic final\u003c/code\u003e constants of \u003ccode\u003eString\u003c/code\u003e\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n\u003c/p\u003e\n\u003cp\u003e\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n\u003c/p\u003e",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "proguard_specs",
        "docString": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_opens",
        "docString": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "java_plugin",
    "docString": "\u003cp\u003e\n  \u003ccode\u003ejava_plugin\u003c/code\u003e defines plugins for the Java compiler run by Bazel. The\n  only supported kind of plugins are annotation processors. A \u003ccode\u003ejava_library\u003c/code\u003e or\n  \u003ccode\u003ejava_binary\u003c/code\u003e rule can run plugins by depending on them via the \u003ccode\u003eplugins\u003c/code\u003e\n  attribute. A \u003ccode\u003ejava_library\u003c/code\u003e can also automatically export plugins to libraries that\n  directly depend on it using\n  \u003ccode\u003eexported_plugins\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_plugin_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003e\u003cvar\u003elibname\u003c/var\u003e.jar\u003c/code\u003e: A Java archive.\u003c/li\u003e\n    \u003c/ul\u003e\n\n\u003cp\u003e\n  Arguments are identical to \u003ccode\u003ejava_library\u003c/code\u003e, except\n  for the addition of the \u003ccode\u003eprocessor_class\u003c/code\u003e argument.\n\u003c/p\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.properties\u003c/code\u003e are treated as resources.\n\u003c/p\u003e\n\n\u003cp\u003eAll other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  When building a \u003ccode\u003ejava_library\u003c/code\u003e, Bazel doesn\u0027t put these files anywhere; if the\n  \u003ccode\u003edata\u003c/code\u003e files are generated files then Bazel generates them. When building a\n  test that depends on this \u003ccode\u003ejava_library\u003c/code\u003e Bazel copies or links the\n  \u003ccode\u003edata\u003c/code\u003e files into the runfiles area.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of data files to include in a Java jar.\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "docString": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of libraries to link into this library.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.\n\u003cp\u003e\n  The jars built by \u003ccode\u003ejava_library\u003c/code\u003e rules listed in \u003ccode\u003edeps\u003c/code\u003e will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  \u003ccode\u003edeps\u003c/code\u003e, \u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003eexports\u003c/code\u003e will be on the\n  runtime classpath.\n\u003c/p\u003e\n\u003cp\u003e\n  By contrast, targets in the \u003ccode\u003edata\u003c/code\u003e attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "bootclasspath",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javabuilder_jvm_flags",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "Extra compiler options for this library.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "neverlink",
        "docString": "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or \u003ccode\u003etools.jar\u003c/code\u003e for anything\nrunning on a standard JDK.\n\u003cp\u003e\n  Note that \u003ccode\u003eneverlink \u003d True\u003c/code\u003e does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., \u003ccode\u003estatic final\u003c/code\u003e constants of \u003ccode\u003eString\u003c/code\u003e\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n\u003c/p\u003e\n\u003cp\u003e\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n\u003c/p\u003e",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "proguard_specs",
        "docString": "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any \u003ccode\u003eandroid_binary\u003c/code\u003e target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n\u003ccode\u003eandroid_binary\u003c/code\u003e\u0027s proguard_specs, to ensure non-tautological merges.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_opens",
        "docString": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "generates_api",
        "docString": "This attribute marks annotation processors that generate API code.\n\u003cp\u003eIf a rule uses an API-generating annotation processor, other rules\ndepending on it can refer to the generated code only if their\ncompilation actions are scheduled after the generating rule. This\nattribute instructs Bazel to introduce scheduling constraints when\n--java_header_compilation is enabled.\n\u003cp\u003e\u003cem class\u003d\"harmful\"\u003eWARNING: This attribute affects build\nperformance, use it only if necessary.\u003c/em\u003e\u003c/p\u003e",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "processor_class",
        "docString": "The processor class is the fully qualified type of the class that the Java compiler should\nuse as entry point to the annotation processor. If not specified, this rule will not\ncontribute an annotation processor to the Java compiler\u0027s annotation processing, but its\nruntime classpath will still be included on the compiler\u0027s annotation processor path. (This\nis primarily intended for use by\nError Prone plugins, which are loaded\nfrom the annotation processor path using\n\njava.util.ServiceLoader.)",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "output_licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "java_test",
    "docString": "\u003cp\u003e\nA \u003ccode\u003ejava_test()\u003c/code\u003e rule compiles a Java test. A test is a binary wrapper around your\ntest code. The test runner\u0027s main method is invoked instead of the main class being compiled.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_test_implicit_outputs\"\u003eImplicit output targets\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e.jar\u003c/code\u003e: A Java archive.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e: A Java archive suitable\n    for deployment. (Only built if explicitly requested.) See the description of the\n    \u003ccode\u003e\u003cvar\u003ename\u003c/var\u003e_deploy.jar\u003c/code\u003e output from\n    java_binary for more details.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nSee the section on \u003ccode\u003ejava_binary()\u003c/code\u003e arguments. This rule also\nsupports all attributes common\nto all test rules (*_test).\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_test_examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_library(\n    name \u003d \"tests\",\n    srcs \u003d glob([\"*.java\"]),\n    deps \u003d [\n        \"//java/com/foo/base:testResources\",\n        \"//java/com/foo/testing/util\",\n    ],\n)\n\njava_test(\n    name \u003d \"AllTests\",\n    size \u003d \"small\",\n    runtime_deps \u003d [\n        \":tests\",\n        \"//util/mysql\",\n    ],\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "test_class",
        "docString": "The Java class to be loaded by the test runner.\u003cbr/\u003e\n\u003cp\u003e\n  By default, if this argument is not defined then the legacy mode is used and the\n  test arguments are used instead. Set the \u003ccode\u003e--nolegacy_bazel_java_test\u003c/code\u003e flag\n  to not fallback on the first argument.\n\u003c/p\u003e\n\u003cp\u003e\n  This attribute specifies the name of a Java class to be run by\n  this test. It is rare to need to set this. If this argument is omitted,\n  it will be inferred using the target\u0027s \u003ccode\u003ename\u003c/code\u003e and its\n  source-root-relative path. If the test is located outside a known\n  source root, Bazel will report an error if \u003ccode\u003etest_class\u003c/code\u003e\n  is unset.\n\u003c/p\u003e\n\u003cp\u003e\n  For JUnit3, the test class needs to either be a subclass of\n  \u003ccode\u003ejunit.framework.TestCase\u003c/code\u003e or it needs to have a public\n  static \u003ccode\u003esuite()\u003c/code\u003e method that returns a\n  \u003ccode\u003ejunit.framework.Test\u003c/code\u003e (or a subclass of \u003ccode\u003eTest\u003c/code\u003e).\n  For JUnit4, the class needs to be annotated with\n  \u003ccode\u003eorg.junit.runner.RunWith\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  This attribute allows several \u003ccode\u003ejava_test\u003c/code\u003e rules to\n  share the same \u003ccode\u003eTest\u003c/code\u003e\n  (\u003ccode\u003eTestCase\u003c/code\u003e, \u003ccode\u003eTestSuite\u003c/code\u003e, ...).  Typically\n  additional information is passed to it\n  (e.g. via \u003ccode\u003ejvm_flags\u003d[\u0027-Dkey\u003dvalue\u0027]\u003c/code\u003e) so that its\n  behavior differs in each case, such as running a different\n  subset of the tests.  This attribute also enables the use of\n  Java tests outside the \u003ccode\u003ejavatests\u003c/code\u003e tree.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "env_inherit",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n\u003cp\u003e\nSource files of type \u003ccode\u003e.java\u003c/code\u003e are compiled. In case of generated\n\u003ccode\u003e.java\u003c/code\u003e files it is generally advisable to put the generating rule\u0027s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the \u003ccode\u003eouts\u003c/code\u003e of\nthe generating rule. You should not list the generating rule in \u003ccode\u003edeps\u003c/code\u003e\nbecause it is a no-op.\n\u003c/p\u003e\n\u003cp\u003e\nSource files of type \u003ccode\u003e.srcjar\u003c/code\u003e are unpacked and compiled. (This is useful if\nyou need to generate a set of \u003ccode\u003e.java\u003c/code\u003e files with a genrule.)\n\u003c/p\u003e\n\u003cp\u003e\nRules: if the rule (typically \u003ccode\u003egenrule\u003c/code\u003e or \u003ccode\u003efilegroup\u003c/code\u003e) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis argument is almost always required, except if a\n\u003ccode\u003emain_class\u003c/code\u003e attribute specifies a\nclass on the runtime classpath or you specify the \u003ccode\u003eruntime_deps\u003c/code\u003e argument.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of other libraries to be linked in to the target.\nSee general comments about \u003ccode\u003edeps\u003c/code\u003e at\nTypical attributes defined by\nmost build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of data files to include in a Java jar.\n\n\u003cp\u003e\nResources may be source files or generated files.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf resources are specified, they will be bundled in the jar along with the usual\n\u003ccode\u003e.class\u003c/code\u003e files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\u0027s\nstandard directory layout,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at \u003ccode\u003e\u0026lt;workspace root\u0026gt;/x/java/y/java/z\u003c/code\u003e, the\npath of the resource will be \u003ccode\u003ey/java/z\u003c/code\u003e. This heuristic cannot be overridden,\nhowever, the \u003ccode\u003eresource_strip_prefix\u003c/code\u003e attribute can be used to specify a\nspecific alternative directory for resource files.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only.\nLike ordinary \u003ccode\u003edeps\u003c/code\u003e, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n\u003ccode\u003eruntime_deps\u003c/code\u003e and \u003ccode\u003edeps\u003c/code\u003e.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this library at runtime.\nSee general comments about \u003ccode\u003edata\u003c/code\u003e\nat Typical attributes defined by\nmost build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "docString": "Java compiler plugins to run at compile-time.\nEvery \u003ccode\u003ejava_plugin\u003c/code\u003e specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n\u003ccode\u003eexported_plugins\u003c/code\u003e. Resources\ngenerated by the plugin will be included in the resulting jar of this rule.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "launcher",
        "docString": "Specify a binary that will be used to run your Java program instead of the\nnormal \u003ccode\u003ebin/java\u003c/code\u003e program included with the JDK.\nThe target must be a \u003ccode\u003ecc_binary\u003c/code\u003e. Any \u003ccode\u003ecc_binary\u003c/code\u003e that\nimplements the\n\nJava Invocation API can be specified as a value for this attribute.\n\n\u003cp\u003eBy default, Bazel will use the normal JDK launcher (bin/java or java.exe).\u003c/p\u003e\n\n\u003cp\u003eThe related \u003ccode\u003e\n--java_launcher\u003c/code\u003e Bazel flag affects only those\n\u003ccode\u003ejava_binary\u003c/code\u003e and \u003ccode\u003ejava_test\u003c/code\u003e targets that have\n\u003ci\u003enot\u003c/i\u003e specified a \u003ccode\u003elauncher\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNote that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named \u003ccode\u003e{name}_nativedeps.so\u003c/code\u003e, where\n\u003ccode\u003e{name}\u003c/code\u003e is the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule.\nUnused code is \u003cem\u003enot\u003c/em\u003e removed by the linker in this configuration.\u003c/li\u003e\n\n\u003cli\u003eIf you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named \u003ccode\u003e{name}_nativedeps\u003c/code\u003e, where \u003ccode\u003e{name}\u003c/code\u003e\nis the \u003ccode\u003ename\u003c/code\u003e attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat \u003ccode\u003ecc_library\u003c/code\u003e target specifies \u003ccode\u003ealwayslink \u003d True\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen using any launcher other than the default JDK launcher, the format\nof the \u003ccode\u003e*_deploy.jar\u003c/code\u003e output changes. See the main\njava_binary docs for details.\u003c/p\u003e",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "bootclasspath",
        "docString": "Restricted API, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "neverlink",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "Extra compiler options for this binary.\nSubject to \"Make variable\" substitution and\nBourne shell tokenization.\n\u003cp\u003eThese compiler options are passed to javac after the global compiler options.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Allow this library to access the given \u003ccode\u003emodule\u003c/code\u003e or \u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-exports\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "add_opens",
        "docString": "Allow this library to reflectively access the given \u003ccode\u003emodule\u003c/code\u003e or\n\u003ccode\u003epackage\u003c/code\u003e.\n\u003cp\u003e\nThis corresponds to the javac and JVM --add-opens\u003d flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "main_class",
        "docString": "Name of class with \u003ccode\u003emain()\u003c/code\u003e method to use as entry point.\nIf a rule uses this option, it does not need a \u003ccode\u003esrcs\u003d[...]\u003c/code\u003e list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more \u003ccode\u003emain()\u003c/code\u003e methods.\n\u003cp\u003e\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from \u003ccode\u003esrcs\u003c/code\u003e) or\nprovided by direct or transitive dependencies (through \u003ccode\u003eruntime_deps\u003c/code\u003e or\n\u003ccode\u003edeps\u003c/code\u003e). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "jvm_flags",
        "docString": "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to $(location) and\n\"Make variable\" substitution, and\nBourne shell tokenization.\n\n\u003cp\u003eThe wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a \u003ccode\u003e\"$@\"\u003c/code\u003e so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified \u003ci\u003ebefore\u003c/i\u003e the classname on the command\nline.  The contents of \u003ccode\u003ejvm_flags\u003c/code\u003e are added to the wrapper\nscript before the classname is listed.\u003c/p\u003e\n\n\u003cp\u003eNote that this attribute has \u003cem\u003eno effect\u003c/em\u003e on \u003ccode\u003e*_deploy.jar\u003c/code\u003e\noutputs.\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deploy_manifest_lines",
        "docString": "A list of lines to add to the \u003ccode\u003eMETA-INF/manifest.mf\u003c/code\u003e file generated for the\n\u003ccode\u003e*_deploy.jar\u003c/code\u003e target. The contents of this attribute are \u003cem\u003enot\u003c/em\u003e subject\nto \"Make variable\" substitution.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "stamp",
        "docString": "Whether to encode build information into the binary. Possible values:\n\u003cul\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 1\u003c/code\u003e: Always stamp the build information into the binary, even in\n  \u003ccode\u003e--nostamp\u003c/code\u003e builds. \u003cb\u003eThis\n  setting should be avoided\u003c/b\u003e, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d 0\u003c/code\u003e: Always replace build information by constant values. This\n  gives good build result caching.\n\u003c/li\u003e\n\u003cli\u003e\n  \u003ccode\u003estamp \u003d -1\u003c/code\u003e: Embedding of build information is controlled by the\n  \u003ccode\u003e--[no]stamp\u003c/code\u003e flag.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStamped binaries are \u003cem\u003enot\u003c/em\u003e rebuilt unless their dependencies change.\u003c/p\u003e",
        "required": false,
        "default": "0",
        "positional": false
      },
      {
        "name": "use_testrunner",
        "docString": "Use the test runner (by default\n\u003ccode\u003ecom.google.testing.junit.runner.BazelTestRunner\u003c/code\u003e) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of \u003ccode\u003ebazel.test_suite\u003c/code\u003e\nsystem property.\n\n\u003cbr/\u003e\nYou can use this to override the default\nbehavior, which is to use test runner for\n\u003ccode\u003ejava_test\u003c/code\u003e rules,\nand not use it for \u003ccode\u003ejava_binary\u003c/code\u003e rules.  It is unlikely\nyou will want to do this.  One use is for \u003ccode\u003eAllTest\u003c/code\u003e\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The \u003ccode\u003eAllTest\u003c/code\u003e\nrule must be declared as a \u003ccode\u003ejava_binary\u003c/code\u003e, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with \u003ccode\u003emain_class\u003c/code\u003e attribute.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "use_launcher",
        "docString": "Whether the binary should use a custom launcher.\n\n\u003cp\u003eIf this attribute is set to false, the\nlauncher attribute  and the related\n\u003ccode\u003e--java_launcher\u003c/code\u003e flag\nwill be ignored for this target.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "env",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "classpath_resources",
        "docString": "\u003cem class\u003d\"harmful\"\u003eDO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)\u003c/em\u003e\n\u003cp\u003e\nA list of resources that must be located at the root of the java tree. This attribute\u0027s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly \u003ccode\u003e\"myconfig.xml\"\u003c/code\u003e. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n\u003c/p\u003e",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "create_executable",
        "docString": "Deprecated, use \u003ccode\u003ejava_single_jar\u003c/code\u003e instead.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources.\n\u003cp\u003e\nIf specified, this path prefix is stripped from every file in the \u003ccode\u003eresources\u003c/code\u003e\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n\u003ccode\u003estuff/java/foo/bar/a.txt\u003c/code\u003e will be located at \u003ccode\u003efoo/bar/a.txt\u003c/code\u003e.\n\u003c/p\u003e",
        "required": false,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "java_package_configuration",
    "docString": "\u003cp\u003e\nConfiguration to apply to a set of packages.\nConfigurations can be added to\n\u003ccode\u003ejava_toolchain.javacopts\u003c/code\u003es.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_package_configuration_example\"\u003eExample:\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_package_configuration(\n    name \u003d \"my_configuration\",\n    packages \u003d [\":my_packages\"],\n    javacopts \u003d [\"-Werror\"],\n)\n\npackage_group(\n    name \u003d \"my_packages\",\n    packages \u003d [\n        \"//com/my/project/...\",\n        \"-//com/my/project/testing/...\",\n    ],\n)\n\njava_toolchain(\n    ...,\n    package_configuration \u003d [\n        \":my_configuration\",\n    ]\n)\n\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "packages",
        "docString": "The set of \u003ccode\u003epackage_group\u003c/code\u003es\nthe configuration should be applied to.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "Java compiler flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this configuration at runtime.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "system",
        "docString": "Corresponds to javac\u0027s --system flag.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "output_licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "java_runtime",
    "docString": "\u003cp\u003e\nSpecifies the configuration for a Java runtime.\n\u003c/p\u003e\n\n\u003ch4 id\u003d\"java_runtime_example\"\u003eExample:\u003c/h4\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_runtime(\n    name \u003d \"jdk-9-ea+153\",\n    srcs \u003d glob([\"jdk9-ea+153/**\"]),\n    java_home \u003d \"jdk9-ea+153\",\n)\n\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "default_cds",
        "docString": "Default CDS archive for hermetic \u003ccode\u003ejava_runtime\u003c/code\u003e. When hermetic\nis enabled for a \u003ccode\u003ejava_binary\u003c/code\u003e target the \u003ccode\u003ejava_runtime\u003c/code\u003e\ndefault CDS is packaged in the hermetic deploy JAR.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "hermetic_srcs",
        "docString": "Files in the runtime needed for hermetic deployments.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "hermetic_static_libs",
        "docString": "The libraries that are statically linked with the launcher for hermetic deployments",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "java",
        "docString": "The path to the java executable.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "java_home",
        "docString": "The path to the root of the runtime.\nSubject to \"Make\" variable substitution.\nIf this path is absolute, the rule denotes a non-hermetic Java runtime with a well-known\npath. In that case, the \u003ccode\u003esrcs\u003c/code\u003e and \u003ccode\u003ejava\u003c/code\u003e attributes must be empty.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "lib_ct_sym",
        "docString": "The lib/ct.sym file needed for compilation with \u003ccode\u003e--release\u003c/code\u003e. If not specified and\nthere is exactly one file in \u003ccode\u003esrcs\u003c/code\u003e whose path ends with\n\u003ccode\u003e/lib/ct.sym\u003c/code\u003e, that file is used.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "lib_modules",
        "docString": "The lib/modules file needed for hermetic deployments.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "All files in the runtime.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "version",
        "docString": "The feature version of the Java runtime. I.e., the integer returned by\n\u003ccode\u003eRuntime.version().feature()\u003c/code\u003e.",
        "required": false,
        "default": "0",
        "positional": false
      },
      {
        "name": "output_licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "java_toolchain",
    "docString": "\u003cp\u003e\nSpecifies the configuration for the Java compiler. Which toolchain to be used can be changed through\nthe --java_toolchain argument. Normally you should not write those kind of rules unless you want to\ntune your Java compiler.\n\u003c/p\u003e\n\n\u003ch4\u003eExamples\u003c/h4\u003e\n\n\u003cp\u003eA simple example would be:\n\u003c/p\u003e\n\n\u003cpre class\u003d\"code\"\u003e\n\u003ccode class\u003d\"lang-starlark\"\u003e\n\njava_toolchain(\n    name \u003d \"toolchain\",\n    source_version \u003d \"7\",\n    target_version \u003d \"7\",\n    bootclasspath \u003d [\"//tools/jdk:bootclasspath\"],\n    xlint \u003d [ \"classfile\", \"divzero\", \"empty\", \"options\", \"path\" ],\n    javacopts \u003d [ \"-g\" ],\n    javabuilder \u003d \":JavaBuilder_deploy.jar\",\n)\n\u003c/code\u003e\n\u003c/pre\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "android_lint_data",
        "docString": "Labels of tools available for label-expansion in android_lint_jvm_opts.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "android_lint_opts",
        "docString": "The list of Android Lint arguments.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "android_lint_jvm_opts",
        "docString": "The list of arguments for the JVM when invoking Android Lint.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "android_lint_package_configuration",
        "docString": "Android Lint Configuration that should be applied to the specified package groups.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "android_lint_runner",
        "docString": "Label of the Android Lint runner, if any.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "bootclasspath",
        "docString": "The Java target bootclasspath entries. Corresponds to javac\u0027s -bootclasspath flag.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "compatible_javacopts",
        "docString": "Internal API, do not use!",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "deps_checker",
        "docString": "Label of the ImportDepsChecker deploy jar.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "forcibly_disable_header_compilation",
        "docString": "Overrides --java_header_compilation to disable header compilation on platforms that do not\nsupport it, e.g. JDK 7 Bazel.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "genclass",
        "docString": "Label of the GenClass deploy jar.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "header_compiler",
        "docString": "Label of the header compiler. Required if --java_header_compilation is enabled.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "header_compiler_direct",
        "docString": "Optional label of the header compiler to use for direct classpath actions that do not\ninclude any API-generating annotation processors.\n\n\u003cp\u003eThis tool does not support annotation processing.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "header_compiler_builtin_processors",
        "docString": "Internal API, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "ijar",
        "docString": "Label of the ijar executable.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "jacocorunner",
        "docString": "Label of the JacocoCoverageRunner deploy jar.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javabuilder",
        "docString": "Label of the JavaBuilder deploy jar.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javabuilder_data",
        "docString": "Labels of data available for label-expansion in javabuilder_jvm_opts.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "javabuilder_jvm_opts",
        "docString": "The list of arguments for the JVM when invoking JavaBuilder.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "java_runtime",
        "docString": "The java_runtime to use with this toolchain. It defaults to java_runtime\nin execution configuration.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javac_supports_workers",
        "docString": "True if JavaBuilder supports running as a persistent worker, false if it doesn\u0027t.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "javac_supports_multiplex_workers",
        "docString": "True if JavaBuilder supports running as a multiplex persistent worker, false if it doesn\u0027t.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "javac_supports_worker_cancellation",
        "docString": "True if JavaBuilder supports cancellation of persistent workers, false if it doesn\u0027t.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "javac_supports_worker_multiplex_sandboxing",
        "docString": "True if JavaBuilder supports running as a multiplex persistent worker with sandboxing, false if it doesn\u0027t.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "javacopts",
        "docString": "The list of extra arguments for the Java compiler. Please refer to the Java compiler\ndocumentation for the extensive list of possible Java compiler flags.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jspecify_implicit_deps",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "jspecify_javacopts",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jspecify_packages",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jspecify_processor",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "jspecify_processor_class",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "jspecify_stubs",
        "docString": "Experimental, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jvm_opts",
        "docString": "The list of arguments for the JVM when invoking the Java compiler. Please refer to the Java\nvirtual machine documentation for the extensive list of possible flags for this option.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "misc",
        "docString": "Deprecated: use javacopts instead",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "oneversion",
        "docString": "Label of the one-version enforcement binary.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "oneversion_whitelist",
        "docString": "Deprecated: use oneversion_allowlist instead",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "oneversion_allowlist",
        "docString": "Label of the one-version allowlist.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "oneversion_allowlist_for_tests",
        "docString": "Label of the one-version allowlist for tests.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "package_configuration",
        "docString": "Configuration that should be applied to the specified package groups.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "proguard_allowlister",
        "docString": "Label of the Proguard allowlister.",
        "required": false,
        "default": "\"@bazel_tools//tools/jdk:proguard_whitelister\"",
        "positional": false
      },
      {
        "name": "reduced_classpath_incompatible_processors",
        "docString": "Internal API, do not use!",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "singlejar",
        "docString": "Label of the SingleJar deploy jar.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "source_version",
        "docString": "The Java source version (e.g., \u00276\u0027 or \u00277\u0027). It specifies which set of code structures\nare allowed in the Java source code.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "target_version",
        "docString": "The Java target version (e.g., \u00276\u0027 or \u00277\u0027). It specifies for which Java runtime the class\nshould be build.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "timezone_data",
        "docString": "Label of a resource jar containing timezone data. If set, the timezone data is added as an\nimplicitly runtime dependency of all java_binary rules.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "tools",
        "docString": "Labels of tools available for label-expansion in jvm_opts.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "turbine_data",
        "docString": "Labels of data available for label-expansion in turbine_jvm_opts.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "turbine_jvm_opts",
        "docString": "The list of arguments for the JVM when invoking turbine.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "xlint",
        "docString": "The list of warning to add or removes from default list. Precedes it with a dash to\nremoves it. Please see the Javac documentation on the -Xlint options for more information.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "licenses",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_javac_options",
    "docString": "Define java compiler options for \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules with java sources.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "warn",
        "docString": "Control warning behaviour.",
        "required": false,
        "default": "\"report\"",
        "positional": false
      },
      {
        "name": "release",
        "docString": "Compile for the specified Java SE release",
        "required": false,
        "default": "\"default\"",
        "positional": false
      },
      {
        "name": "x_ep_disable_all_checks",
        "docString": "See javac -XepDisableAllChecks documentation",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_lint",
        "docString": "See javac -Xlint: documentation",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "xd_suppress_notes",
        "docString": "See javac -XDsuppressNotes documentation",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_explicit_api_mode",
        "docString": "Enable explicit API mode for Kotlin libraries.",
        "required": false,
        "default": "\"off\"",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Export internal jdk apis",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_kotlinc_options",
    "docString": "Define kotlin compiler options.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "warn",
        "docString": "Control warning behaviour.",
        "required": false,
        "default": "\"report\"",
        "positional": false
      },
      {
        "name": "include_stdlibs",
        "docString": "Don\u0027t automatically include the Kotlin standard libraries into the classpath (stdlib and reflect).",
        "required": false,
        "default": "\"all\"",
        "positional": false
      },
      {
        "name": "x_skip_prerelease_check",
        "docString": "Suppress errors thrown when using pre-release classes.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_context_receivers",
        "docString": "Enable experimental context receivers.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_suppress_version_warnings",
        "docString": "Suppress warnings about outdated, inconsistent, or experimental language or API versions.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_inline_classes",
        "docString": "Enable experimental inline classes",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_jvm_default",
        "docString": "Specifies that a JVM default method should be generated for non-abstract Kotlin interface member.",
        "required": false,
        "default": "\"off\"",
        "positional": false
      },
      {
        "name": "x_no_call_assertions",
        "docString": "Don\u0027t generate not-null assertions for arguments of platform types",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_no_param_assertions",
        "docString": "Don\u0027t generate not-null assertions on parameters of methods accessible from Java",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_no_receiver_assertions",
        "docString": "Don\u0027t generate not-null assertion for extension receiver arguments of platform types",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_explicit_api_mode",
        "docString": "Enable explicit API mode for Kotlin libraries.",
        "required": false,
        "default": "\"off\"",
        "positional": false
      },
      {
        "name": "java_parameters",
        "docString": "Generate metadata for Java 1.8+ reflection on method parameters.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_multi_platform",
        "docString": "Enable experimental language support for multi-platform projects",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_sam_conversions",
        "docString": "Change codegen behavior of SAM/functional interfaces",
        "required": false,
        "default": "\"class\"",
        "positional": false
      },
      {
        "name": "x_lambdas",
        "docString": "Change codegen behavior of lambdas",
        "required": false,
        "default": "\"class\"",
        "positional": false
      },
      {
        "name": "x_emit_jvm_type_annotations",
        "docString": "Basic support for type annotations in JVM bytecode.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_optin",
        "docString": "Define APIs to opt-in to.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "x_use_k2",
        "docString": "Compile using experimental K2. K2 is a new compiler pipeline, no compatibility guarantees are yet provided",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_no_optimize",
        "docString": "Disable optimizations",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_backend_threads",
        "docString": "When using the IR backend, run lowerings by file in N parallel threads. 0 means use a thread per processor core. Default value is 1.",
        "required": false,
        "default": "1",
        "positional": false
      },
      {
        "name": "x_enable_incremental_compilation",
        "docString": "Enable incremental compilation",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_report_perf",
        "docString": "Report detailed performance statistics",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_use_fir_lt",
        "docString": "Compile using LightTree parser with Front-end IR. Warning: this feature is far from being production-ready",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_no_source_debug_extension",
        "docString": "Do not generate @kotlin.jvm.internal.SourceDebugExtension annotation on a class with the copy of SMAP",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_type_enhancement_improvements_strict_mode",
        "docString": "Enables strict mode for type enhancement improvements, enforcing stricter type checking and enhancements.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_jsr_305",
        "docString": "Specifies how to handle JSR-305 annotations in Kotlin code. Options are \u0027default\u0027, \u0027ignore\u0027, \u0027warn\u0027, and \u0027strict\u0027.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "x_assertions",
        "docString": "Configures how assertions are handled. The \u0027jvm\u0027 option enables assertions in JVM code.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "x_jspecify_annotations",
        "docString": "Controls how JSpecify annotations are treated. Options are \u0027default\u0027, \u0027ignore\u0027, \u0027warn\u0027, and \u0027strict\u0027.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "x_consistent_data_class_copy_visibility",
        "docString": "The effect of this compiler flag is the same as applying @ConsistentCopyVisibility annotation to all data classes in the module. See https://youtrack.jetbrains.com/issue/KT-11914",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "jvm_target",
        "docString": "The target version of the generated JVM bytecode",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "x_jdk_release",
        "docString": "Compile against the specified JDK API version, similarly to javac\u0027s \u0027-release\u0027. This requires JDK 9 or newer.\nThe supported versions depend on the JDK used; for JDK 17+, the supported versions are 1.8 and 9â21.\nThis also sets the value of \u0027-jvm-target\u0027 to be equal to the selected JDK version.",
        "required": false,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_compiler_plugin",
    "docString": "Define a plugin for the Kotlin compiler to run. The plugin can then be referenced in the \u003ccode\u003eplugins\u003c/code\u003e attribute\nof the \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules.\n\nAn example can be found under \u003ccode\u003e//examples/plugin\u003c/code\u003e:\n\n\u003ccode\u003ebzl\nkt_compiler_plugin(\n    name \u003d \"open_for_testing_plugin\",\n    id \u003d \"org.jetbrains.kotlin.allopen\",\n    options \u003d {\n        \"annotation\": \"plugin.OpenForTesting\",\n    },\n    deps \u003d [\n        \"//kotlin/compiler:allopen-compiler-plugin\",\n    ],\n)\n\nkt_jvm_library(\n    name \u003d \"open_for_testing\",\n    srcs \u003d [\"OpenForTesting.kt\"],\n)\n\nkt_jvm_library(\n    name \u003d \"user\",\n    srcs \u003d [\"User.kt\"],\n    plugins \u003d [\":open_for_testing_plugin\"],\n    deps \u003d [\n        \":open_for_testing\",\n    ],\n)\n\u003c/code\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of libraries to be added to the compiler\u0027s plugin classpath",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "id",
        "docString": "The ID of the plugin",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "options",
        "docString": "Dictionary of options to be passed to the plugin.\nSupports the following template values:\n\n- \u003ccode\u003e{generatedClasses}\u003c/code\u003e: directory for generated class output\n- \u003ccode\u003e{temp}\u003c/code\u003e: temporary directory, discarded between invocations\n- \u003ccode\u003e{generatedSources}\u003c/code\u003e:  directory for generated source output\n- \u003ccode\u003e{classpath}\u003c/code\u003e : replaced with a list of jars separated by the filesystem appropriate separator.",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "compile_phase",
        "docString": "Runs the compiler plugin during kotlin compilation. Known examples: \u003ccode\u003eallopen\u003c/code\u003e, \u003ccode\u003esam_with_reciever\u003c/code\u003e",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "stubs_phase",
        "docString": "Runs the compiler plugin in kapt stub generation.",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "target_embedded_compiler",
        "docString": "Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc\ndependencies, and will fail when running against a non-embeddable compiler.",
        "required": false,
        "default": "False",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_ksp_plugin",
    "docString": "Define a KSP plugin for the Kotlin compiler to run. The plugin can then be referenced in the \u003ccode\u003eplugins\u003c/code\u003e attribute\nof the \u003ccode\u003ekt_jvm_*\u003c/code\u003e and \u003ccode\u003ekt_android_*\u003c/code\u003e rules.\n\nAn example can be found under \u003ccode\u003e//examples/ksp\u003c/code\u003e:\n\n\u003ccode\u003e\u003c/code\u003e`bzl\nkt_ksp_plugin(\n    name \u003d \"moshi-kotlin-codegen\",\n    processor_class \u003d \"com.squareup.moshi.kotlin.codegen.ksp.JsonClassSymbolProcessorProvider\",\n    deps \u003d [\n        \"@maven//:com_squareup_moshi_moshi\",\n        \"@maven//:com_squareup_moshi_moshi_kotlin\",\n        \"@maven//:com_squareup_moshi_moshi_kotlin_codegen\",\n    ],\n)\n\nkt_jvm_library(\n    name \u003d \"lib\",\n    srcs \u003d glob([\"*.kt\"]),\n    plugins \u003d [\"//:moshi-kotlin-codegen\"],\n)",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "The list of libraries to be added to the compiler\u0027s plugin classpath",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "processor_class",
        "docString": "The fully qualified class name that the Java compiler uses as an entry point to the annotation processor.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "target_embedded_compiler",
        "docString": "Plugin was compiled against the embeddable kotlin compiler. These plugins expect shaded kotlinc\ndependencies, and will fail when running against a non-embeddable compiler.",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "generates_java",
        "docString": "Runs Java compilation action for plugin generating Java output.",
        "required": false,
        "default": "False",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_plugin_cfg",
    "docString": "Configurations for kt_compiler_plugin, ksp_plugin, and java_plugin.\n\nThis allows setting options and dependencies independently from the initial plugin definition.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "plugin",
        "docString": "The plugin to associate with this configuration",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "options",
        "docString": "A dictionary of flag to values to be used as plugin configuration options.",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "Dependencies for this configuration.",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_javac_options",
    "docString": "Define java compiler options for \u003ccode\u003ekt_jvm_*\u003c/code\u003e rules with java sources.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "warn",
        "docString": "Control warning behaviour.",
        "required": false,
        "default": "\"report\"",
        "positional": false
      },
      {
        "name": "release",
        "docString": "Compile for the specified Java SE release",
        "required": false,
        "default": "\"default\"",
        "positional": false
      },
      {
        "name": "x_ep_disable_all_checks",
        "docString": "See javac -XepDisableAllChecks documentation",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_lint",
        "docString": "See javac -Xlint: documentation",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "xd_suppress_notes",
        "docString": "See javac -XDsuppressNotes documentation",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "x_explicit_api_mode",
        "docString": "Enable explicit API mode for Kotlin libraries.",
        "required": false,
        "default": "\"off\"",
        "positional": false
      },
      {
        "name": "add_exports",
        "docString": "Export internal jdk apis",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_jvm_binary",
    "docString": "Builds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule. The wrapper\nshell script uses a classpath that includes, among other things, a jar file for each library on which the binary\ndepends.\n\n**Note:** This rule does not have all of the features found in \u003ccode\u003ejava_binary\u003c/code\u003e.\nIt is appropriate for building workspace utilities. \u003ccode\u003ejava_binary\u003c/code\u003e should be preferred for release artefacts.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "java_stub_template",
        "required": false,
        "default": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of files that should be include in a Java jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "resource_jars",
        "docString": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "associates",
        "docString": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "module_name",
        "docString": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "kotlinc_opts",
        "docString": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javac_opts",
        "docString": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "jvm_flags",
        "docString": "A list of flags to embed in the wrapper script generated for running this binary. Note: does not yet\nsupport make variable substitution.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "main_class",
        "docString": "Name of class with main() method to use as entry point.",
        "required": true,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_jvm_import",
    "docString": "Import Kotlin jars.\n\n## examples\n\n\u003ccode\u003ebzl\n# Old style usage -- reference file groups, do not used this.\nkt_jvm_import(\n    name \u003d \"kodein\",\n    jars \u003d [\n        \"@com_github_salomonbrys_kodein_kodein//jar:file\",\n        \"@com_github_salomonbrys_kodein_kodein_core//jar:file\"\n    ]\n)\n\n# This style will pull in the transitive runtime dependencies of the targets as well.\nkt_jvm_import(\n    name \u003d \"kodein\",\n    jars \u003d [\n        \"@com_github_salomonbrys_kodein_kodein//jar\",\n        \"@com_github_salomonbrys_kodein_kodein_core//jar\"\n    ]\n)\n\n# Import a single kotlin jar.\nkt_jvm_import(\n    name \u003d \"kotlin-stdlib\",\n    jars \u003d [\"lib/kotlin-stdlib.jar\"],\n    srcjar \u003d \"lib/kotlin-stdlib-sources.jar\"\n)\n\u003c/code\u003e",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "jars",
        "docString": "The jars listed here are equavalent to an export attribute. The label should be either to a single\nclass jar, or one or more filegroup labels.  The filegroups, when resolved, must contain  only one jar\ncontaining classes, and (optionally) one peer file containing sources, named \u003ccode\u003e\u003cjarname\u003e-sources.jar\u003c/code\u003e.\n\nDEPRECATED - please use \u003ccode\u003ejar\u003c/code\u003e and \u003ccode\u003esrcjar\u003c/code\u003e attributes.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "jar",
        "docString": "The jar listed here is equivalent to an export attribute.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "srcjar",
        "docString": "The sources for the class jar.",
        "required": false,
        "default": "\"@rules_kotlin//third_party:empty.jar\"",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Additional runtime deps.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "Compile and runtime dependencies",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exports",
        "docString": "Exported libraries.\n\nDeps listed here will be made available to other rules, as if the parents explicitly depended on\nthese deps. This is not true for regular (non-exported) deps.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exported_compiler_plugins",
        "docString": "Exported compiler plugins.\n\nCompiler plugins listed here will be treated as if they were added in the plugins\nattribute of any targets that directly depend on this target. Like java_plugins\u0027\nexported_plugins, this is not transitive",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "neverlink",
        "docString": "If true only use this library for compilation and not at runtime.",
        "required": false,
        "default": "False",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_jvm_library",
    "docString": "This rule compiles and links Kotlin and Java sources into a .jar file.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "java_stub_template",
        "required": false,
        "default": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of files that should be include in a Java jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "resource_jars",
        "docString": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "associates",
        "docString": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "module_name",
        "docString": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "kotlinc_opts",
        "docString": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javac_opts",
        "docString": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "exports",
        "docString": "Exported libraries.\n\nDeps listed here will be made available to other rules, as if the parents explicitly depended on\nthese deps. This is not true for regular (non-exported) deps.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "exported_compiler_plugins",
        "docString": "Exported compiler plugins.\n\nCompiler plugins listed here will be treated as if they were added in the plugins attribute\nof any targets that directly depend on this target. Like \u003ccode\u003ejava_plugin\u003c/code\u003es exported_plugins,\nthis is not transitive",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "neverlink",
        "docString": "If true only use this library for compilation and not at runtime.",
        "required": false,
        "default": "False",
        "positional": false
      }
    ]
  },
  {
    "name": "kt_jvm_test",
    "docString": "Setup a simple kotlin_test.\n\n**Notes:**\n* The kotlin test library is not added implicitly, it is available with the label\n\u003ccode\u003e@rules_kotlin//kotlin/compiler:kotlin-test\u003c/code\u003e.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "java_stub_template",
        "required": false,
        "default": "\"@rules_kotlin//third_party:java_stub_template.txt\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of source files that are processed to create the target, this can contain both Java and Kotlin\nfiles. Java analysis occurs first so Kotlin classes may depend on Java classes in the same compilation unit.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "A list of dependencies of this rule.See general comments about \u003ccode\u003edeps\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "runtime_deps",
        "docString": "Libraries to make available to the final binary or test at runtime only. Like ordinary deps, these will\nappear on the runtime classpath, but unlike them, not on the compile-time classpath.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resources",
        "docString": "A list of files that should be include in a Java jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "resource_strip_prefix",
        "docString": "The path prefix to strip from Java resources, files residing under common prefix such as\n\u003ccode\u003esrc/main/resources\u003c/code\u003e or \u003ccode\u003esrc/test/resources\u003c/code\u003e or \u003ccode\u003ekotlin\u003c/code\u003e will have stripping applied by convention.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "resource_jars",
        "docString": "Set of archives containing Java resources. If specified, the contents of these jars are merged into\nthe output jar.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "The list of files needed by this rule at runtime. See general comments about \u003ccode\u003edata\u003c/code\u003e at\nAttributes common to all build rules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "associates",
        "docString": "Kotlin deps who should be considered part of the same module/compilation-unit\nfor the purposes of \"internal\" access. Such deps must all share the same module space\nand so a target cannot associate to two deps from two different modules.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "plugins",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "module_name",
        "docString": "The name of the module, if not provided the module name is derived from the label. --e.g.,\n\u003ccode\u003e//some/package/path:label_name\u003c/code\u003e is translated to\n\u003ccode\u003esome_package_path-label_name\u003c/code\u003e.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "kotlinc_opts",
        "docString": "Kotlinc options to be used when compiling this target. These opts if provided\nwill be used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "javac_opts",
        "docString": "Javac options to be used when compiling this target. These opts if provided will\nbe used instead of the ones provided to the toolchain.",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "jvm_flags",
        "docString": "A list of flags to embed in the wrapper script generated for running this binary. Note: does not yet\nsupport make variable substitution.",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "test_class",
        "docString": "The Java class to be loaded by the test runner.",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "main_class",
        "required": false,
        "default": "\"com.google.testing.junit.runner.BazelTestRunner\"",
        "positional": false
      },
      {
        "name": "env",
        "docString": "Specifies additional environment variables to set when the target is executed by bazel test.",
        "required": false,
        "default": "{}",
        "positional": false
      }
    ]
  },
  {
    "name": "ktlint_fix",
    "docString": "Lint Kotlin files and automatically fix them as needed",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "Source files to review and fix",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "config",
        "docString": "ktlint_config to use",
        "required": false,
        "default": "None",
        "positional": false
      }
    ]
  },
  {
    "name": "ktlint_test",
    "docString": "Lint Kotlin files, and fail if the linter raises errors.",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "Source files to lint",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "config",
        "docString": "ktlint_config to use",
        "required": false,
        "default": "None",
        "positional": false
      }
    ]
  },
  {
    "name": "ktlint_config",
    "docString": "Used to configure ktlint.\n\n\u003ccode\u003ektlint\u003c/code\u003e can be configured to use a \u003ccode\u003e.editorconfig\u003c/code\u003e, as documented at\nhttps://github.com/pinterest/ktlint/#editorconfig",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "editorconfig",
        "docString": "Editor config file to use",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "android_rules_enabled",
        "docString": "Turn on Android Kotlin Style Guide compatibility",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "experimental_rules_enabled",
        "docString": "Turn on experimental rules (ktlint-ruleset-experimental)",
        "required": false,
        "default": "False",
        "positional": false
      }
    ]
  },
  {
    "name": "go_binary",
    "docString": "This builds an executable from a set of source files,\n        which must all be in the \u003ccode\u003emain\u003c/code\u003e package. You can run the binary with\n        \u003ccode\u003ebazel run\u003c/code\u003e, or you can build it with \u003ccode\u003ebazel build\u003c/code\u003e and run it directly.\u003cbr\u003e\u003cbr\u003e\n        ***Note:*** \u003ccode\u003ename\u003c/code\u003e should be the same as the desired name of the generated binary.\u003cbr\u003e\u003cbr\u003e\n        **Providers:**\n        \u003cul\u003e\n          \u003cli\u003e[GoArchive]\u003c/li\u003e\n        \u003c/ul\u003e\n        ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "basename",
        "docString": "The basename of this binary. The binary\n                basename may also be platform-dependent: on Windows, we add an .exe extension.\n                ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "cdeps",
        "docString": "The list of other libraries that the c code depends on.\n                This can be anything that would be allowed in [cc_library deps]\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cgo",
        "docString": "If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain\n                C, C++, Objective-C, and Objective-C++ files and non-Go assembly files.\n                When cgo is enabled, these files will be compiled with the C/C++ toolchain\n                and included in the package. Note that this attribute does not force cgo\n                to be enabled. Cgo is enabled for non-cross-compiling builds when a C/C++\n                toolchain is configured.\n                ",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "clinkopts",
        "docString": "List of flags to add to the C link command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "copts",
        "docString": "List of flags to add to the C compilation command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cppopts",
        "docString": "List of flags to add to the C/C++ preprocessor command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cxxopts",
        "docString": "List of flags to add to the C++ compilation command.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "List of files needed by this rule at run-time. This may include data files\n                needed or other programs that may be executed. The [bazel] package may be\n                used to locate run files; they may appear in different places depending on the\n                operating system and environment. See [data dependencies] for more\n                information on data files.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "List of Go libraries this package imports directly.\n                These may be \u003ccode\u003ego_library\u003c/code\u003e rules or compatible rules with the [GoInfo] provider.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embed",
        "docString": "List of Go libraries whose sources should be compiled together with this\n                binary\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n                \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the [GoInfo] provider.\n                Embedded libraries must all have the same \u003ccode\u003eimportpath\u003c/code\u003e,\n                which must match the \u003ccode\u003eimportpath\u003c/code\u003e for this \u003ccode\u003ego_binary\u003c/code\u003e if one is\n                specified. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e, and the\n                embedding binary may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding] for\n                more information.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embedsrcs",
        "docString": "The list of files that may be embedded into the compiled package using\n                \u003ccode\u003e//go:embed\u003c/code\u003e directives. All files must be in the same logical directory\n                or a subdirectory as source files. All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e\n                directives must be in the same logical directory. It\u0027s okay to mix static and\n                generated source files and static and generated embeddable files.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "env",
        "docString": "Environment variables to set when the binary is executed with bazel run.\n                The values (but not keys) are subject to\n                location expansion but not full\n                make variable expansion.\n                ",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "gc_goopts",
        "docString": "List of flags to add to the Go compilation command when using the gc compiler.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "gc_linkopts",
        "docString": "List of flags to add to the Go link command when using the gc compiler.\n                Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "goarch",
        "docString": "Forces a binary to be cross-compiled for a specific architecture. It\u0027s usually\n                better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n                This disables cgo by default, since a cross-compiling C/C++ toolchain is\n                rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n                See [Cross compilation] for more information.\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "goos",
        "docString": "Forces a binary to be cross-compiled for a specific operating system. It\u0027s\n                usually better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n                This disables cgo by default, since a cross-compiling C/C++ toolchain is\n                rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n                See [Cross compilation] for more information.\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "gotags",
        "docString": "Enables a list of build tags when evaluating [build constraints]. Useful for\n                conditional compilation.\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "importpath",
        "docString": "The import path of this binary. Binaries can\u0027t actually be imported, but this\n                may be used by [go_path] and other tools to report the location of source\n                files. This may be inferred from embedded libraries.\n                ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "linkmode",
        "docString": "Determines how the binary should be built and linked. This accepts some of\n                the same values as \u003ccode\u003ego build -buildmode\u003c/code\u003e and works the same way.\n                \u003cbr\u003e\u003cbr\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e (default): Controlled by \u003ccode\u003e//go/config:linkmode\u003c/code\u003e, which defaults to \u003ccode\u003enormal\u003c/code\u003e.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003enormal\u003c/code\u003e: Builds a normal executable with position-dependent code.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003epie\u003c/code\u003e: Builds a position-independent executable.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003eplugin\u003c/code\u003e: Builds a shared library that can be loaded as a Go plugin. Only supported on platforms that support plugins.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003ec-shared\u003c/code\u003e: Builds a shared library that can be linked into a C program.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003ec-archive\u003c/code\u003e: Builds an archive that can be linked into a C program.\u003c/li\u003e\n                \u003c/ul\u003e\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "msan",
        "docString": "Controls whether code is instrumented for memory sanitization. May be one of\n                \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n                disabled. In most cases, it\u0027s better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:msan\u003c/code\u003e. See [mode attributes], specifically\n                [msan].\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "out",
        "docString": "Sets the output filename for the generated executable. When set, \u003ccode\u003ego_binary\u003c/code\u003e\n                will write this file without mode-specific directory prefixes, without\n                linkmode-specific prefixes like \"lib\", and without platform-specific suffixes\n                like \".exe\". Note that without a mode-specific directory prefix, the\n                output file (but not its dependencies) will be invalidated in Bazel\u0027s cache\n                when changing configurations.\n                ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "pgoprofile",
        "docString": "Provides a pprof file to be used for profile guided optimization when compiling go targets.\n                A pprof file can also be provided via \u003ccode\u003e--@io_bazel_rules_go//go/config:pgoprofile\u003d\u003clabel of a pprof file\u003e\u003c/code\u003e.\n                Profile guided optimization is only supported on go 1.20+.\n                See https://go.dev/doc/pgo for more information.\n                ",
        "required": false,
        "default": "//go/config:empty",
        "positional": false
      },
      {
        "name": "pure",
        "docString": "Controls whether cgo source code and dependencies are compiled and linked,\n                similar to setting \u003ccode\u003eCGO_ENABLED\u003c/code\u003e. May be one of \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e,\n                or \u003ccode\u003eauto\u003c/code\u003e. If \u003ccode\u003eauto\u003c/code\u003e, pure mode is enabled when no C/C++\n                toolchain is configured or when cross-compiling. It\u0027s usually better to\n                control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:pure\u003c/code\u003e. See [mode attributes], specifically\n                [pure].\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "race",
        "docString": "Controls whether code is instrumented for race detection. May be one of\n                \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n                disabled. In most cases, it\u0027s better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:race\u003c/code\u003e. See [mode attributes], specifically\n                [race].\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of Go source files that are compiled to create the package.\n                Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e\n                attribute is set, in which case,\n                \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e\n                files are also permitted. Files may be filtered at build time\n                using Go [build constraints].\n                ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "static",
        "docString": "Controls whether a binary is statically linked. May be one of \u003ccode\u003eon\u003c/code\u003e,\n                \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available on all platforms or in all\n                modes. It\u0027s usually better to control this on the command line with\n                \u003ccode\u003e--@io_bazel_rules_go//go/config:static\u003c/code\u003e. See [mode attributes],\n                specifically [static].\n                ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "x_defs",
        "docString": "Map of defines to add to the go link command.\n                See [Defines and stamping] for examples of how to use these.\n                ",
        "required": false,
        "default": "{}",
        "positional": false
      }
    ]
  },
  {
    "name": "go_cross_binary",
    "docString": "This wraps an executable built by \u003ccode\u003ego_binary\u003c/code\u003e to cross compile it\n    for a different platform, and/or compile it using a different version\n    of the golang SDK.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoArchive]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "compilation_mode",
        "docString": "The compilation_mode to use for compiling the \u003ccode\u003etarget\u003c/code\u003e.\n            Must be one of \u003ccode\u003edbg\u003c/code\u003e, \u003ccode\u003efastbuild\u003c/code\u003e, or \u003ccode\u003eopt\u003c/code\u003e. If unspecified, use the\n            same compilation mode as the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "platform",
        "docString": "The platform to cross compile the \u003ccode\u003etarget\u003c/code\u003e for.\n            If unspecified, the \u003ccode\u003etarget\u003c/code\u003e will be compiled with the\n            same platform as it would\u0027ve with the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            ",
        "required": false,
        "default": "None",
        "positional": false
      },
      {
        "name": "sdk_version",
        "docString": "The golang SDK version to use for compiling the \u003ccode\u003etarget\u003c/code\u003e.\n            Supports specifying major, minor, and/or patch versions, eg. \u003ccode\u003e\"1\"\u003c/code\u003e,\n            \u003ccode\u003e\"1.17\"\u003c/code\u003e, or \u003ccode\u003e\"1.17.1\"\u003c/code\u003e. The first Go SDK provider installed in the\n            repo\u0027s workspace (via \u003ccode\u003ego_download_sdk\u003c/code\u003e, \u003ccode\u003ego_wrap_sdk\u003c/code\u003e, etc) that\n            matches the specified version will be used for compiling the given\n            \u003ccode\u003etarget\u003c/code\u003e. If unspecified, the \u003ccode\u003etarget\u003c/code\u003e will be compiled with the same\n            SDK as it would\u0027ve with the original \u003ccode\u003ego_binary\u003c/code\u003e rule.\n            Transitions \u003ccode\u003etarget\u003c/code\u003e by changing the \u003ccode\u003e--@io_bazel_rules_go//go/toolchain:sdk_version\u003c/code\u003e\n            build flag to the value provided for \u003ccode\u003esdk_version\u003c/code\u003e here.\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "target",
        "docString": "Go binary target to transition to the given platform and/or sdk_version.\n            ",
        "required": true,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "go_library",
    "docString": "This builds a Go library from a set of source files that are all part of\n    the same package.\u003cbr\u003e\u003cbr\u003e\n    ***Note:*** For targets generated by Gazelle, \u003ccode\u003ename\u003c/code\u003e is typically the last component of the path,\n    or \u003ccode\u003ego_default_library\u003c/code\u003e, with the old naming convention.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoInfo]\u003c/li\u003e\n      \u003cli\u003e[GoArchive]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "cdeps",
        "docString": "\n            List of other libraries that the c code depends on.\n            This can be anything that would be allowed in [cc_library deps] Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cgo",
        "docString": "\n            If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain C, C++, Objective-C, and Objective-C++ files\n            and non-Go assembly files. When cgo is enabled, these files will be compiled with the C/C++ toolchain and\n            included in the package. Note that this attribute does not force cgo to be enabled. Cgo is enabled for\n            non-cross-compiling builds when a C/C++ toolchain is configured.\n            ",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "clinkopts",
        "docString": "\n            List of flags to add to the C link command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "copts",
        "docString": "\n            List of flags to add to the C compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cppopts",
        "docString": "\n            List of flags to add to the C/C++ preprocessor command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cxxopts",
        "docString": "\n            List of flags to add to the C++ compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization]. Only valid if \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "\n            List of files needed by this rule at run-time.\n            This may include data files needed or other programs that may be executed.\n            The [bazel] package may be used to locate run files; they may appear in different places\n            depending on the operating system and environment. See [data dependencies] for more information on data files.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "\n            List of Go libraries this package imports directly.\n            These may be \u003ccode\u003ego_library\u003c/code\u003e rules or compatible rules with the [GoInfo] provider.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embed",
        "docString": "\n            List of Go libraries whose sources should be compiled together with this package\u0027s sources.\n            Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e, \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with\n            the [GoInfo] provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as the embedding library.\n            At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e, and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e.\n            See [Embedding] for more information.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embedsrcs",
        "docString": "\n            The list of files that may be embedded into the compiled package using \u003ccode\u003e//go:embed\u003c/code\u003e\n            directives. All files must be in the same logical directory or a subdirectory as source files.\n            All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e directives must be in the same logical directory.\n            It\u0027s okay to mix static and generated source files and static and generated embeddable files.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "gc_goopts",
        "docString": "\n            List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "importmap",
        "docString": "\n            The actual import path of this library. By default, this is \u003ccode\u003eimportpath\u003c/code\u003e. This is mostly only visible to the compiler and linker,\n            but it may also be seen in stack traces. This must be unique among packages passed to the linker.\n            It may be set to something different than \u003ccode\u003eimportpath\u003c/code\u003e to prevent conflicts between multiple packages\n            with the same path (for example, from different vendor directories).\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "importpath",
        "docString": "\n            The source import path of this library. Other libraries can import this library using this path.\n            This must either be specified in \u003ccode\u003ego_library\u003c/code\u003e or inherited from one of the libraries in \u003ccode\u003eembed\u003c/code\u003e.\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "importpath_aliases",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "\n            The list of Go source files that are compiled to create the package.\n            Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e attribute is set,\n            in which case, \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e files are also permitted.\n            Files may be filtered at build time using Go [build constraints].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "x_defs",
        "docString": "\n            Map of defines to add to the go link command. See [Defines and stamping] for examples of how to use these.\n            ",
        "required": false,
        "default": "{}",
        "positional": false
      }
    ]
  },
  {
    "name": "go_path",
    "docString": "\u003ccode\u003ego_path\u003c/code\u003e builds a directory structure that can be used with\n    tools that understand the GOPATH directory layout. This directory structure\n    can be built by zipping, copying, or linking files.\n    \u003ccode\u003ego_path\u003c/code\u003e can depend on one or more Go targets (i.e., [go_library], [go_binary], or [go_test]).\n    It will include packages from those targets, as well as their transitive dependencies.\n    Packages will be in subdirectories named after their \u003ccode\u003eimportpath\u003c/code\u003e or \u003ccode\u003eimportmap\u003c/code\u003e attributes under a \u003ccode\u003esrc/\u003c/code\u003e directory.\n    ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "data",
        "docString": "\n            A list of targets producing data files that will be stored next to the\n            \u003ccode\u003esrc/\u003c/code\u003e directory. Useful for including things like licenses and readmes.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "A list of targets that build Go packages. A directory will be generated from\n            files in these targets and their transitive dependencies. All targets must\n            provide [GoArchive] ([go_library], [go_binary], [go_test], and similar\n            rules have this).\n\n            Only targets with explicit \u003ccode\u003eimportpath\u003c/code\u003e attributes will be included in the\n            generated directory. Synthetic packages (like the main package produced by\n            [go_test]) and packages with inferred import paths will not be\n            included. The values of \u003ccode\u003eimportmap\u003c/code\u003e attributes may influence the placement\n            of packages within the generated directory (for example, in vendor\n            directories).\n\n            The generated directory will contain original source files, including .go,\n            .s, .h, and .c files compiled by cgo. It will not contain files generated by\n            tools like cover and cgo, but it will contain generated files passed in\n            \u003ccode\u003esrcs\u003c/code\u003e attributes like .pb.go files. The generated directory will also\n            contain runfiles found in \u003ccode\u003edata\u003c/code\u003e attributes.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "include_data",
        "docString": "\n            When true, data files referenced by libraries, binaries, and tests will be\n            included in the output directory. Files listed in the \u003ccode\u003edata\u003c/code\u003e attribute\n            for this rule will be included regardless of this attribute.\n            ",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "include_pkg",
        "docString": "\n            When true, a \u003ccode\u003epkg\u003c/code\u003e subdirectory containing the compiled libraries will be created in the\n            generated \u003ccode\u003eGOPATH\u003c/code\u003e containing compiled libraries.\n            ",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "include_transitive",
        "docString": "\n            When true, the transitive dependency graph will be included in the generated \u003ccode\u003eGOPATH\u003c/code\u003e. This is\n            the default behaviour. When false, only the direct dependencies will be included in the\n            generated \u003ccode\u003eGOPATH\u003c/code\u003e.\n            ",
        "required": false,
        "default": "True",
        "positional": false
      },
      {
        "name": "mode",
        "docString": "\n            Determines how the generated directory is provided. May be one of:\n            \u003cul\u003e\n                \u003cli\u003e\u003ccode\u003e\"archive\"\u003c/code\u003e: The generated directory is packaged as a single .zip file.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003e\"copy\"\u003c/code\u003e: The generated directory is a single tree artifact. Source files\n                are copied into the tree.\u003c/li\u003e\n                \u003cli\u003e\u003ccode\u003e\"link\"\u003c/code\u003e: \u003cb\u003eUnmaintained due to correctness issues\u003c/b\u003e. Source files\n                are symlinked into the tree. All of the symlink files are provided as separate output\n                files.\u003c/li\u003e\n            \u003c/ul\u003e\n\n            ***Note:*** In \u003ccode\u003e\"copy\"\u003c/code\u003e mode, when a \u003ccode\u003eGoPath\u003c/code\u003e is consumed as a set of input\n            files or run files, Bazel may provide symbolic links instead of regular files.\n            Any program that consumes these files should dereference links, e.g., if you\n            run \u003ccode\u003etar\u003c/code\u003e, use the \u003ccode\u003e--dereference\u003c/code\u003e flag.\n            ",
        "required": false,
        "default": "\"copy\"",
        "positional": false
      }
    ]
  },
  {
    "name": "go_reset_target",
    "docString": "Forwards providers from a target and default Go binary settings.\n\ngo_reset_target depends on a single target and builds it to be a Go tool binary. It\nforwards Go providers and DefaultInfo.\n\ngo_reset_target does two things using transitions:\n   1. builds the tool with \u0027cfg \u003d \"exec\"\u0027 so they work on the execution platform.\n   2. Sets most Go settings to default value and disables nogo.\n\nThis is used for Go tool binaries that shouldn\u0027t depend on the link mode or tags of the\ntarget configuration and neither the tools nor the code they potentially\ngenerate should be subject to Nogo\u0027s static analysis. This is helpful, for example, so\na tool isn\u0027t built as a shared library with race instrumentation. This acts as an\nintermediate rule that allows users to apply these transitions.\n",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "dep",
        "docString": "The target to forward providers from and apply go_tool_transition to.",
        "required": true,
        "default": "\"\"",
        "positional": false
      }
    ]
  },
  {
    "name": "go_source",
    "docString": "This declares a set of source files and related dependencies that can be embedded into one of the\n    other rules.\n    This is used as a way of easily declaring a common set of sources re-used in multiple rules.\u003cbr\u003e\u003cbr\u003e\n    **Providers:**\n    \u003cul\u003e\n      \u003cli\u003e[GoInfo]\u003c/li\u003e\n    \u003c/ul\u003e\n    ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "data",
        "docString": "List of files needed by this rule at run-time. This may include data files\n            needed or other programs that may be executed. The [bazel] package may be\n            used to locate run files; they may appear in different places depending on the\n            operating system and environment. See [data dependencies] for more\n            information on data files.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "List of Go libraries this source list imports directly.\n            These may be go_library rules or compatible rules with the [GoInfo] provider.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embed",
        "docString": "List of Go libraries whose sources should be compiled together with this\n            package\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n            \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the [GoInfo]\n            provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as\n            the embedding library. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e,\n            and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding]\n            for more information.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "gc_goopts",
        "docString": "List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of Go source files that are compiled to create the package.\n            The following file types are permitted: \u003ccode\u003e.go, .c, .s, .syso, .S, .h\u003c/code\u003e.\n            The files may contain Go-style [build constraints].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      }
    ]
  },
  {
    "name": "go_test",
    "docString": "This builds a set of tests that can be run with \u003ccode\u003ebazel test\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003e\n    To run all tests in the workspace, and print output on failure (the\n    equivalent of \u003ccode\u003ego test ./...\u003c/code\u003e), run\u003cbr\u003e\n    \u003ccode\u003e\n    bazel test --test_output\u003derrors //...\n    \u003ccode\u003e\u003c/code\u003e\u003ccode\u003e\u003cbr\u003e\u003cbr\u003e\n    To run a Go benchmark test, run\u003cbr\u003e\n    \u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\n    bazel run //path/to:test -- -test.bench\u003d.\n    \u003c/code\u003e\u003cbr\u003e\u003cbr\u003e\n    You can run specific tests by passing the \u003ccode\u003e--test_filter\u003dpattern\n    \u003ctest_filter_\u003e\u003c/code\u003e argument to Bazel. You can pass arguments to tests by passing\n    \u003ccode\u003e--test_arg\u003darg \u003ctest_arg_\u003e\u003c/code\u003e arguments to Bazel, and you can set environment\n    variables in the test environment by passing\n    \u003ccode\u003e--test_env\u003dVAR\u003dvalue \u003ctest_env_\u003e\u003c/code\u003e. You can terminate test execution after the first\n    failure by passing the \u003ccode\u003e--test_runner_fail_fast \u003ctest_runner_fail_fast_\u003e\u003c/code\u003e argument\n    to Bazel. This is equivalent to passing \u003ccode\u003e--test_arg\u003d-failfast \u003ctest_arg_\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003e\n    To write structured testlog information to Bazel\u0027s \u003ccode\u003eXML_OUTPUT_FILE\u003c/code\u003e, tests\n    ran with \u003ccode\u003ebazel test\u003c/code\u003e execute using a wrapper. This functionality can be\n    disabled by setting \u003ccode\u003eGO_TEST_WRAP\u003d0\u003c/code\u003e in the test environment. Additionally,\n    the testbinary can be invoked with \u003ccode\u003e-test.v\u003c/code\u003e by setting\n    \u003ccode\u003eGO_TEST_WRAP_TESTV\u003d1\u003c/code\u003e in the test environment; this will result in the\n    \u003ccode\u003eXML_OUTPUT_FILE\u003c/code\u003e containing more granular data.\u003cbr\u003e\u003cbr\u003e\n    ***Note:*** To interoperate cleanly with old targets generated by [Gazelle], \u003ccode\u003ename\u003c/code\u003e\n    should be \u003ccode\u003ego_default_test\u003c/code\u003e for internal tests and\n    \u003ccode\u003ego_default_xtest\u003c/code\u003e for external tests. Gazelle now generates\n    the name  based on the last component of the path. For example, a test\n    in \u003ccode\u003e//foo/bar\u003c/code\u003e is named \u003ccode\u003ebar_test\u003c/code\u003e, and uses internal and external\n    sources.\n    ",
    "params": [
      {
        "name": "name",
        "docString": "A unique name for this target.",
        "required": true,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "cdeps",
        "docString": "The list of other libraries that the c code depends on.\n            This can be anything that would be allowed in [cc_library deps]\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cgo",
        "docString": "\n            If \u003ccode\u003eTrue\u003c/code\u003e, the package may contain [cgo] code, and \u003ccode\u003esrcs\u003c/code\u003e may contain\n            C, C++, Objective-C, and Objective-C++ files and non-Go assembly files.\n            When cgo is enabled, these files will be compiled with the C/C++ toolchain\n            and included in the package. Note that this attribute does not force cgo\n            to be enabled. Cgo is enabled for non-cross-compiling builds when a C/C++\n            toolchain is configured.\n            ",
        "required": false,
        "default": "False",
        "positional": false
      },
      {
        "name": "clinkopts",
        "docString": "List of flags to add to the C link command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "copts",
        "docString": "List of flags to add to the C compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cppopts",
        "docString": "List of flags to add to the C/C++ preprocessor command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "cxxopts",
        "docString": "List of flags to add to the C++ compilation command.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            Only valid if \u003ccode\u003ecgo\u003c/code\u003e \u003d \u003ccode\u003eTrue\u003c/code\u003e.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "data",
        "docString": "List of files needed by this rule at run-time. This may include data files\n            needed or other programs that may be executed. The [bazel] package may be\n            used to locate run files; they may appear in different places depending on the\n            operating system and environment. See [data dependencies] for more\n            information on data files.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "deps",
        "docString": "List of Go libraries this test imports directly.\n            These may be go_library rules or compatible rules with the [GoInfo] provider.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embed",
        "docString": "List of Go libraries whose sources should be compiled together with this\n            package\u0027s sources. Labels listed here must name \u003ccode\u003ego_library\u003c/code\u003e,\n            \u003ccode\u003ego_proto_library\u003c/code\u003e, or other compatible targets with the\n            [GoInfo] provider. Embedded libraries must have the same \u003ccode\u003eimportpath\u003c/code\u003e as\n            the embedding library. At most one embedded library may have \u003ccode\u003ecgo \u003d True\u003c/code\u003e,\n            and the embedding library may not also have \u003ccode\u003ecgo \u003d True\u003c/code\u003e. See [Embedding]\n            for more information.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "embedsrcs",
        "docString": "The list of files that may be embedded into the compiled package using\n            \u003ccode\u003e//go:embed\u003c/code\u003e directives. All files must be in the same logical directory\n            or a subdirectory as source files. All source files containing \u003ccode\u003e//go:embed\u003c/code\u003e\n            directives must be in the same logical directory. It\u0027s okay to mix static and\n            generated source files and static and generated embeddable files.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "env",
        "docString": "Environment variables to set for the test execution.\n            The values (but not keys) are subject to\n            location expansion but not full\n            make variable expansion.\n            ",
        "required": false,
        "default": "{}",
        "positional": false
      },
      {
        "name": "env_inherit",
        "docString": "Environment variables to inherit from the external environment.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "gc_goopts",
        "docString": "List of flags to add to the Go compilation command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "gc_linkopts",
        "docString": "List of flags to add to the Go link command when using the gc compiler.\n            Subject to [\"Make variable\"] substitution and [Bourne shell tokenization].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "goarch",
        "docString": "Forces a binary to be cross-compiled for a specific architecture. It\u0027s usually\n            better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n            This disables cgo by default, since a cross-compiling C/C++ toolchain is\n            rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n            See [Cross compilation] for more information.\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "goos",
        "docString": "Forces a binary to be cross-compiled for a specific operating system. It\u0027s\n            usually better to control this on the command line with \u003ccode\u003e--platforms\u003c/code\u003e.\n\n            This disables cgo by default, since a cross-compiling C/C++ toolchain is\n            rarely available. To force cgo, set \u003ccode\u003epure\u003c/code\u003e \u003d \u003ccode\u003eoff\u003c/code\u003e.\n\n            See [Cross compilation] for more information.\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "gotags",
        "docString": "Enables a list of build tags when evaluating [build constraints]. Useful for\n            conditional compilation.\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "importpath",
        "docString": "The import path of this test. Tests can\u0027t actually be imported, but this\n            may be used by [go_path] and other tools to report the location of source\n            files. This may be inferred from embedded libraries.\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "linkmode",
        "docString": "Determines how the binary should be built and linked. This accepts some of\n            the same values as \u003ccode\u003ego build -buildmode\u003c/code\u003e and works the same way.\n            \u003cbr\u003e\u003cbr\u003e\n            \u003cul\u003e\n            \u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e (default): Controlled by \u003ccode\u003e//go/config:linkmode\u003c/code\u003e, which defaults to \u003ccode\u003enormal\u003c/code\u003e.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003enormal\u003c/code\u003e: Builds a normal executable with position-dependent code.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003epie\u003c/code\u003e: Builds a position-independent executable.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003eplugin\u003c/code\u003e: Builds a shared library that can be loaded as a Go plugin. Only supported on platforms that support plugins.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003ec-shared\u003c/code\u003e: Builds a shared library that can be linked into a C program.\u003c/li\u003e\n            \u003cli\u003e\u003ccode\u003ec-archive\u003c/code\u003e: Builds an archive that can be linked into a C program.\u003c/li\u003e\n            \u003c/ul\u003e\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "msan",
        "docString": "Controls whether code is instrumented for memory sanitization. May be one of\n            \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n            disabled. In most cases, it\u0027s better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:msan\u003c/code\u003e. See [mode attributes], specifically\n            [msan].\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "pure",
        "docString": "Controls whether cgo source code and dependencies are compiled and linked,\n            similar to setting \u003ccode\u003eCGO_ENABLED\u003c/code\u003e. May be one of \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e,\n            or \u003ccode\u003eauto\u003c/code\u003e. If \u003ccode\u003eauto\u003c/code\u003e, pure mode is enabled when no C/C++\n            toolchain is configured or when cross-compiling. It\u0027s usually better to\n            control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:pure\u003c/code\u003e. See [mode attributes], specifically\n            [pure].\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "race",
        "docString": "Controls whether code is instrumented for race detection. May be one of\n            \u003ccode\u003eon\u003c/code\u003e, \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available when cgo is\n            disabled. In most cases, it\u0027s better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:race\u003c/code\u003e. See [mode attributes], specifically\n            [race].\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "rundir",
        "docString": " A directory to cd to before the test is run.\n            This should be a path relative to the root directory of the\n            repository in which the test is defined, which can be the main or an\n            external repository.\n\n            The default behaviour is to change to the relative path\n            corresponding to the test\u0027s package, which replicates the normal\n            behaviour of \u003ccode\u003ego test\u003c/code\u003e so it is easy to write compatible tests.\n\n            Setting it to \u003ccode\u003e.\u003c/code\u003e makes the test behave the normal way for a bazel\n            test, except that the working directory is always that of the test\u0027s\n            repository, which is not necessarily the main repository.\n\n            Note: If runfile symlinks are disabled (such as on Windows by\n            default), the test will run in the working directory set by Bazel,\n            which is the subdirectory of the runfiles directory corresponding to\n            the main repository.\n            ",
        "required": false,
        "default": "\"\"",
        "positional": false
      },
      {
        "name": "srcs",
        "docString": "The list of Go source files that are compiled to create the package.\n            Only \u003ccode\u003e.go\u003c/code\u003e, \u003ccode\u003e.s\u003c/code\u003e, and \u003ccode\u003e.syso\u003c/code\u003e files are permitted, unless the \u003ccode\u003ecgo\u003c/code\u003e\n            attribute is set, in which case,\n            \u003ccode\u003e.c .cc .cpp .cxx .h .hh .hpp .hxx .inc .m .mm\u003c/code\u003e\n            files are also permitted. Files may be filtered at build time\n            using Go [build constraints].\n            ",
        "required": false,
        "default": "[]",
        "positional": false
      },
      {
        "name": "static",
        "docString": "Controls whether a binary is statically linked. May be one of \u003ccode\u003eon\u003c/code\u003e,\n            \u003ccode\u003eoff\u003c/code\u003e, or \u003ccode\u003eauto\u003c/code\u003e. Not available on all platforms or in all\n            modes. It\u0027s usually better to control this on the command line with\n            \u003ccode\u003e--@io_bazel_rules_go//go/config:static\u003c/code\u003e. See [mode attributes],\n            specifically [static].\n            ",
        "required": false,
        "default": "\"auto\"",
        "positional": false
      },
      {
        "name": "x_defs",
        "docString": "Map of defines to add to the go link command.\n            See [Defines and stamping] for examples of how to use these.\n            ",
        "required": false,
        "default": "{}",
        "positional": false
      }
    ]
  }
]
