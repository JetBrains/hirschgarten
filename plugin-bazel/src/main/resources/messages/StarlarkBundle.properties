highlighter.descriptor.text.keyword=Keyword
highlighter.descriptor.text.string=String
highlighter.descriptor.text.number=Number
highlighter.descriptor.text.lineComment=Line comment
highlighter.descriptor.text.semicolon=Semicolon
highlighter.descriptor.text.comma=Comma
highlighter.descriptor.text.dot=Dot
highlighter.descriptor.text.parentheses=Parentheses
highlighter.descriptor.text.brackets=Brackets
highlighter.descriptor.text.identifier=Identifier
highlighter.descriptor.text.functionDeclaration=Function declaration
highlighter.descriptor.text.namedArgument=Named argument
parser.expected.expression=Expression expected
parser.expected.string=String expected
parser.expected.rbracket=']' expected
parser.expected.expr.or.comma.or.bracket=Expected expression, ',' or ']'
parser.expected.in='in' expected
parser.expected.for.or.bracket=']' or 'for' expected
parser.expected.comma=',' expected
parser.expected.colon=':' expected
parser.expected.rpar=')' expected
parser.expected.lpar='(' expected
parser.expected.rbrace='}' expected
parser.expected.name=Name expected
parser.expected.colon.or.rbracket=':' or ']' expected
parser.expected.comma.or.rpar=',' or ')' expected
parser.expected.else='else' expected
parser.expected.identifier=Identifier expected
parser.expected.comma.lpar.rpar=',' or '(' or ')' expected
parser.expected.formal.param.name=Formal parameter name expected
parser.reserved.keyword.cannot.be.used.as.identifier=''{0}'' reserved keyword can''t be used as an identifier
parser.statement.expected.found.0=Statement expected, found {0}
parser.unexpected.indent=Unexpected indent
parser.unindent.does.not.match.any.outer.indent=Unindent does not match any outer indentation level
parser.expected.statement=Statement expected
parser.indent.expected=Indent expected
parser.end.of.statement.expected=End of statement expected
parser.rbracket.or.comma.expected=']' or ',' expected
parser.unexpected.expression.syntax=Unexpected expression syntax
parser.tuple.expression.expected=Tuple expression expected
parser.value.expression.expected=Value expression expected
annotator.missing.closing.quote=Missing closing quote [{0}]
annotator.missing.closing.triple.quote=Missing closing triple quote
completion.builtin=BuiltIn
starlark.debug.config.type.name=Remote Starlark Debug
starlark.debug.config.type.description=Remote Starlark debug
starlark.debug.task.title=Debugging Starlark
starlark.debug.config.port=Port
starlark.debug.port.out.of.range=Port number must be between {0} and {1}
starlark.debug.port.placeholder=<port>
starlark.debug.value.obtain.failed=Failed to obtain a result
starlark.debug.not.top.frame=Expression evaluation can only be used on the top stack frame
